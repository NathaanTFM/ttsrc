/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse eggyyparse
#define yylex   eggyylex
#define yyerror eggyyerror
#define yylval  eggyylval
#define yychar  eggyychar
#define yydebug eggyydebug
#define yynerrs eggyynerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     EGG_NUMBER = 258,
     EGG_ULONG = 259,
     EGG_STRING = 260,
     ANIMPRELOAD = 261,
     BEZIERCURVE = 262,
     BFACE = 263,
     BILLBOARD = 264,
     BILLBOARDCENTER = 265,
     BINORMAL = 266,
     BUNDLE = 267,
     CLOSED = 268,
     COLLIDE = 269,
     COMMENT = 270,
     COMPONENT = 271,
     COORDSYSTEM = 272,
     CV = 273,
     DART = 274,
     DNORMAL = 275,
     DRGBA = 276,
     DUV = 277,
     DXYZ = 278,
     DCS = 279,
     DISTANCE = 280,
     DTREF = 281,
     DYNAMICVERTEXPOOL = 282,
     EXTERNAL_FILE = 283,
     GROUP = 284,
     DEFAULTPOSE = 285,
     JOINT = 286,
     KNOTS = 287,
     INCLUDE = 288,
     INSTANCE = 289,
     LINE = 290,
     LOOP = 291,
     MATERIAL = 292,
     MATRIX3 = 293,
     MATRIX4 = 294,
     MODEL = 295,
     MREF = 296,
     NORMAL = 297,
     NURBSCURVE = 298,
     NURBSSURFACE = 299,
     OBJECTTYPE = 300,
     ORDER = 301,
     OUTTANGENT = 302,
     POINTLIGHT = 303,
     POLYGON = 304,
     REF = 305,
     RGBA = 306,
     ROTATE = 307,
     ROTX = 308,
     ROTY = 309,
     ROTZ = 310,
     SANIM = 311,
     SCALAR = 312,
     SCALE = 313,
     SEQUENCE = 314,
     SHADING = 315,
     SWITCH = 316,
     SWITCHCONDITION = 317,
     TABLE = 318,
     TABLE_V = 319,
     TAG = 320,
     TANGENT = 321,
     TEXLIST = 322,
     TEXTURE = 323,
     TLENGTHS = 324,
     TRANSFORM = 325,
     TRANSLATE = 326,
     TREF = 327,
     TRIANGLEFAN = 328,
     TRIANGLESTRIP = 329,
     TRIM = 330,
     TXT = 331,
     UKNOTS = 332,
     UV = 333,
     VKNOTS = 334,
     VERTEX = 335,
     VERTEXANIM = 336,
     VERTEXPOOL = 337,
     VERTEXREF = 338,
     XFMANIM = 339,
     XFMSANIM = 340,
     START_EGG = 341,
     START_GROUP_BODY = 342,
     START_TEXTURE_BODY = 343,
     START_PRIMITIVE_BODY = 344
   };
#endif
/* Tokens.  */
#define EGG_NUMBER 258
#define EGG_ULONG 259
#define EGG_STRING 260
#define ANIMPRELOAD 261
#define BEZIERCURVE 262
#define BFACE 263
#define BILLBOARD 264
#define BILLBOARDCENTER 265
#define BINORMAL 266
#define BUNDLE 267
#define CLOSED 268
#define COLLIDE 269
#define COMMENT 270
#define COMPONENT 271
#define COORDSYSTEM 272
#define CV 273
#define DART 274
#define DNORMAL 275
#define DRGBA 276
#define DUV 277
#define DXYZ 278
#define DCS 279
#define DISTANCE 280
#define DTREF 281
#define DYNAMICVERTEXPOOL 282
#define EXTERNAL_FILE 283
#define GROUP 284
#define DEFAULTPOSE 285
#define JOINT 286
#define KNOTS 287
#define INCLUDE 288
#define INSTANCE 289
#define LINE 290
#define LOOP 291
#define MATERIAL 292
#define MATRIX3 293
#define MATRIX4 294
#define MODEL 295
#define MREF 296
#define NORMAL 297
#define NURBSCURVE 298
#define NURBSSURFACE 299
#define OBJECTTYPE 300
#define ORDER 301
#define OUTTANGENT 302
#define POINTLIGHT 303
#define POLYGON 304
#define REF 305
#define RGBA 306
#define ROTATE 307
#define ROTX 308
#define ROTY 309
#define ROTZ 310
#define SANIM 311
#define SCALAR 312
#define SCALE 313
#define SEQUENCE 314
#define SHADING 315
#define SWITCH 316
#define SWITCHCONDITION 317
#define TABLE 318
#define TABLE_V 319
#define TAG 320
#define TANGENT 321
#define TEXLIST 322
#define TEXTURE 323
#define TLENGTHS 324
#define TRANSFORM 325
#define TRANSLATE 326
#define TREF 327
#define TRIANGLEFAN 328
#define TRIANGLESTRIP 329
#define TRIM 330
#define TXT 331
#define UKNOTS 332
#define UV 333
#define VKNOTS 334
#define VERTEX 335
#define VERTEXANIM 336
#define VERTEXPOOL 337
#define VERTEXREF 338
#define XFMANIM 339
#define XFMSANIM 340
#define START_EGG 341
#define START_GROUP_BODY 342
#define START_TEXTURE_BODY 343
#define START_PRIMITIVE_BODY 344




/* Copy the first part of user declarations.  */
#line 6 "parser.yxx"


#include "pandabase.h"
#include "config_egg.h"
#include "parserDefs.h"
#include "lexerDefs.h"
#include "eggObject.h"
#include "eggGroup.h"
#include "eggVertex.h"
#include "eggVertexPool.h"
#include "eggVertexUV.h"
#include "eggPolygon.h"
#include "eggCompositePrimitive.h"
#include "eggTriangleFan.h"
#include "eggTriangleStrip.h"
#include "eggPoint.h"
#include "eggLine.h"
#include "eggNurbsSurface.h"
#include "eggNurbsCurve.h"
#include "eggTable.h"
#include "eggSAnimData.h"
#include "eggXfmSAnim.h"
#include "eggXfmAnimData.h"
#include "eggTexture.h"
#include "eggMaterial.h"
#include "eggComment.h"
#include "eggCoordinateSystem.h"
#include "eggExternalReference.h"
#include "eggData.h"
#include "eggAnimPreload.h"
#include "eggTransform.h"
#include "pt_EggTexture.h"
#include "pt_EggMaterial.h"

#include "string_utils.h"
#include "filename.h"
#include "luse.h"
#include "lmatrix.h"
#include "coordinateSystem.h"
#include "pvector.h"
#include "dcast.h"
#include "thread.h"

// Because our token type contains objects of type string, which
// require correct copy construction (and not simply memcpying), we
// cannot use bison's built-in auto-stack-grow feature.  As an easy
// solution, we ensure here that we have enough yacc stack to start
// with, and that it doesn't ever try to grow.
#define YYINITDEPTH 1000
#define YYMAXDEPTH 1000

// We need a stack of EggObject pointers.  Each time we encounter a
// nested EggObject of some kind, we'll allocate a new one of these
// and push it onto the stack.  At any given time, the top of the
// stack is the EggObject we are currently scanning.

typedef pvector< PT(EggObject) > EggStack;
static EggStack egg_stack;

// This is used just when parsing a <Transform> or <DefaultPose> entry.
static EggTransform *egg_top_transform;

// There's one "top-level" egg node, which is where we should parent
// things (e.g. implicit textures) encountered in the egg file that
// don't have an explicit place in the tree.  If this is NULL, such
// things won't be parented anywhere.
static EggGroupNode *egg_top_node;

// We need a table mapping vertex pool names to vertex pools.
typedef pmap<string,  PT(EggVertexPool) > VertexPools;
static VertexPools vertex_pools;

// And another one mapping texture names to textures.
typedef pmap<string,  PT_EggTexture > Textures;
static Textures textures;

// And again for material names to materials.
typedef pmap<string,  PT_EggMaterial > Materials;
static Materials materials;

// Group names to groups.
typedef pmap<string,  PT(EggGroup) > Groups;
static Groups groups;

// We need to be able to save the index number requested for a vertex
// temporarily.
static int vertex_index;

// We need to hold a matrix for a little bit while parsing the
// <Transform> entries.
static LMatrix3d matrix_2d;


////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

void
egg_init_parser(istream &in, const string &filename,
                EggObject *tos, EggGroupNode *top_node) {
  egg_init_lexer(in, filename);

  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
  groups.clear();

  egg_stack.push_back(tos);
  egg_top_node = top_node;
}

void
egg_cleanup_parser() {
  // Check for undefined vertex pools.
  VertexPools::const_iterator vpi;
  for (vpi = vertex_pools.begin(); vpi != vertex_pools.end(); ++vpi) {
    EggVertexPool *pool = (*vpi).second;
    if (pool->has_forward_vertices()) {
      if (!pool->has_defined_vertices()) {
        eggyyerror("Undefined vertex pool " + pool->get_name());
      } else {
        eggyyerror("Undefined vertices in pool " + pool->get_name());
        
        egg_cat.error(false)
          << "Undefined vertex index numbers:";
        EggVertexPool::const_iterator vi;
        for (vi = pool->begin(); vi != pool->end(); ++vi) {
          EggVertex *vertex = (*vi);
          if (vertex->is_forward_reference()) {
            egg_cat.error(false)
              << " " << vertex->get_index();
          }
        }
        egg_cat.error(false) 
          << "\n";
      }
    }
  }

  // Clean these out after we're done, so we don't keep big memory
  // structures around needlessly.
  egg_stack.clear();
  vertex_pools.clear();
  textures.clear();
  materials.clear();
  groups.clear();
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef int YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 443 "y.tab.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  14
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1358

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  92
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  123
/* YYNRULES -- Number of rules.  */
#define YYNRULES  270
/* YYNRULES -- Number of states.  */
#define YYNSTATES  746

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   344

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    90,     2,    91,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    17,    20,    22,
      24,    26,    28,    30,    32,    34,    36,    38,    40,    42,
      44,    46,    48,    50,    52,    54,    56,    61,    67,    68,
      76,    78,    85,    88,    89,    96,    98,   105,   111,   118,
     119,   126,   128,   131,   132,   138,   139,   146,   148,   151,
     155,   160,   161,   169,   175,   181,   190,   199,   202,   206,
     214,   222,   230,   239,   247,   256,   260,   269,   278,   283,
     293,   303,   304,   311,   312,   319,   320,   327,   329,   336,
     342,   350,   358,   364,   370,   376,   382,   388,   394,   400,
     407,   413,   416,   419,   422,   425,   431,   434,   436,   438,
     441,   442,   448,   449,   455,   457,   460,   463,   466,   469,
     472,   475,   478,   481,   484,   487,   490,   493,   499,   506,
     511,   516,   521,   526,   534,   540,   547,   552,   557,   559,
     569,   574,   576,   593,   603,   605,   612,   617,   629,   642,
     643,   650,   651,   658,   659,   666,   667,   674,   675,   682,
     683,   690,   691,   698,   700,   706,   712,   714,   715,   723,
     729,   735,   741,   744,   750,   756,   762,   769,   771,   777,
     783,   789,   792,   798,   804,   810,   816,   822,   828,   831,
     837,   844,   846,   852,   858,   864,   867,   873,   879,   885,
     891,   897,   904,   906,   908,   910,   914,   923,   932,   937,
     947,   957,   959,   968,   971,   973,   975,   977,   983,   985,
     988,   990,   992,   993,  1000,  1001,  1008,  1010,  1013,  1016,
    1019,  1022,  1025,  1026,  1033,  1035,  1042,  1048,  1049,  1056,
    1058,  1065,  1071,  1072,  1079,  1081,  1088,  1091,  1092,  1099,
    1101,  1108,  1110,  1113,  1115,  1118,  1120,  1122,  1124,  1126,
    1128,  1130,  1132,  1134,  1136,  1138,  1140,  1142,  1144,  1146,
    1148,  1150,  1152,  1155,  1157,  1159,  1161,  1163,  1165,  1167,
    1169
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
      93,     0,    -1,    86,    94,    -1,    87,   122,    -1,    88,
     100,    -1,    89,   163,    -1,   214,    -1,    94,    95,    -1,
      96,    -1,    97,    -1,    98,    -1,   101,    -1,   104,    -1,
     105,    -1,   116,    -1,   118,    -1,   120,    -1,   148,    -1,
     150,    -1,   152,    -1,   154,    -1,   156,    -1,   158,    -1,
     160,    -1,   181,    -1,   195,    -1,    17,    90,   206,    91,
      -1,    15,   205,    90,   209,    91,    -1,    -1,    68,   204,
      90,   206,    99,   100,    91,    -1,   214,    -1,   100,    57,
     204,    90,   212,    91,    -1,   100,   125,    -1,    -1,    37,
     204,    90,   102,   103,    91,    -1,   214,    -1,   103,    57,
     204,    90,   212,    91,    -1,    28,   205,    90,   206,    91,
      -1,   208,    28,   205,    90,   206,    91,    -1,    -1,    82,
     204,   106,    90,   107,    91,    -1,   214,    -1,   107,   108,
      -1,    -1,    80,   109,    90,   111,    91,    -1,    -1,    80,
     213,   110,    90,   111,    91,    -1,   211,    -1,   211,   211,
      -1,   211,   211,   211,    -1,   211,   211,   211,   211,    -1,
      -1,   111,    78,   205,    90,   112,   113,    91,    -1,   111,
      42,    90,   114,    91,    -1,   111,    51,    90,   115,    91,
      -1,   111,    23,   208,    90,   211,   211,   211,    91,    -1,
     111,    23,    90,   208,   211,   211,   211,    91,    -1,   211,
     211,    -1,   211,   211,   211,    -1,   113,    66,    90,   211,
     211,   211,    91,    -1,   113,    11,    90,   211,   211,   211,
      91,    -1,   113,    22,   208,    90,   211,   211,    91,    -1,
     113,    22,   208,    90,   211,   211,   211,    91,    -1,   113,
      22,    90,   208,   211,   211,    91,    -1,   113,    22,    90,
     208,   211,   211,   211,    91,    -1,   211,   211,   211,    -1,
     114,    20,   208,    90,   211,   211,   211,    91,    -1,   114,
      20,    90,   208,   211,   211,   211,    91,    -1,   211,   211,
     211,   211,    -1,   115,    21,   208,    90,   211,   211,   211,
     211,    91,    -1,   115,    21,    90,   208,   211,   211,   211,
     211,    91,    -1,    -1,    29,   205,   117,    90,   122,    91,
      -1,    -1,    31,   205,   119,    90,   122,    91,    -1,    -1,
      34,   205,   121,    90,   122,    91,    -1,   214,    -1,   122,
      57,   204,    90,   212,    91,    -1,   122,     9,    90,   208,
      91,    -1,   122,    10,    90,   211,   211,   211,    91,    -1,
     122,    14,   205,    90,   123,   124,    91,    -1,   122,    24,
      90,   213,    91,    -1,   122,    24,    90,     5,    91,    -1,
     122,    19,    90,   213,    91,    -1,   122,    19,    90,     5,
      91,    -1,   122,    61,    90,   213,    91,    -1,   122,    45,
      90,   206,    91,    -1,   122,    40,    90,   213,    91,    -1,
     122,    65,   205,    90,   209,    91,    -1,   122,    67,    90,
     213,    91,    -1,   122,   125,    -1,   122,   127,    -1,   122,
     144,    -1,   122,   146,    -1,   122,    50,    90,   203,    91,
      -1,   122,    95,    -1,   208,    -1,   214,    -1,   124,   208,
      -1,    -1,    70,   126,    90,   129,    91,    -1,    -1,    30,
     128,    90,   129,    91,    -1,   214,    -1,   129,   130,    -1,
     129,   131,    -1,   129,   132,    -1,   129,   133,    -1,   129,
     134,    -1,   129,   135,    -1,   129,   136,    -1,   129,   137,
      -1,   129,   138,    -1,   129,   139,    -1,   129,   140,    -1,
     129,   142,    -1,    71,    90,   211,   211,    91,    -1,    71,
      90,   211,   211,   211,    91,    -1,    52,    90,   211,    91,
      -1,    53,    90,   211,    91,    -1,    54,    90,   211,    91,
      -1,    55,    90,   211,    91,    -1,    52,    90,   211,   211,
     211,   211,    91,    -1,    58,    90,   211,   211,    91,    -1,
      58,    90,   211,   211,   211,    91,    -1,    58,    90,   211,
      91,    -1,    38,    90,   141,    91,    -1,   214,    -1,   211,
     211,   211,   211,   211,   211,   211,   211,   211,    -1,    39,
      90,   143,    91,    -1,   214,    -1,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
     211,   211,    -1,    83,    90,   198,   145,    50,    90,   202,
      91,    91,    -1,   214,    -1,   145,    57,   204,    90,   212,
      91,    -1,    62,    90,   147,    91,    -1,    25,    90,   211,
     211,    80,    90,   211,   211,   211,    91,    91,    -1,    25,
      90,   211,   211,   211,    80,    90,   211,   211,   211,    91,
      91,    -1,    -1,    49,   205,   149,    90,   163,    91,    -1,
      -1,    73,   205,   151,    90,   163,    91,    -1,    -1,    74,
     205,   153,    90,   163,    91,    -1,    -1,    48,   205,   155,
      90,   163,    91,    -1,    -1,    35,   205,   157,    90,   163,
      91,    -1,    -1,    44,   205,   159,    90,   165,    91,    -1,
      -1,    43,   205,   161,    90,   166,    91,    -1,   214,    -1,
     162,    42,    90,   170,    91,    -1,   162,    51,    90,   171,
      91,    -1,   214,    -1,    -1,   163,    16,   213,    90,   164,
     162,    91,    -1,   163,    72,    90,   167,    91,    -1,   163,
      68,    90,   168,    91,    -1,   163,    41,    90,   169,    91,
      -1,   163,   173,    -1,   163,    42,    90,   170,    91,    -1,
     163,    51,    90,   171,    91,    -1,   163,     8,    90,   172,
      91,    -1,   163,    57,   204,    90,   212,    91,    -1,   214,
      -1,   165,    72,    90,   167,    91,    -1,   165,    68,    90,
     168,    91,    -1,   165,    41,    90,   169,    91,    -1,   165,
     173,    -1,   165,    42,    90,   170,    91,    -1,   165,    51,
      90,   171,    91,    -1,   165,     8,    90,   172,    91,    -1,
     165,    46,    90,   174,    91,    -1,   165,    77,    90,   175,
      91,    -1,   165,    79,    90,   176,    91,    -1,   165,   160,
      -1,   165,    75,    90,   177,    91,    -1,   165,    57,   204,
      90,   212,    91,    -1,   214,    -1,   166,    72,    90,   167,
      91,    -1,   166,    68,    90,   168,    91,    -1,   166,    41,
      90,   169,    91,    -1,   166,   173,    -1,   166,    42,    90,
     170,    91,    -1,   166,    51,    90,   171,    91,    -1,   166,
       8,    90,   172,    91,    -1,   166,    46,    90,   179,    91,
      -1,   166,    32,    90,   180,    91,    -1,   166,    57,   204,
      90,   212,    91,    -1,   200,    -1,   204,    -1,   201,    -1,
     211,   211,   211,    -1,   170,    20,   208,    90,   211,   211,
     211,    91,    -1,   170,    20,    90,   208,   211,   211,   211,
      91,    -1,   211,   211,   211,   211,    -1,   171,    21,   208,
      90,   211,   211,   211,   211,    91,    -1,   171,    21,    90,
     208,   211,   211,   211,   211,    91,    -1,   213,    -1,    83,
      90,   198,    50,    90,   202,    91,    91,    -1,   213,   213,
      -1,   199,    -1,   199,    -1,   214,    -1,   177,    36,    90,
     178,    91,    -1,   214,    -1,   178,   160,    -1,   213,    -1,
     199,    -1,    -1,    63,   205,   182,    90,   185,    91,    -1,
      -1,    12,   205,   184,    90,   185,    91,    -1,   214,    -1,
     185,   181,    -1,   185,   183,    -1,   185,   186,    -1,   185,
     189,    -1,   185,   192,    -1,    -1,    56,   205,   187,    90,
     188,    91,    -1,   214,    -1,   188,    57,   204,    90,   212,
      91,    -1,   188,    64,    90,   199,    91,    -1,    -1,    84,
     205,   190,    90,   191,    91,    -1,   214,    -1,   191,    57,
     204,    90,   212,    91,    -1,   191,    64,    90,   199,    91,
      -1,    -1,    85,   205,   193,    90,   194,    91,    -1,   214,
      -1,   194,    57,   204,    90,   212,    91,    -1,   194,   186,
      -1,    -1,     6,   205,   196,    90,   197,    91,    -1,   214,
      -1,   197,    57,   204,    90,   212,    91,    -1,   214,    -1,
     198,   213,    -1,   214,    -1,   199,   211,    -1,   204,    -1,
     204,    -1,   204,    -1,   204,    -1,   214,    -1,   208,    -1,
     207,    -1,   214,    -1,   208,    -1,   214,    -1,   208,    -1,
       3,    -1,     4,    -1,     5,    -1,   214,    -1,   210,    -1,
     208,    -1,   210,   208,    -1,     3,    -1,     4,    -1,     3,
      -1,     4,    -1,     5,    -1,     3,    -1,     4,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   231,   231,   232,   233,   234,   245,   246,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   290,   313,   328,   327,
     355,   356,   688,   700,   699,   726,   727,   822,   829,   850,
     849,   889,   890,   902,   901,   913,   912,   958,   962,   966,
     970,   975,   974,   989,   990,   991,   999,  1018,  1022,  1026,
    1034,  1042,  1050,  1058,  1066,  1084,  1088,  1096,  1114,  1118,
    1126,  1145,  1144,  1170,  1169,  1191,  1190,  1215,  1216,  1346,
    1358,  1363,  1370,  1376,  1389,  1396,  1409,  1415,  1421,  1427,
    1432,  1438,  1439,  1440,  1441,  1442,  1451,  1465,  1495,  1496,
    1519,  1518,  1535,  1534,  1555,  1556,  1557,  1558,  1559,  1560,
    1561,  1562,  1563,  1564,  1565,  1566,  1567,  1571,  1578,  1585,
    1592,  1599,  1606,  1613,  1620,  1627,  1634,  1641,  1645,  1646,
    1658,  1662,  1663,  1685,  1718,  1722,  1747,  1759,  1764,  1782,
    1781,  1801,  1800,  1820,  1819,  1839,  1838,  1858,  1857,  1877,
    1876,  1896,  1895,  1915,  1916,  1917,  1928,  1930,  1929,  1950,
    1951,  1952,  1953,  1954,  1955,  1956,  1957,  2030,  2031,  2032,
    2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2047,
    2048,  2112,  2113,  2114,  2115,  2116,  2117,  2118,  2119,  2120,
    2121,  2122,  2191,  2208,  2248,  2265,  2269,  2277,  2295,  2299,
    2307,  2325,  2341,  2372,  2390,  2410,  2430,  2435,  2446,  2452,
    2471,  2487,  2509,  2508,  2532,  2531,  2552,  2553,  2557,  2561,
    2565,  2569,  2585,  2584,  2605,  2606,  2618,  2633,  2632,  2653,
    2654,  2671,  2686,  2685,  2706,  2707,  2722,  2738,  2737,  2758,
    2759,  2783,  2787,  2801,  2805,  2819,  2840,  2861,  2886,  2907,
    2912,  2924,  2936,  2941,  2952,  2956,  2970,  2974,  2978,  2991,
    2995,  3011,  3015,  3029,  3030,  3045,  3051,  3057,  3074,  3082,
    3088
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "EGG_NUMBER", "EGG_ULONG", "EGG_STRING",
  "ANIMPRELOAD", "BEZIERCURVE", "BFACE", "BILLBOARD", "BILLBOARDCENTER",
  "BINORMAL", "BUNDLE", "CLOSED", "COLLIDE", "COMMENT", "COMPONENT",
  "COORDSYSTEM", "CV", "DART", "DNORMAL", "DRGBA", "DUV", "DXYZ", "DCS",
  "DISTANCE", "DTREF", "DYNAMICVERTEXPOOL", "EXTERNAL_FILE", "GROUP",
  "DEFAULTPOSE", "JOINT", "KNOTS", "INCLUDE", "INSTANCE", "LINE", "LOOP",
  "MATERIAL", "MATRIX3", "MATRIX4", "MODEL", "MREF", "NORMAL",
  "NURBSCURVE", "NURBSSURFACE", "OBJECTTYPE", "ORDER", "OUTTANGENT",
  "POINTLIGHT", "POLYGON", "REF", "RGBA", "ROTATE", "ROTX", "ROTY", "ROTZ",
  "SANIM", "SCALAR", "SCALE", "SEQUENCE", "SHADING", "SWITCH",
  "SWITCHCONDITION", "TABLE", "TABLE_V", "TAG", "TANGENT", "TEXLIST",
  "TEXTURE", "TLENGTHS", "TRANSFORM", "TRANSLATE", "TREF", "TRIANGLEFAN",
  "TRIANGLESTRIP", "TRIM", "TXT", "UKNOTS", "UV", "VKNOTS", "VERTEX",
  "VERTEXANIM", "VERTEXPOOL", "VERTEXREF", "XFMANIM", "XFMSANIM",
  "START_EGG", "START_GROUP_BODY", "START_TEXTURE_BODY",
  "START_PRIMITIVE_BODY", "'{'", "'}'", "$accept", "grammar", "egg",
  "node", "coordsystem", "comment", "texture", "@1", "texture_body",
  "material", "@2", "material_body", "external_reference", "vertex_pool",
  "@3", "vertex_pool_body", "vertex", "@4", "@5", "vertex_body", "@6",
  "vertex_uv_body", "vertex_normal_body", "vertex_color_body", "group",
  "@7", "joint", "@8", "instance", "@9", "group_body", "cs_type",
  "collide_flags", "transform", "@10", "default_pose", "@11",
  "transform_body", "translate2d", "translate3d", "rotate2d", "rotx",
  "roty", "rotz", "rotate3d", "scale2d", "scale3d", "uniform_scale",
  "matrix3", "matrix3_body", "matrix4", "matrix4_body", "group_vertex_ref",
  "group_vertex_membership", "switchcondition", "switchcondition_body",
  "polygon", "@12", "trianglefan", "@13", "trianglestrip", "@14",
  "point_light", "@15", "line", "@16", "nurbs_surface", "@17",
  "nurbs_curve", "@18", "primitive_component_body", "primitive_body",
  "@19", "nurbs_surface_body", "nurbs_curve_body", "primitive_tref_body",
  "primitive_texture_body", "primitive_material_body",
  "primitive_normal_body", "primitive_color_body", "primitive_bface_body",
  "primitive_vertex_ref", "nurbs_surface_order_body",
  "nurbs_surface_uknots_body", "nurbs_surface_vknots_body",
  "nurbs_surface_trim_body", "nurbs_surface_trim_loop_body",
  "nurbs_curve_order_body", "nurbs_curve_knots_body", "table", "@20",
  "bundle", "@21", "table_body", "sanim", "@22", "sanim_body", "xfmanim",
  "@23", "xfmanim_body", "xfm_s_anim", "@24", "xfm_s_anim_body",
  "anim_preload", "@25", "anim_preload_body", "integer_list", "real_list",
  "texture_name", "material_name", "vertex_pool_name", "group_name",
  "required_name", "optional_name", "required_string", "optional_string",
  "string", "repeated_string", "repeated_string_body", "real",
  "real_or_string", "integer", "empty", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     123,   125
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    92,    93,    93,    93,    93,    94,    94,    95,    95,
      95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
      95,    95,    95,    95,    95,    95,    96,    97,    99,    98,
     100,   100,   100,   102,   101,   103,   103,   104,   104,   106,
     105,   107,   107,   109,   108,   110,   108,   111,   111,   111,
     111,   112,   111,   111,   111,   111,   111,   113,   113,   113,
     113,   113,   113,   113,   113,   114,   114,   114,   115,   115,
     115,   117,   116,   119,   118,   121,   120,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   123,   124,   124,
     126,   125,   128,   127,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   141,
     142,   143,   143,   144,   145,   145,   146,   147,   147,   149,
     148,   151,   150,   153,   152,   155,   154,   157,   156,   159,
     158,   161,   160,   162,   162,   162,   163,   164,   163,   163,
     163,   163,   163,   163,   163,   163,   163,   165,   165,   165,
     165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
     165,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   167,   168,   169,   170,   170,   170,   171,   171,
     171,   172,   173,   174,   175,   176,   177,   177,   178,   178,
     179,   180,   182,   181,   184,   183,   185,   185,   185,   185,
     185,   185,   187,   186,   188,   188,   188,   190,   189,   191,
     191,   191,   193,   192,   194,   194,   194,   196,   195,   197,
     197,   198,   198,   199,   199,   200,   201,   202,   203,   204,
     204,   205,   206,   206,   207,   207,   208,   208,   208,   209,
     209,   210,   210,   211,   211,   212,   212,   212,   213,   213,
     214
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     2,     1,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     5,     0,     7,
       1,     6,     2,     0,     6,     1,     6,     5,     6,     0,
       6,     1,     2,     0,     5,     0,     6,     1,     2,     3,
       4,     0,     7,     5,     5,     8,     8,     2,     3,     7,
       7,     7,     8,     7,     8,     3,     8,     8,     4,     9,
       9,     0,     6,     0,     6,     0,     6,     1,     6,     5,
       7,     7,     5,     5,     5,     5,     5,     5,     5,     6,
       5,     2,     2,     2,     2,     5,     2,     1,     1,     2,
       0,     5,     0,     5,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     5,     6,     4,
       4,     4,     4,     7,     5,     6,     4,     4,     1,     9,
       4,     1,    16,     9,     1,     6,     4,    11,    12,     0,
       6,     0,     6,     0,     6,     0,     6,     0,     6,     0,
       6,     0,     6,     1,     5,     5,     1,     0,     7,     5,
       5,     5,     2,     5,     5,     5,     6,     1,     5,     5,
       5,     2,     5,     5,     5,     5,     5,     5,     2,     5,
       6,     1,     5,     5,     5,     2,     5,     5,     5,     5,
       5,     6,     1,     1,     1,     3,     8,     8,     4,     9,
       9,     1,     8,     2,     1,     1,     1,     5,     1,     2,
       1,     1,     0,     6,     0,     6,     1,     2,     2,     2,
       2,     2,     0,     6,     1,     6,     5,     0,     6,     1,
       6,     5,     0,     6,     1,     6,     2,     0,     6,     1,
       6,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
       0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   270,   270,   270,   270,     0,     2,     6,     3,    77,
       4,    30,     5,   156,     1,   256,   257,   258,   270,   270,
       0,   270,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   270,   270,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,     0,     0,     0,   270,     0,
       0,   102,     0,     0,     0,   270,     0,     0,   270,     0,
     100,     0,    96,    91,    92,    93,    94,   270,    32,     0,
       0,     0,     0,     0,   270,     0,     0,     0,   162,   237,
     251,   255,   254,     0,   270,     0,    71,    73,    75,   147,
       0,   250,   249,   151,   149,   145,   139,   212,     0,   141,
     143,    39,   270,     0,     0,     0,     0,     0,     0,     0,
     270,   270,     0,     0,     0,     0,     0,     0,   270,     0,
       0,   268,   269,     0,   270,     0,     0,     0,   270,   270,
     270,     0,   270,     0,   253,   252,   270,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,   270,     0,     0,
       0,     0,     0,   263,   264,     0,     0,     0,     0,     0,
       0,   270,     0,     0,     0,   248,     0,     0,     0,     0,
     270,     0,   270,   270,   241,     0,     0,   201,   157,     0,
     194,   246,     0,     0,     0,     0,     0,     0,   193,     0,
     192,   245,     0,   270,   261,     0,   260,   259,    26,     0,
     270,   270,   270,   270,   270,   270,   270,   270,   270,   270,
      28,   270,   270,   270,   270,    79,     0,   270,    97,    85,
      84,    83,    82,     0,   104,    88,    87,    95,   265,   266,
     267,     0,    86,     0,   136,     0,    90,     0,     0,   242,
     134,     0,   165,   270,   161,     0,   163,     0,     0,   164,
       0,     0,   160,   159,     0,     0,   239,    27,   262,    37,
       0,     0,     0,     0,     0,    35,     0,   181,     0,   167,
       0,     0,     0,   216,   270,     0,     0,     0,    41,     0,
       0,     0,    98,     0,     0,     0,     0,     0,     0,     0,
       0,   103,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    78,     0,    89,   101,     0,   270,
      31,     0,   153,     0,     0,   195,     0,     0,     0,   166,
     270,   270,   238,    72,    74,    76,   148,   270,    34,     0,
       0,     0,     0,     0,     0,   270,     0,     0,   152,   185,
       0,     0,     0,     0,     0,   270,     0,     0,     0,     0,
       0,   150,   178,   171,   146,   140,   270,   270,   270,   270,
     213,   217,   218,   219,   220,   221,     0,   142,   144,    43,
      40,    42,    38,    80,    81,    99,   270,   270,     0,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   158,
       0,     0,     0,     0,   198,     0,   247,     0,     0,     0,
     270,   270,     0,     0,     0,     0,   270,   270,     0,   270,
       0,     0,     0,     0,   270,   270,   270,   270,   270,   214,
     222,   227,   232,    29,     0,    45,     0,     0,   128,     0,
       0,   131,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   211,   243,     0,     0,     0,   210,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   206,     0,   204,     0,   205,     0,     0,
       0,     0,     0,     0,   127,     0,   130,     0,   119,     0,
     120,   121,   122,   126,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   202,     0,     0,   188,
     190,   244,   184,   186,   189,   187,     0,   183,   182,   174,
     170,   172,   175,   203,   173,     0,   169,   168,     0,   179,
     176,   177,   270,   270,   270,   270,     0,    47,     0,     0,
       0,     0,   124,     0,   117,     0,     0,     0,   133,   135,
     154,   155,     0,     0,     0,     0,   240,    36,   191,   180,
     270,     0,     0,   224,     0,   229,     0,   234,     0,     0,
       0,   270,    44,    48,     0,     0,     0,     0,   125,   118,
       0,     0,   197,   196,     0,     0,     0,   208,   215,   270,
       0,   223,   270,     0,   228,   270,   233,   236,     0,     0,
       0,     0,     0,    49,    46,     0,     0,   123,     0,     0,
     200,   199,   207,   209,     0,   270,     0,   270,     0,     0,
       0,     0,     0,     0,     0,    51,    50,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    53,
       0,     0,    54,     0,     0,     0,     0,   137,     0,     0,
     226,     0,   231,     0,     0,     0,     0,     0,    65,     0,
       0,     0,     0,     0,     0,     0,   138,   225,   230,   235,
       0,     0,     0,     0,     0,     0,    68,     0,     0,     0,
      52,    57,   129,     0,    56,    55,     0,     0,     0,     0,
       0,     0,     0,     0,    58,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    67,    66,     0,     0,     0,     0,
       0,     0,     0,    70,    69,    60,    63,     0,    61,     0,
      59,     0,    64,    62,     0,   132
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     5,     6,    72,    37,    38,    39,   284,    10,    40,
     214,   274,    41,    42,   160,   287,   381,   434,   493,   546,
     654,   672,   631,   633,    43,   147,    44,   148,    45,   149,
       8,   227,   291,    73,   127,    74,   118,   233,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   436,
     313,   439,    75,   248,    76,   179,    46,   155,    47,   158,
      48,   159,    49,   154,    50,   150,    51,   153,    52,   152,
     321,    12,   253,   278,   276,   199,   197,   189,   192,   194,
     186,    88,   476,   484,   486,   482,   596,   467,   462,    53,
     156,   372,   488,   282,   373,   489,   572,   374,   490,   574,
     375,   491,   576,    54,   141,   265,   183,   463,   200,   190,
     405,   174,   191,    89,   143,    90,   101,   205,   206,   521,
     241,   187,   102
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -423
static const yytype_int16 yypact[] =
{
     270,  -423,  -423,  -423,  -423,    11,   759,  -423,  1275,  -423,
     167,  -423,   272,  -423,  -423,  -423,  -423,  -423,   274,   274,
     -76,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,    -2,   -60,   -54,   274,    14,
      35,  -423,    40,    45,    81,   274,    92,    95,   274,   101,
    -423,   137,  -423,  -423,  -423,  -423,  -423,   274,  -423,   158,
     232,   161,   168,   169,   274,   171,   178,   184,  -423,  -423,
    -423,  -423,  -423,   191,   274,   196,  -423,  -423,  -423,  -423,
     197,  -423,  -423,  -423,  -423,  -423,  -423,  -423,   201,  -423,
    -423,  -423,   274,   274,   240,   209,   303,   365,   210,   232,
     274,   274,   212,   232,   119,   220,   232,   222,  -423,   225,
     232,  -423,  -423,   226,   274,   240,   240,   229,   274,   274,
    -423,   234,   274,    55,  -423,  -423,   274,   235,   237,   242,
     245,  -423,   246,   249,   252,   262,   275,   274,   284,   285,
     290,   298,    62,  -423,  -423,   240,   274,    64,   124,   163,
     166,  -423,   181,   198,   239,  -423,   380,   273,   318,   319,
     274,   320,  -423,   232,  -423,   380,   321,  -423,  -423,   323,
    -423,  -423,    28,   240,    21,   240,   380,   325,  -423,   327,
    -423,  -423,   112,  -423,  -423,   328,   274,  -423,  -423,   329,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,   274,  -423,   240,  -423,  -423,  -423,
    -423,  -423,  -423,   295,  -423,  -423,  -423,  -423,  -423,  -423,
    -423,   333,  -423,   240,  -423,   335,  -423,   771,   182,  -423,
    -423,   336,  -423,  -423,  -423,    76,  -423,   240,    80,  -423,
     240,   338,  -423,  -423,   341,   110,  -423,  -423,  -423,  -423,
     953,  1101,  1176,   254,   156,  -423,   199,  -423,   151,  -423,
     330,   420,   125,  -423,  -423,   422,   555,    38,  -423,   342,
     343,    54,  -423,   345,   347,   349,   351,   352,   354,   356,
     357,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,   240,  -423,  -423,   358,   274,
    -423,    99,  -423,   274,   361,  -423,   274,   362,   240,  -423,
     274,   274,  -423,  -423,  -423,  -423,  -423,   274,  -423,   363,
     364,   376,   378,   382,   384,   274,   385,   388,  -423,  -423,
     392,   393,   396,   399,   401,   274,   407,   409,   411,   414,
     416,  -423,  -423,  -423,  -423,  -423,   274,   274,   274,   274,
    -423,  -423,  -423,  -423,  -423,  -423,   147,  -423,  -423,   232,
    -423,  -423,  -423,  -423,  -423,  -423,   240,   240,   240,   240,
     240,   240,   240,   240,    47,   274,   424,   429,   430,  -423,
     240,   240,   240,   240,  -423,   379,  -423,   431,   432,   232,
    -423,   274,   240,   232,   240,   433,   274,   274,   232,   274,
     240,   232,   240,   434,   274,   274,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,   435,  -423,   419,   240,  -423,   421,
     240,  -423,     4,   436,   437,   438,    51,   240,   440,   451,
     441,   380,   240,   240,   240,   240,   240,   240,   442,   380,
     380,   443,   444,   240,  -423,   445,    43,   446,  -423,    56,
     380,   448,   449,   450,   452,    52,   453,   232,    65,   380,
     455,   456,    74,  -423,   457,   240,   458,   240,   465,   466,
     467,   468,   240,   471,  -423,   240,  -423,   240,  -423,   240,
    -423,  -423,  -423,  -423,    57,    61,   240,   472,   473,   474,
      67,    84,   240,   240,   240,   240,  -423,   475,   478,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,   479,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,   482,  -423,  -423,   484,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,   250,   240,   240,   240,
     240,   240,  -423,   485,  -423,   486,   240,   240,  -423,  -423,
    -423,  -423,   487,   488,   240,   240,  -423,  -423,  -423,  -423,
    -423,   213,   120,  -423,   142,  -423,   164,  -423,    86,   490,
     491,   274,  -423,   240,   331,   240,   240,   492,  -423,  -423,
     240,   240,  -423,  -423,   493,   494,    78,  -423,  -423,   274,
     497,  -423,   274,   500,  -423,   274,  -423,  -423,   274,   502,
     240,   240,   505,   240,  -423,   240,   240,  -423,   507,   240,
    -423,  -423,  -423,  -423,   511,  -423,   513,  -423,   514,   240,
     240,    82,   240,    87,   240,  -423,  -423,   240,   240,   516,
     517,   380,    63,   380,    66,   380,   240,   240,    89,  -423,
     240,    93,  -423,   240,   240,   240,   240,  -423,   518,   519,
    -423,   520,  -423,   524,   240,   240,   274,   515,  -423,   274,
     527,   240,    98,   240,   240,   240,  -423,  -423,  -423,  -423,
     529,   530,   240,   240,   240,   240,  -423,   534,    96,   535,
    -423,   240,  -423,   240,  -423,  -423,   240,   240,   240,   240,
     240,   274,   536,   240,  -423,   240,   240,   240,   240,   240,
     240,   240,   240,   240,   240,   537,   538,   240,   240,   240,
     240,   240,   240,   240,  -423,  -423,   539,   540,   543,    70,
      72,   545,   240,  -423,  -423,  -423,  -423,   548,  -423,   552,
    -423,   240,  -423,  -423,   240,  -423
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -423,  -423,  -423,   426,  -423,  -423,  -423,  -423,   258,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,   100,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,
     189,  -423,  -423,    -9,  -423,  -423,  -423,   462,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -275,  -423,
    -423,   263,  -423,  -423,  -423,  -314,  -293,  -224,  -240,  -200,
    -285,  -150,  -423,  -423,  -423,  -423,  -423,  -423,  -423,  -278,
    -423,  -423,  -423,   105,    75,  -423,  -423,  -423,  -423,  -423,
    -423,  -423,  -423,  -423,  -423,  -423,   512,  -422,  -423,  -423,
     259,  -423,   461,    10,   -75,  -423,    -6,   481,  -423,     3,
    -176,   -70,   727
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const yytype_uint16 yytable[] =
{
      55,    78,    55,   362,   371,   485,   487,   163,   164,   251,
     133,    14,    91,    91,    94,    91,    91,    91,    91,    91,
     261,    91,    91,    91,    91,    91,   112,    91,    91,    93,
     113,    95,    96,    97,    98,    99,   114,   103,   104,   105,
     106,   107,   258,   109,   110,   173,   168,   170,   255,   172,
     163,   164,    91,   177,   163,   164,   181,    15,    16,    17,
     163,   164,    91,   255,   163,   164,   163,   164,   115,   163,
     164,   209,   255,   163,   164,   163,   164,   258,   125,    15,
      16,    17,   220,    15,    16,    17,   258,   255,   144,    15,
      16,    17,    15,    16,    17,   498,    15,    16,    17,    15,
      16,    17,   648,   472,   116,   258,    91,   162,   651,   687,
     538,   481,   259,   249,   144,   131,   132,   165,   379,   256,
     688,    27,   161,   471,   461,   117,   349,   448,   363,   380,
     119,   480,   249,   473,   523,   120,   204,   366,   193,   195,
     144,   397,   503,   531,   178,   384,   208,   525,   552,   289,
     398,   144,   554,   225,   660,   229,   534,   662,   560,   350,
     228,   736,   264,   738,   689,   539,   323,   331,   226,   622,
     326,   121,   466,   649,   204,   561,   608,   599,   652,   666,
     475,   367,   123,   669,   600,   124,   701,   465,    31,   690,
     399,   126,   351,   352,    27,   474,   257,   353,   260,   602,
     268,   332,   354,   642,    77,   644,   603,   339,   355,   368,
     369,   601,   510,   337,   469,   230,   370,    70,   144,   356,
     367,   605,   478,   357,    77,   366,   358,   128,   359,   290,
     360,   340,   318,   604,    87,   131,   132,    70,   433,   319,
     341,   342,   361,   163,   164,   343,   315,   338,   130,   324,
     344,   134,   327,   511,   231,   606,   345,   232,   135,   136,
     325,   138,    79,   328,    55,    55,    55,   346,   139,   367,
      80,   347,   235,   578,   140,   509,    31,    15,    16,    17,
      79,   142,    87,   517,   518,   385,   146,   151,    80,   236,
     348,   157,   579,   371,   526,    81,    82,   368,   369,   166,
     171,   580,   176,   535,   598,    83,   131,   132,   167,   435,
     180,    84,   182,    81,    82,   185,   188,   400,   394,   196,
     402,   623,    85,    83,   203,   210,    86,   211,   581,    84,
     237,   404,   212,   293,   294,   213,   215,    87,    79,   216,
      85,   582,   217,   468,    86,   336,    80,   295,   296,   297,
     298,   477,   218,   299,   578,    87,     1,     2,     3,     4,
      91,    91,    91,    91,   242,   219,   300,    78,   131,   132,
     169,    81,    82,   579,   221,   222,   429,   430,   431,   432,
     223,    83,   580,   238,   239,   240,   301,    84,   224,   437,
     440,   442,   443,   444,   445,   446,   447,   449,    85,   270,
     271,   272,    86,   454,   455,   456,   457,   533,   243,   581,
     244,   246,   252,    87,   254,   193,   262,   195,   263,   267,
     269,   364,   614,   193,   314,   195,   316,   320,    79,   329,
      79,   330,    36,   382,   383,   386,    80,   387,    80,   388,
     495,   389,   390,   497,   391,   499,   392,   393,   395,   504,
     505,   401,   403,   409,   410,   193,   195,   512,   513,   514,
     515,    81,    82,    81,    82,   659,   411,   661,   412,   663,
     458,    83,   413,    83,   414,   416,   273,    84,   417,    84,
     280,   281,   418,   419,   285,   286,   420,   100,    85,   421,
      85,   422,    86,   108,    86,   547,   111,   424,   549,   425,
     550,   426,   551,    87,   427,    87,   428,   553,   555,   556,
     494,   365,   496,   377,   451,   562,   563,   564,   565,   452,
     453,   459,   460,   470,   479,   492,   122,   500,   501,   502,
     506,   507,   508,   516,   519,   520,   522,   524,   129,   527,
     528,   529,   376,   530,   532,   137,   536,   537,   540,   541,
     583,   547,   585,   586,   587,   542,   543,   544,   545,   590,
     591,   548,   557,    79,   558,   559,   566,   594,   595,   567,
     568,    80,   609,   569,   570,    91,   588,   589,   592,   593,
     610,   611,   175,   617,   620,   621,   613,   625,   615,   616,
     627,   612,   630,   618,   619,   635,    81,    82,   639,   198,
     201,   641,   629,   643,   645,   683,    83,   657,   658,   676,
     677,   678,    84,   632,   634,   679,   636,   685,   637,   638,
     694,   695,   640,    85,   700,   703,   712,    86,   724,   725,
     733,   734,   646,   647,   735,   650,   740,   653,    87,   742,
     655,   656,   667,   743,   247,   670,   378,   571,   584,   664,
     665,   607,   202,   668,   450,     0,   671,   673,   674,   675,
     682,   245,     0,   684,     0,     0,     0,   680,   681,     0,
       0,     0,     0,     0,   686,     0,   691,   692,   693,     0,
       0,     0,   702,     0,     0,   696,   697,   698,   699,     0,
       0,     0,     0,     0,   704,   711,   705,     0,     0,   706,
     707,   708,   709,   710,     0,     0,   713,     0,   714,   715,
     716,   717,   718,   719,   720,   721,   722,   723,     0,     0,
     726,   727,   728,   729,   730,   731,   732,     0,     7,     9,
      11,    13,   737,   739,     0,   741,     0,     0,     0,     0,
       0,     0,     0,     0,   744,    92,    92,   745,    92,    92,
      92,    92,    92,     0,    92,    92,    92,    92,    92,     0,
      92,    92,    15,    16,    17,    18,     0,     0,     0,     0,
       0,     0,     0,     0,    19,     0,    20,     0,     0,     0,
     396,     0,     0,     0,     0,    92,     0,    21,    22,     0,
      23,   406,   407,    24,    25,    92,    26,     0,   408,     0,
       0,     0,    27,    28,     0,     0,   415,    29,    30,   293,
     294,     0,     0,     0,     0,     0,   423,     0,     0,     0,
       0,   145,    31,   295,   296,   297,   298,    32,     0,   299,
       0,     0,    33,    34,     0,     0,     0,     0,     0,    92,
       0,    35,   300,     0,     0,     0,     0,   145,     0,     0,
       0,     0,     0,     0,     0,   184,   406,     0,     0,     0,
       0,     0,   317,     0,     0,     0,     0,   184,     0,   207,
       0,     0,     0,   145,     0,     0,     0,   198,   201,     0,
       0,     0,     0,     0,   145,   198,   201,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   234,     0,
       0,     0,     0,     0,     0,     0,     0,   207,     0,   234,
     250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     266,     0,     0,     0,     0,     0,     0,     9,     9,     9,
      13,   275,   277,   279,    13,    13,   283,     0,    13,    13,
     288,   145,     0,     0,   292,     0,    15,    16,    17,    18,
       0,     0,    56,    57,     0,     0,     0,    58,    19,     0,
      20,     0,    59,     0,     0,     0,     0,    60,     0,     0,
     322,    21,    22,    61,    23,     0,     0,    24,    25,     0,
      26,     0,     0,    62,     0,     0,    27,    28,    63,     0,
       0,    29,    30,    64,     0,     0,     0,     0,     0,     0,
      65,    11,     0,     0,    66,    67,    31,     0,    68,     0,
      69,    32,     0,    70,     0,     0,    33,    34,     0,     0,
       0,     0,     0,     0,     0,    35,    71,     0,     0,     0,
       0,     0,     0,     0,   333,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     624,     0,     0,   626,     0,     0,   628,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    92,    92,    92,    92,     0,     0,     0,
       0,     0,     0,     0,    15,    16,    17,    18,     0,     0,
      56,    57,     0,   438,   441,    58,    19,     0,    20,     0,
      59,     0,     0,     0,     0,    60,     0,     0,     0,    21,
      22,    61,    23,     0,     0,    24,    25,   464,    26,     0,
       0,    62,     0,     0,    27,    28,    63,     0,     0,    29,
      30,    64,     0,   483,   464,   464,     0,     0,    65,     0,
       0,     0,    66,    67,    31,     0,    68,     0,    69,    32,
       0,    70,     0,     0,    33,    34,     0,     0,     0,    15,
      16,    17,    18,    35,    71,    56,    57,     0,     0,     0,
      58,    19,   334,    20,     0,    59,     0,     0,     0,     0,
      60,     0,     0,     0,    21,    22,    61,    23,     0,     0,
      24,    25,     0,    26,     0,     0,    62,     0,     0,    27,
      28,    63,     0,     0,    29,    30,    64,     0,     0,     0,
       0,     0,     0,    65,     0,     0,     0,    66,    67,    31,
       0,    68,     0,    69,    32,     0,    70,     0,     0,    33,
      34,     0,     0,     0,     0,     0,     0,     0,    35,    71,
       0,     0,     0,     0,     0,     0,     0,   335,     0,   283,
     573,   575,   577,     0,     0,     0,     0,     0,    15,    16,
      17,    18,     0,     0,    56,    57,     0,     0,     0,    58,
      19,     0,    20,     0,    59,     0,     0,   597,     0,    60,
       0,     0,     0,    21,    22,    61,    23,     0,    92,    24,
      25,     0,    26,     0,     0,    62,     0,     0,    27,    28,
      63,     0,     0,    29,    30,    64,     0,     0,     0,     0,
       0,     0,    65,     0,     0,     0,    66,    67,    31,     0,
      68,     0,    69,    32,     0,    70,     0,     0,    33,    34,
       0,     0,   464,     0,   464,     0,     0,    35,    71
};

static const yytype_int16 yycheck[] =
{
       6,    10,     8,   278,   282,   427,   428,     3,     4,   185,
      80,     0,    18,    19,    90,    21,    22,    23,    24,    25,
     196,    27,    28,    29,    30,    31,    28,    33,    34,    19,
      90,    21,    22,    23,    24,    25,    90,    27,    28,    29,
      30,    31,    21,    33,    34,   120,   116,   117,    20,   119,
       3,     4,    58,   123,     3,     4,   126,     3,     4,     5,
       3,     4,    68,    20,     3,     4,     3,     4,    58,     3,
       4,   146,    20,     3,     4,     3,     4,    21,    68,     3,
       4,     5,   157,     3,     4,     5,    21,    20,    94,     3,
       4,     5,     3,     4,     5,    91,     3,     4,     5,     3,
       4,     5,    20,   417,    90,    21,   112,   113,    21,    11,
      36,   425,    91,   183,   120,     3,     4,   114,    80,    91,
      22,    43,   112,   416,   409,    90,   276,    80,   278,    91,
      90,   424,   202,   418,    91,    90,   142,    12,   135,   136,
     146,    42,    91,    91,    25,    91,    91,    91,    91,   224,
      51,   157,    91,    91,    91,    91,    91,    91,    91,     8,
     166,    91,    50,    91,    66,    91,    90,    57,   165,    91,
      90,    90,   412,    91,   180,    91,    90,    57,    91,    90,
     420,    56,    90,    90,    64,    90,    90,   411,    63,    91,
      91,    90,    41,    42,    43,   419,   193,    46,   195,    57,
     206,    91,    51,   625,    57,   627,    64,     8,    57,    84,
      85,    91,   452,    57,   414,    91,    91,    70,   224,    68,
      56,    57,   422,    72,    57,    12,    75,    90,    77,   226,
      79,    32,    50,    91,    83,     3,     4,    70,    91,    57,
      41,    42,    91,     3,     4,    46,   243,    91,    90,   255,
      51,    90,   258,   453,    91,    91,    57,    91,    90,    90,
     257,    90,     8,   260,   270,   271,   272,    68,    90,    56,
      16,    72,    91,    23,    90,   451,    63,     3,     4,     5,
       8,    90,    83,   459,   460,   291,    90,    90,    16,    91,
      91,    90,    42,   571,   470,    41,    42,    84,    85,    90,
      90,    51,    90,   479,    91,    51,     3,     4,     5,   379,
      90,    57,    90,    41,    42,    90,    90,   323,   315,    90,
     326,   596,    68,    51,    90,    90,    72,    90,    78,    57,
      91,   328,    90,    38,    39,    90,    90,    83,     8,    90,
      68,    91,    90,   413,    72,    91,    16,    52,    53,    54,
      55,   421,    90,    58,    23,    83,    86,    87,    88,    89,
     366,   367,   368,   369,    91,    90,    71,   376,     3,     4,
       5,    41,    42,    42,    90,    90,   366,   367,   368,   369,
      90,    51,    51,     3,     4,     5,    91,    57,    90,   386,
     387,   388,   389,   390,   391,   392,   393,   394,    68,   210,
     211,   212,    72,   400,   401,   402,   403,   477,    90,    78,
      91,    91,    91,    83,    91,   412,    91,   414,    91,    91,
      91,    91,    91,   420,    91,   422,    91,    91,     8,    91,
       8,    90,     6,    91,    91,    90,    16,    90,    16,    90,
     437,    90,    90,   440,    90,   442,    90,    90,    90,   446,
     447,    90,    90,    90,    90,   452,   453,   454,   455,   456,
     457,    41,    42,    41,    42,   641,    90,   643,    90,   645,
      91,    51,    90,    51,    90,    90,   213,    57,    90,    57,
     217,   218,    90,    90,   221,   222,    90,    26,    68,    90,
      68,    90,    72,    32,    72,   492,    35,    90,   495,    90,
     497,    90,   499,    83,    90,    83,    90,   504,   505,   506,
      91,    91,    91,    91,    90,   512,   513,   514,   515,    90,
      90,    90,    90,    90,    90,    90,    65,    91,    91,    91,
      90,    80,    91,    91,    91,    91,    91,    91,    77,    91,
      91,    91,   284,    91,    91,    84,    91,    91,    91,    91,
     547,   548,   549,   550,   551,    90,    90,    90,    90,   556,
     557,    90,    90,     8,    91,    91,    91,   564,   565,    91,
      91,    16,   578,    91,    90,   581,    91,    91,    91,    91,
      90,    90,   121,    91,    91,    91,   583,    90,   585,   586,
      90,   581,    90,   590,   591,    90,    41,    42,    91,   138,
     139,    90,   608,    90,    90,    90,    51,    91,    91,    91,
      91,    91,    57,   610,   611,    91,   613,    90,   615,   616,
      91,    91,   619,    68,    90,    90,    90,    72,    91,    91,
      91,    91,   629,   630,    91,   632,    91,   634,    83,    91,
     637,   638,   648,    91,   182,   651,    91,   542,   548,   646,
     647,   576,   140,   650,   395,    -1,   653,   654,   655,   656,
     666,   180,    -1,   669,    -1,    -1,    -1,   664,   665,    -1,
      -1,    -1,    -1,    -1,   671,    -1,   673,   674,   675,    -1,
      -1,    -1,   688,    -1,    -1,   682,   683,   684,   685,    -1,
      -1,    -1,    -1,    -1,   691,   701,   693,    -1,    -1,   696,
     697,   698,   699,   700,    -1,    -1,   703,    -1,   705,   706,
     707,   708,   709,   710,   711,   712,   713,   714,    -1,    -1,
     717,   718,   719,   720,   721,   722,   723,    -1,     1,     2,
       3,     4,   729,   730,    -1,   732,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   741,    18,    19,   744,    21,    22,
      23,    24,    25,    -1,    27,    28,    29,    30,    31,    -1,
      33,    34,     3,     4,     5,     6,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    15,    -1,    17,    -1,    -1,    -1,
     319,    -1,    -1,    -1,    -1,    58,    -1,    28,    29,    -1,
      31,   330,   331,    34,    35,    68,    37,    -1,   337,    -1,
      -1,    -1,    43,    44,    -1,    -1,   345,    48,    49,    38,
      39,    -1,    -1,    -1,    -1,    -1,   355,    -1,    -1,    -1,
      -1,    94,    63,    52,    53,    54,    55,    68,    -1,    58,
      -1,    -1,    73,    74,    -1,    -1,    -1,    -1,    -1,   112,
      -1,    82,    71,    -1,    -1,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   128,   395,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    -1,   140,    -1,   142,
      -1,    -1,    -1,   146,    -1,    -1,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   157,   424,   425,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   171,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   180,    -1,   182,
     183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     203,    -1,    -1,    -1,    -1,    -1,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,    -1,   221,   222,
     223,   224,    -1,    -1,   227,    -1,     3,     4,     5,     6,
      -1,    -1,     9,    10,    -1,    -1,    -1,    14,    15,    -1,
      17,    -1,    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,
     253,    28,    29,    30,    31,    -1,    -1,    34,    35,    -1,
      37,    -1,    -1,    40,    -1,    -1,    43,    44,    45,    -1,
      -1,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      57,   284,    -1,    -1,    61,    62,    63,    -1,    65,    -1,
      67,    68,    -1,    70,    -1,    -1,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    83,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     599,    -1,    -1,   602,    -1,    -1,   605,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   366,   367,   368,   369,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,    -1,
       9,    10,    -1,   386,   387,    14,    15,    -1,    17,    -1,
      19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    28,
      29,    30,    31,    -1,    -1,    34,    35,   410,    37,    -1,
      -1,    40,    -1,    -1,    43,    44,    45,    -1,    -1,    48,
      49,    50,    -1,   426,   427,   428,    -1,    -1,    57,    -1,
      -1,    -1,    61,    62,    63,    -1,    65,    -1,    67,    68,
      -1,    70,    -1,    -1,    73,    74,    -1,    -1,    -1,     3,
       4,     5,     6,    82,    83,     9,    10,    -1,    -1,    -1,
      14,    15,    91,    17,    -1,    19,    -1,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    28,    29,    30,    31,    -1,    -1,
      34,    35,    -1,    37,    -1,    -1,    40,    -1,    -1,    43,
      44,    45,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    61,    62,    63,
      -1,    65,    -1,    67,    68,    -1,    70,    -1,    -1,    73,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    82,    83,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,   542,
     543,   544,   545,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,    -1,    -1,     9,    10,    -1,    -1,    -1,    14,
      15,    -1,    17,    -1,    19,    -1,    -1,   570,    -1,    24,
      -1,    -1,    -1,    28,    29,    30,    31,    -1,   581,    34,
      35,    -1,    37,    -1,    -1,    40,    -1,    -1,    43,    44,
      45,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    57,    -1,    -1,    -1,    61,    62,    63,    -1,
      65,    -1,    67,    68,    -1,    70,    -1,    -1,    73,    74,
      -1,    -1,   625,    -1,   627,    -1,    -1,    82,    83
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    86,    87,    88,    89,    93,    94,   214,   122,   214,
     100,   214,   163,   214,     0,     3,     4,     5,     6,    15,
      17,    28,    29,    31,    34,    35,    37,    43,    44,    48,
      49,    63,    68,    73,    74,    82,    95,    96,    97,    98,
     101,   104,   105,   116,   118,   120,   148,   150,   152,   154,
     156,   158,   160,   181,   195,   208,     9,    10,    14,    19,
      24,    30,    40,    45,    50,    57,    61,    62,    65,    67,
      70,    83,    95,   125,   127,   144,   146,    57,   125,     8,
      16,    41,    42,    51,    57,    68,    72,    83,   173,   205,
     207,   208,   214,   205,    90,   205,   205,   205,   205,   205,
     204,   208,   214,   205,   205,   205,   205,   205,   204,   205,
     205,   204,    28,    90,    90,   205,    90,    90,   128,    90,
      90,    90,   204,    90,    90,   205,    90,   126,    90,   204,
      90,     3,     4,   213,    90,    90,    90,   204,    90,    90,
      90,   196,    90,   206,   208,   214,    90,   117,   119,   121,
     157,    90,   161,   159,   155,   149,   182,    90,   151,   153,
     106,   205,   208,     3,     4,   211,    90,     5,   213,     5,
     213,    90,   213,   206,   203,   204,    90,   213,    25,   147,
      90,   213,    90,   198,   214,    90,   172,   213,    90,   169,
     201,   204,   170,   211,   171,   211,    90,   168,   204,   167,
     200,   204,   198,    90,   208,   209,   210,   214,    91,   206,
      90,    90,    90,    90,   102,    90,    90,    90,    90,    90,
     206,    90,    90,    90,    90,    91,   211,   123,   208,    91,
      91,    91,    91,   129,   214,    91,    91,    91,     3,     4,
       5,   212,    91,    90,    91,   209,    91,   129,   145,   213,
     214,   212,    91,   164,    91,    20,    91,   211,    21,    91,
     211,   212,    91,    91,    50,   197,   214,    91,   208,    91,
     122,   122,   122,   163,   103,   214,   166,   214,   165,   214,
     163,   163,   185,   214,    99,   163,   163,   107,   214,   206,
     211,   124,   214,    38,    39,    52,    53,    54,    55,    58,
      71,    91,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   142,    91,   211,    91,    91,    50,    57,
      91,   162,   214,    90,   208,   211,    90,   208,   211,    91,
      90,    57,    91,    91,    91,    91,    91,    57,    91,     8,
      32,    41,    42,    46,    51,    57,    68,    72,    91,   173,
       8,    41,    42,    46,    51,    57,    68,    72,    75,    77,
      79,    91,   160,   173,    91,    91,    12,    56,    84,    85,
      91,   181,   183,   186,   189,   192,   100,    91,    91,    80,
      91,   108,    91,    91,    91,   208,    90,    90,    90,    90,
      90,    90,    90,    90,   211,    90,   204,    42,    51,    91,
     208,    90,   208,    90,   211,   202,   204,   204,   204,    90,
      90,    90,    90,    90,    90,   204,    90,    90,    90,    90,
      90,    90,    90,   204,    90,    90,    90,    90,    90,   205,
     205,   205,   205,    91,   109,   213,   141,   211,   214,   143,
     211,   214,   211,   211,   211,   211,   211,   211,    80,   211,
     202,    90,    90,    90,   211,   211,   211,   211,    91,    90,
      90,   172,   180,   199,   214,   169,   170,   179,   213,   171,
      90,   168,   167,   172,   169,   170,   174,   213,   171,    90,
     168,   167,   177,   214,   175,   199,   176,   199,   184,   187,
     190,   193,    90,   110,    91,   211,    91,   211,    91,   211,
      91,    91,    91,    91,   211,   211,    90,    80,    91,   212,
     170,   171,   211,   211,   211,   211,    91,   212,   212,    91,
      91,   211,    91,    91,    91,    91,   212,    91,    91,    91,
      91,    91,    91,   213,    91,   212,    91,    91,    36,    91,
      91,    91,    90,    90,    90,    90,   111,   211,    90,   211,
     211,   211,    91,   211,    91,   211,   211,    90,    91,    91,
      91,    91,   211,   211,   211,   211,    91,    91,    91,    91,
      90,   185,   188,   214,   191,   214,   194,   214,    23,    42,
      51,    78,    91,   211,   111,   211,   211,   211,    91,    91,
     211,   211,    91,    91,   211,   211,   178,   214,    91,    57,
      64,    91,    57,    64,    91,    57,    91,   186,    90,   208,
      90,    90,   205,   211,    91,   211,   211,    91,   211,   211,
      91,    91,    91,   160,   204,    90,   204,    90,   204,   208,
      90,   114,   211,   115,   211,    90,   211,   211,   211,    91,
     211,    90,   199,    90,   199,    90,   211,   211,    20,    91,
     211,    21,    91,   211,   112,   211,   211,    91,    91,   212,
      91,   212,    91,   212,   211,   211,    90,   208,   211,    90,
     208,   211,   113,   211,   211,   211,    91,    91,    91,    91,
     211,   211,   208,    90,   208,    90,   211,    11,    22,    66,
      91,   211,   211,   211,    91,    91,   211,   211,   211,   211,
      90,    90,   208,    90,   211,   211,   211,   211,   211,   211,
     211,   208,    90,   211,   211,   211,   211,   211,   211,   211,
     211,   211,   211,   211,    91,    91,   211,   211,   211,   211,
     211,   211,   211,    91,    91,    91,    91,   211,    91,   211,
      91,   211,    91,    91,   211,   211
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 7:
#line 247 "parser.yxx"
    {
  assert(!egg_stack.empty());
  DCAST(EggData, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 26:
#line 291 "parser.yxx"
    {
  string strval = (yyvsp[(3) - (4)]._string);
  EggCoordinateSystem *cs = new EggCoordinateSystem;

  CoordinateSystem f = parse_coordinate_system_string(strval);
  if (f == CS_invalid) {
    eggyywarning("Unknown coordinate system " + strval);
  } else {
    cs->set_value(f);
  }
  (yyval._egg) = cs;
}
    break;

  case 27:
#line 314 "parser.yxx"
    {
  (yyval._egg) = new EggComment((yyvsp[(2) - (5)]._string), (yyvsp[(4) - (5)]._string));
}
    break;

  case 28:
#line 328 "parser.yxx"
    {
  string tref_name = (yyvsp[(2) - (4)]._string);
  Filename filename = (yyvsp[(4) - (4)]._string);
  EggTexture *texture = new EggTexture(tref_name, filename);

  if (textures.find(tref_name) != textures.end()) {
    eggyywarning("Duplicate texture name " + tref_name);
  }
  textures[tref_name] = texture;

  egg_stack.push_back(texture);
}
    break;

  case 29:
#line 341 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 31:
#line 357 "parser.yxx"
    {
  EggTexture *texture = DCAST(EggTexture, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  string strval = (yyvsp[(5) - (6)]._string);

  if (cmp_nocase_uh(name, "type") == 0) {
    EggTexture::TextureType tt = EggTexture::string_texture_type(strval);
    if (tt == EggTexture::TT_unspecified) {
      eggyywarning("Unknown texture texture_type " + strval);
    } else {
      texture->set_texture_type(tt);
    }

  } else if (cmp_nocase_uh(name, "format") == 0) {
    EggTexture::Format f = EggTexture::string_format(strval);
    if (f == EggTexture::F_unspecified) {
      eggyywarning("Unknown texture format " + strval);
    } else {
      texture->set_format(f);
    }

  } else if (cmp_nocase_uh(name, "compression") == 0) {
    EggTexture::CompressionMode w = EggTexture::string_compression_mode(strval);
    if (w == EggTexture::CM_default) {
      eggyywarning("Unknown texture compression mode " + strval);
    } else {
      texture->set_compression_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrap") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_mode(w);
    }

  } else if (cmp_nocase_uh(name, "wrapu") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_u(w);
    }

  } else if (cmp_nocase_uh(name, "wrapv") == 0) {
    EggTexture::WrapMode w = EggTexture::string_wrap_mode(strval);
    if (w == EggTexture::WM_unspecified) {
      eggyywarning("Unknown texture wrap mode " + strval);
    } else {
      texture->set_wrap_v(w);
    }

  } else if (cmp_nocase_uh(name, "minfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_minfilter(f);
    }

  } else if (cmp_nocase_uh(name, "magfilter") == 0) {
    EggTexture::FilterType f = EggTexture::string_filter_type(strval);
    if (f == EggTexture::FT_unspecified) {
      eggyywarning("Unknown texture filter type " + strval);
    } else {
      texture->set_magfilter(f);
    }

  } else if (cmp_nocase_uh(name, "anisotropic_degree") == 0) {
    texture->set_anisotropic_degree((int)value);

  } else if (cmp_nocase_uh(name, "envtype") == 0) {
    EggTexture::EnvType e = EggTexture::string_env_type(strval);
    if (e == EggTexture::ET_unspecified) {
      eggyywarning("Unknown texture env type " + strval);
    } else {
      texture->set_env_type(e);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_rgb, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_rgb, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-rgb-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_rgb, 2, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha") == 0) {
    EggTexture::CombineMode cm = EggTexture::string_combine_mode(strval);
    if (cm == EggTexture::CM_unspecified) {
      eggyywarning("Unknown combine mode " + strval);
    } else {
      texture->set_combine_mode(EggTexture::CC_alpha, cm);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source0") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 0, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand0") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 0, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source1") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 1, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand1") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 1, co);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-source2") == 0) {
    EggTexture::CombineSource cs = EggTexture::string_combine_source(strval);
    if (cs == EggTexture::CS_unspecified) {
      eggyywarning("Unknown combine source " + strval);
    } else {
      texture->set_combine_source(EggTexture::CC_alpha, 2, cs);
    }

  } else if (cmp_nocase_uh(name, "combine-alpha-operand2") == 0) {
    EggTexture::CombineOperand co = EggTexture::string_combine_operand(strval);
    if (co == EggTexture::CO_unspecified) {
      eggyywarning("Unknown combine operand " + strval);
    } else {
      texture->set_combine_operand(EggTexture::CC_alpha, 2, co);
    }

  } else if (cmp_nocase_uh(name, "saved_result") == 0) {
    texture->set_saved_result(((int)value) != 0);

  } else if (cmp_nocase_uh(name, "tex_gen") == 0) {
    EggTexture::TexGen tex_gen = EggTexture::string_tex_gen(strval);
    if (tex_gen == EggTexture::TG_unspecified) {
      eggyywarning("Unknown tex-gen " + strval);
    } else {
      texture->set_tex_gen(tex_gen);
    }

  } else if (cmp_nocase_uh(name, "quality_level") == 0) {
    EggTexture::QualityLevel quality_level = EggTexture::string_quality_level(strval);
    if (quality_level == EggTexture::QL_unspecified) {
      eggyywarning("Unknown quality-level " + strval);
    } else {
      texture->set_quality_level(quality_level);
    }

  } else if (cmp_nocase_uh(name, "stage_name") == 0) {
    texture->set_stage_name(strval);

  } else if (cmp_nocase_uh(name, "priority") == 0) {
    texture->set_priority((int)value);

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = texture->get_color();
    color[0] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = texture->get_color();
    color[1] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = texture->get_color();
    color[2] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = texture->get_color();
    color[3] = value;
    texture->set_color(color);

  } else if (cmp_nocase_uh(name, "borderr") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[0] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "borderg") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[1] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "borderb") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[2] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "bordera") == 0) {
    Colorf border_color = texture->get_border_color();
    border_color[3] = value;
    texture->set_border_color(border_color);

  } else if (cmp_nocase_uh(name, "uv_name") == 0) {
    texture->set_uv_name(strval);

  } else if (cmp_nocase_uh(name, "rgb_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid rgb-scale value " + strval);
    } else {
      texture->set_rgb_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha_scale") == 0) {
    int int_value = (int)value;
    if (int_value != 1 && int_value != 2 && int_value != 4) {
      eggyyerror("Invalid alpha-scale value " + strval);
    } else {
      texture->set_alpha_scale(int_value);
    }

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      texture->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      texture->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      texture->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      texture->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    texture->set_draw_order((int)value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    texture->set_bin(strval);

  } else if (cmp_nocase_uh(name, "alpha_file") == 0) {
    texture->set_alpha_filename(strval);

  } else if (cmp_nocase_uh(name, "alpha_file_channel") == 0) {
    texture->set_alpha_file_channel((int)value);

  } else if (cmp_nocase_uh(name, "read_mipmaps") == 0) {
    texture->set_read_mipmaps(((int)value) != 0);

  } else {
    eggyywarning("Unsupported texture scalar: " + name);
  }
}
    break;

  case 33:
#line 700 "parser.yxx"
    {
  string mref_name = (yyvsp[(2) - (3)]._string);
  EggMaterial *material = new EggMaterial(mref_name);

  if (materials.find(mref_name) != materials.end()) {
    eggyywarning("Duplicate material name " + mref_name);
  }
  materials[mref_name] = material;

  egg_stack.push_back(material);
}
    break;

  case 34:
#line 712 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 36:
#line 728 "parser.yxx"
    {
  EggMaterial *material = DCAST(EggMaterial, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);

  if (cmp_nocase_uh(name, "diffr") == 0) {
    Colorf diff = material->get_diff();
    diff[0] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffg") == 0) {
    Colorf diff = material->get_diff();
    diff[1] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffb") == 0) {
    Colorf diff = material->get_diff();
    diff[2] = value;
    material->set_diff(diff);
  } else if (cmp_nocase_uh(name, "diffa") == 0) {
    Colorf diff = material->get_diff();
    diff[3] = value;
    material->set_diff(diff);

  } else if (cmp_nocase_uh(name, "ambr") == 0) {
    Colorf amb = material->get_amb();
    amb[0] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambg") == 0) {
    Colorf amb = material->get_amb();
    amb[1] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "ambb") == 0) {
    Colorf amb = material->get_amb();
    amb[2] = value;
    material->set_amb(amb);
  } else if (cmp_nocase_uh(name, "amba") == 0) {
    Colorf amb = material->get_amb();
    amb[3] = value;
    material->set_amb(amb);

  } else if (cmp_nocase_uh(name, "emitr") == 0) {
    Colorf emit = material->get_emit();
    emit[0] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitg") == 0) {
    Colorf emit = material->get_emit();
    emit[1] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emitb") == 0) {
    Colorf emit = material->get_emit();
    emit[2] = value;
    material->set_emit(emit);
  } else if (cmp_nocase_uh(name, "emita") == 0) {
    Colorf emit = material->get_emit();
    emit[3] = value;
    material->set_emit(emit);

  } else if (cmp_nocase_uh(name, "specr") == 0) {
    Colorf spec = material->get_spec();
    spec[0] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specg") == 0) {
    Colorf spec = material->get_spec();
    spec[1] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "specb") == 0) {
    Colorf spec = material->get_spec();
    spec[2] = value;
    material->set_spec(spec);
  } else if (cmp_nocase_uh(name, "speca") == 0) {
    Colorf spec = material->get_spec();
    spec[3] = value;
    material->set_spec(spec);

  } else if (cmp_nocase_uh(name, "shininess") == 0) {
    material->set_shininess(value);

  } else if (cmp_nocase_uh(name, "local") == 0) {
    material->set_local(value != 0.0);

  } else {
    eggyywarning("Unsupported material scalar: " + name);
  }
}
    break;

  case 37:
#line 823 "parser.yxx"
    {
  string node_name = (yyvsp[(2) - (5)]._string);
  Filename filename = (yyvsp[(4) - (5)]._string);
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  (yyval._egg) = ref;
}
    break;

  case 38:
#line 830 "parser.yxx"
    {
  if (cmp_nocase_uh((yyvsp[(1) - (6)]._string), "group") != 0) {
    eggyyerror("keyword 'group' expected");
  }
  string node_name = (yyvsp[(3) - (6)]._string);
  Filename filename = (yyvsp[(5) - (6)]._string);
  EggExternalReference *ref = new EggExternalReference(node_name, filename);
  (yyval._egg) = ref;
}
    break;

  case 39:
#line 850 "parser.yxx"
    {
  string name = (yyvsp[(2) - (2)]._string);
  EggVertexPool *pool = NULL;

  VertexPools::const_iterator vpi = vertex_pools.find(name);
  if (vpi != vertex_pools.end()) {
    pool = (*vpi).second;
    if (pool->has_defined_vertices()) {
      eggyywarning("Duplicate vertex pool name " + name);
      pool = new EggVertexPool(name);
      // The egg syntax starts counting at 1 by convention.
      pool->set_highest_index(0);
      vertex_pools[name] = pool;
    }
  } else {
    pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
  }

  egg_stack.push_back(pool);
}
    break;

  case 40:
#line 874 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 43:
#line 902 "parser.yxx"
    {
  egg_stack.push_back(new EggVertex);
}
    break;

  case 44:
#line 906 "parser.yxx"
    {
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  DCAST(EggVertexPool, egg_stack.back())->add_vertex(vtx);
}
    break;

  case 45:
#line 913 "parser.yxx"
    {
  vertex_index = (int)(yyvsp[(2) - (2)]._number);
  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());

  if (vertex_index < 0) {
    ostringstream errmsg;
    errmsg << "Ignoring invalid vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;

  } else if (pool->has_vertex(vertex_index)) {
    ostringstream errmsg;
    errmsg << "Ignoring duplicate vertex index " << vertex_index
           << " in vertex pool " << pool->get_name() << ends;
    eggyywarning(errmsg);
    vertex_index = -1;
  }

  // Even if we didn't like the vertex index number, we still need to
  // go ahead and parse the vertex.  We just won't save it.

  egg_stack.push_back(new EggVertex);
}
    break;

  case 46:
#line 938 "parser.yxx"
    {
  PT(EggVertex) vtx = DCAST(EggVertex, egg_stack.back());
  egg_stack.pop_back();

  EggVertexPool *pool = DCAST(EggVertexPool, egg_stack.back());
  if (vertex_index != -1) {
    pool->add_vertex(vtx, vertex_index);
  }
}
    break;

  case 47:
#line 959 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos((yyvsp[(1) - (1)]._number));
}
    break;

  case 48:
#line 963 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint2d((yyvsp[(1) - (2)]._number), (yyvsp[(2) - (2)]._number)));
}
    break;

  case 49:
#line 967 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint3d((yyvsp[(1) - (3)]._number), (yyvsp[(2) - (3)]._number), (yyvsp[(3) - (3)]._number)));
}
    break;

  case 50:
#line 971 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_pos(LPoint4d((yyvsp[(1) - (4)]._number), (yyvsp[(2) - (4)]._number), (yyvsp[(3) - (4)]._number), (yyvsp[(4) - (4)]._number)));
}
    break;

  case 51:
#line 975 "parser.yxx"
    {
  EggVertex *vertex = DCAST(EggVertex, egg_stack.back());
  EggVertexUV *uv = new EggVertexUV((yyvsp[(3) - (4)]._string), TexCoordd::zero());
  egg_stack.push_back(uv);
  if (vertex->has_uv((yyvsp[(3) - (4)]._string))) {
    eggyywarning("Ignoring repeated UV name " + (yyvsp[(3) - (4)]._string));
  } else {
    vertex->set_uv_obj(uv);
  }
}
    break;

  case 52:
#line 986 "parser.yxx"
    {
  egg_stack.pop_back();
}
    break;

  case 55:
#line 992 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex((yyvsp[(3) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (8)]._string));
  }
}
    break;

  case 56:
#line 1000 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dxyzs.
    insert(EggMorphVertex((yyvsp[(4) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (8)]._string));
  }
}
    break;

  case 57:
#line 1019 "parser.yxx"
    {
  DCAST(EggVertexUV, egg_stack.back())->set_uv(TexCoordd((yyvsp[(1) - (2)]._number), (yyvsp[(2) - (2)]._number)));
}
    break;

  case 58:
#line 1023 "parser.yxx"
    {
  DCAST(EggVertexUV, egg_stack.back())->set_uvw(LVecBase3d((yyvsp[(1) - (3)]._number), (yyvsp[(2) - (3)]._number), (yyvsp[(3) - (3)]._number)));
}
    break;

  case 59:
#line 1027 "parser.yxx"
    {
  if (DCAST(EggVertexUV, egg_stack.back())->has_tangent()) {
    eggyywarning("Ignoring repeated tangent");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_tangent(Normald((yyvsp[(4) - (7)]._number), (yyvsp[(5) - (7)]._number), (yyvsp[(6) - (7)]._number)));
  }
}
    break;

  case 60:
#line 1035 "parser.yxx"
    {
  if (DCAST(EggVertexUV, egg_stack.back())->has_binormal()) {
    eggyywarning("Ignoring repeated binormal");
  } else {
    DCAST(EggVertexUV, egg_stack.back())->set_binormal(Normald((yyvsp[(4) - (7)]._number), (yyvsp[(5) - (7)]._number), (yyvsp[(6) - (7)]._number)));
  }
}
    break;

  case 61:
#line 1043 "parser.yxx"
    {
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord((yyvsp[(3) - (7)]._string), LVector3d((yyvsp[(5) - (7)]._number), (yyvsp[(6) - (7)]._number), 0.0))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (7)]._string));
  }
}
    break;

  case 62:
#line 1051 "parser.yxx"
    {
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord((yyvsp[(3) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (8)]._string));
  }
}
    break;

  case 63:
#line 1059 "parser.yxx"
    {
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord((yyvsp[(4) - (7)]._string), LVector3d((yyvsp[(5) - (7)]._number), (yyvsp[(6) - (7)]._number), 0.0))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (7)]._string));
  }
}
    break;

  case 64:
#line 1067 "parser.yxx"
    {
  bool inserted = DCAST(EggVertexUV, egg_stack.back())->_duvs.
    insert(EggMorphTexCoord((yyvsp[(4) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (8)]._string));
  }
}
    break;

  case 65:
#line 1085 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_normal(Normald((yyvsp[(1) - (3)]._number), (yyvsp[(2) - (3)]._number), (yyvsp[(3) - (3)]._number)));
}
    break;

  case 66:
#line 1089 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal((yyvsp[(3) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (8)]._string));
  }
}
    break;

  case 67:
#line 1097 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_dnormals.
    insert(EggMorphNormal((yyvsp[(4) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (8)]._string));
  }
}
    break;

  case 68:
#line 1115 "parser.yxx"
    {
  DCAST(EggVertex, egg_stack.back())->set_color(Colorf((yyvsp[(1) - (4)]._number), (yyvsp[(2) - (4)]._number), (yyvsp[(3) - (4)]._number), (yyvsp[(4) - (4)]._number)));
}
    break;

  case 69:
#line 1119 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor((yyvsp[(3) - (9)]._string), LVector4f((yyvsp[(5) - (9)]._number), (yyvsp[(6) - (9)]._number), (yyvsp[(7) - (9)]._number), (yyvsp[(8) - (9)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (9)]._string));
  }
}
    break;

  case 70:
#line 1127 "parser.yxx"
    {
  bool inserted = DCAST(EggVertex, egg_stack.back())->_drgbas.
    insert(EggMorphColor((yyvsp[(4) - (9)]._string), LVector4f((yyvsp[(5) - (9)]._number), (yyvsp[(6) - (9)]._number), (yyvsp[(7) - (9)]._number), (yyvsp[(8) - (9)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (9)]._string));
  }
}
    break;

  case 71:
#line 1145 "parser.yxx"
    {
  EggGroup *group = new EggGroup((yyvsp[(2) - (2)]._string));
  egg_stack.push_back(group);
}
    break;

  case 72:
#line 1150 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  (yyval._egg) = group;
  egg_stack.pop_back();
  if (group->has_name()) {
    groups[group->get_name()] = group;
  }
  Thread::consider_yield();
}
    break;

  case 73:
#line 1170 "parser.yxx"
    {
  EggGroup *group = new EggGroup((yyvsp[(2) - (2)]._string));
  group->set_group_type(EggGroup::GT_joint);
  egg_stack.push_back(group);
}
    break;

  case 74:
#line 1176 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 75:
#line 1191 "parser.yxx"
    {
  EggGroup *group = new EggGroup((yyvsp[(2) - (2)]._string));
  group->set_group_type(EggGroup::GT_instance);
  egg_stack.push_back(group);
}
    break;

  case 76:
#line 1197 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  (yyval._egg) = group;
  egg_stack.pop_back();
  if (group->has_name()) {
    groups[group->get_name()] = group;
  }
}
    break;

  case 78:
#line 1217 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  unsigned long ulong_value = (yyvsp[(5) - (6)]._ulong);
  string strval = (yyvsp[(5) - (6)]._string);

  if (cmp_nocase_uh(name, "fps") == 0) {
    group->set_switch_fps(value);

  } else if (cmp_nocase_uh(name, "no_fog") == 0) {
    group->set_nofog_flag(value != 0);

  } else if (cmp_nocase_uh(name, "decal") == 0) {
    group->set_decal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "direct") == 0) {
    group->set_direct_flag(value != 0);

  } else if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      group->set_alpha_mode(a);
    }

  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      group->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      group->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      group->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    group->set_draw_order(ulong_value);

  } else if (cmp_nocase_uh(name, "bin") == 0) {
    group->set_bin(strval);

  } else if (cmp_nocase_uh(name, "collide_mask") == 0) {
    group->set_collide_mask(group->get_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "from_collide_mask") == 0) {
    group->set_from_collide_mask(group->get_from_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "into_collide_mask") == 0) {
    group->set_into_collide_mask(group->get_into_collide_mask() | ulong_value);

  } else if (cmp_nocase_uh(name, "portal") == 0) {
    group->set_portal_flag(value != 0);

  } else if (cmp_nocase_uh(name, "polylight") == 0) {
    group->set_polylight_flag(value != 0);

  } else if (cmp_nocase_uh(name, "indexed") == 0) {
    group->set_indexed_flag(value != 0);

  } else if (cmp_nocase_uh(name, "blend") == 0) {
    EggGroup::BlendMode blend_mode =
      EggGroup::string_blend_mode(strval);
    if (blend_mode == EggGroup::BM_unspecified) {
      eggyywarning("Unknown blend mode " + strval);
    } else {
      group->set_blend_mode(blend_mode);
    }

  } else if (cmp_nocase_uh(name, "blendop_a") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_a(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendop_b") == 0) {
    EggGroup::BlendOperand blend_operand =
      EggGroup::string_blend_operand(strval);
    if (blend_operand == EggGroup::BO_unspecified) {
      eggyywarning("Unknown blend operand " + strval);
    } else {
      group->set_blend_operand_b(blend_operand);
    }

  } else if (cmp_nocase_uh(name, "blendr") == 0) {
    Colorf color = group->get_blend_color();
    color[0] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendg") == 0) {
    Colorf color = group->get_blend_color();
    color[1] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blendb") == 0) {
    Colorf color = group->get_blend_color();
    color[2] = value;
    group->set_blend_color(color);

  } else if (cmp_nocase_uh(name, "blenda") == 0) {
    Colorf color = group->get_blend_color();
    color[3] = value;
    group->set_blend_color(color);

  } else {
    eggyywarning("Unknown group scalar " + name);
  }
}
    break;

  case 79:
#line 1347 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = (yyvsp[(4) - (5)]._string);

  EggGroup::BillboardType f = EggGroup::string_billboard_type(strval);
  if (f == EggGroup::BT_none) {
    eggyywarning("Unknown billboard type " + strval);
  } else {
    group->set_billboard_type(f);
  }
}
    break;

  case 80:
#line 1359 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_billboard_center(LPoint3d((yyvsp[(4) - (7)]._number), (yyvsp[(5) - (7)]._number), (yyvsp[(6) - (7)]._number)));
}
    break;

  case 81:
#line 1364 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string name = (yyvsp[(3) - (7)]._string);

  group->set_collision_name(name);
}
    break;

  case 82:
#line 1371 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)(yyvsp[(4) - (5)]._number);
  group->set_dcs_type(value!=0 ? EggGroup::DC_default : EggGroup::DC_none);
}
    break;

  case 83:
#line 1377 "parser.yxx"
    {
  // The special flavor of DCS, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = (yyvsp[(4) - (5)]._string);

  EggGroup::DCSType f = EggGroup::string_dcs_type(strval);
  if (f == EggGroup::DC_unspecified) {
    eggyywarning("Unknown DCS type " + strval);
  } else {
    group->set_dcs_type(f);
  }
}
    break;

  case 84:
#line 1390 "parser.yxx"
    {
  // The traditional flavor of DART, with { 0 } or { 1 }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)(yyvsp[(4) - (5)]._number);
  group->set_dart_type(value!=0 ? EggGroup::DT_default : EggGroup::DT_none);
}
    break;

  case 85:
#line 1397 "parser.yxx"
    {
  // The special flavor of DART, with { sync } or { nosync }.
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = (yyvsp[(4) - (5)]._string);

  EggGroup::DartType f = EggGroup::string_dart_type(strval);
  if (f == EggGroup::DT_none) {
    eggyywarning("Unknown dart type " + strval);
  } else {
    group->set_dart_type(f);
  }
}
    break;

  case 86:
#line 1410 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)(yyvsp[(4) - (5)]._number);
  group->set_switch_flag(value!=0);
}
    break;

  case 87:
#line 1416 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string type = (yyvsp[(4) - (5)]._string);
  group->add_object_type(type);
}
    break;

  case 88:
#line 1422 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)(yyvsp[(4) - (5)]._number);
  group->set_model_flag(value!=0);
}
    break;

  case 89:
#line 1428 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_tag((yyvsp[(3) - (6)]._string), (yyvsp[(5) - (6)]._string));
}
    break;

  case 90:
#line 1433 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  int value = (int)(yyvsp[(4) - (5)]._number);
  group->set_texlist_flag(value!=0);
}
    break;

  case 95:
#line 1443 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  if (group->get_group_type() != EggGroup::GT_instance) {
    eggyyerror("<Ref> valid only within <Instance>");
  } else if ((yyvsp[(4) - (5)]._egg) != (EggObject *)NULL) {
    group->add_group_ref(DCAST(EggGroup, (yyvsp[(4) - (5)]._egg)));
  }
}
    break;

  case 96:
#line 1452 "parser.yxx"
    {
  DCAST(EggGroup, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 97:
#line 1466 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = (yyvsp[(1) - (1)]._string);

  EggGroup::CollisionSolidType f = EggGroup::string_cs_type(strval);
  if (f == EggGroup::CST_none) {
    eggyywarning("Unknown collision solid type " + strval);
  } else {
    if (f == EggGroup::CST_polyset && group->get_cs_type() != EggGroup::CST_none) {
      // By convention, a CST_polyset doesn't replace any existing
      // contradictory type, so ignore it if this happens.  This
      // allows the artist to place, for instance, <ObjectType> {
      // sphere } and <ObjectType> { trigger } together.

    } else {
      group->set_cs_type(f);
    }
  }
}
    break;

  case 99:
#line 1497 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  string strval = (yyvsp[(2) - (2)]._string);

  EggGroup::CollideFlags f = EggGroup::string_collide_flags(strval);
  if (f == EggGroup::CF_none) {
    eggyywarning("Unknown collision flag " + strval);
  } else {
    group->set_collide_flags(group->get_collide_flags() | f);
  }
}
    break;

  case 100:
#line 1519 "parser.yxx"
    {
  egg_top_transform = egg_stack.back()->as_transform();
  egg_top_transform->clear_transform();
}
    break;

  case 102:
#line 1535 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  if (group->get_group_type() != EggGroup::GT_joint) {
    eggyywarning("Unexpected <DefaultPose> outside of <Joint>");
  }
  egg_top_transform = &group->modify_default_pose();
  egg_top_transform->clear_transform();
}
    break;

  case 117:
#line 1572 "parser.yxx"
    {
  egg_top_transform->add_translate2d(LVector2d((yyvsp[(3) - (5)]._number), (yyvsp[(4) - (5)]._number)));
}
    break;

  case 118:
#line 1579 "parser.yxx"
    {
  egg_top_transform->add_translate3d(LVector3d((yyvsp[(3) - (6)]._number), (yyvsp[(4) - (6)]._number), (yyvsp[(5) - (6)]._number)));
}
    break;

  case 119:
#line 1586 "parser.yxx"
    {
  egg_top_transform->add_rotate2d((yyvsp[(3) - (4)]._number));
}
    break;

  case 120:
#line 1593 "parser.yxx"
    {
  egg_top_transform->add_rotx((yyvsp[(3) - (4)]._number));
}
    break;

  case 121:
#line 1600 "parser.yxx"
    {
  egg_top_transform->add_roty((yyvsp[(3) - (4)]._number));
}
    break;

  case 122:
#line 1607 "parser.yxx"
    {
  egg_top_transform->add_rotz((yyvsp[(3) - (4)]._number));
}
    break;

  case 123:
#line 1614 "parser.yxx"
    {
  egg_top_transform->add_rotate3d((yyvsp[(3) - (7)]._number), LVector3d((yyvsp[(4) - (7)]._number), (yyvsp[(5) - (7)]._number), (yyvsp[(6) - (7)]._number)));
}
    break;

  case 124:
#line 1621 "parser.yxx"
    {
  egg_top_transform->add_scale2d(LVecBase2d((yyvsp[(3) - (5)]._number), (yyvsp[(4) - (5)]._number)));
}
    break;

  case 125:
#line 1628 "parser.yxx"
    {
  egg_top_transform->add_scale3d(LVecBase3d((yyvsp[(3) - (6)]._number), (yyvsp[(4) - (6)]._number), (yyvsp[(5) - (6)]._number)));
}
    break;

  case 126:
#line 1635 "parser.yxx"
    {
  egg_top_transform->add_uniform_scale((yyvsp[(3) - (4)]._number));
}
    break;

  case 129:
#line 1649 "parser.yxx"
    {
  egg_top_transform->add_matrix3
    (LMatrix3d((yyvsp[(1) - (9)]._number), (yyvsp[(2) - (9)]._number), (yyvsp[(3) - (9)]._number),
               (yyvsp[(4) - (9)]._number), (yyvsp[(5) - (9)]._number), (yyvsp[(6) - (9)]._number),
               (yyvsp[(7) - (9)]._number), (yyvsp[(8) - (9)]._number), (yyvsp[(9) - (9)]._number)));
}
    break;

  case 132:
#line 1667 "parser.yxx"
    {
  egg_top_transform->add_matrix4
    (LMatrix4d((yyvsp[(1) - (16)]._number), (yyvsp[(2) - (16)]._number), (yyvsp[(3) - (16)]._number), (yyvsp[(4) - (16)]._number),
               (yyvsp[(5) - (16)]._number), (yyvsp[(6) - (16)]._number), (yyvsp[(7) - (16)]._number), (yyvsp[(8) - (16)]._number),
               (yyvsp[(9) - (16)]._number), (yyvsp[(10) - (16)]._number), (yyvsp[(11) - (16)]._number), (yyvsp[(12) - (16)]._number),
               (yyvsp[(13) - (16)]._number), (yyvsp[(14) - (16)]._number), (yyvsp[(15) - (16)]._number), (yyvsp[(16) - (16)]._number)));
}
    break;

  case 133:
#line 1686 "parser.yxx"
    {
  if ((yyvsp[(7) - (9)]._egg) != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, (yyvsp[(7) - (9)]._egg));
    EggGroup *group = DCAST(EggGroup, egg_stack.back());
    PTA_double nums = (yyvsp[(3) - (9)]._number_list);
    double membership = (yyvsp[(4) - (9)]._number);

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        group->ref_vertex(vertex, membership);
      }
    }
  }
}
    break;

  case 134:
#line 1719 "parser.yxx"
    {
  (yyval._number) = 1.0;
}
    break;

  case 135:
#line 1723 "parser.yxx"
    {
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  double result = (yyvsp[(1) - (6)]._number);
  
  if (cmp_nocase_uh(name, "membership") == 0) {
    result = value;
  } else {
    eggyywarning("Unknown group vertex scalar " + name);
  }

  (yyval._number) = result;
}
    break;

  case 137:
#line 1760 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance((yyvsp[(3) - (11)]._number), (yyvsp[(4) - (11)]._number), LPoint3d((yyvsp[(7) - (11)]._number), (yyvsp[(8) - (11)]._number), (yyvsp[(9) - (11)]._number))));
}
    break;

  case 138:
#line 1765 "parser.yxx"
    {
  EggGroup *group = DCAST(EggGroup, egg_stack.back());
  group->set_lod(EggSwitchConditionDistance((yyvsp[(3) - (12)]._number), (yyvsp[(4) - (12)]._number), LPoint3d((yyvsp[(8) - (12)]._number), (yyvsp[(9) - (12)]._number), (yyvsp[(10) - (12)]._number)), (yyvsp[(5) - (12)]._number)));
}
    break;

  case 139:
#line 1782 "parser.yxx"
    {
  egg_stack.push_back(new EggPolygon((yyvsp[(2) - (2)]._string)));
}
    break;

  case 140:
#line 1786 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 141:
#line 1801 "parser.yxx"
    {
  egg_stack.push_back(new EggTriangleFan((yyvsp[(2) - (2)]._string)));
}
    break;

  case 142:
#line 1805 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 143:
#line 1820 "parser.yxx"
    {
  egg_stack.push_back(new EggTriangleStrip((yyvsp[(2) - (2)]._string)));
}
    break;

  case 144:
#line 1824 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 145:
#line 1839 "parser.yxx"
    {
  egg_stack.push_back(new EggPoint((yyvsp[(2) - (2)]._string)));
}
    break;

  case 146:
#line 1843 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 147:
#line 1858 "parser.yxx"
    {
  egg_stack.push_back(new EggLine((yyvsp[(2) - (2)]._string)));
}
    break;

  case 148:
#line 1862 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 149:
#line 1877 "parser.yxx"
    {
  egg_stack.push_back(new EggNurbsSurface((yyvsp[(2) - (2)]._string)));
}
    break;

  case 150:
#line 1881 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 151:
#line 1896 "parser.yxx"
    {
  egg_stack.push_back(new EggNurbsCurve((yyvsp[(2) - (2)]._string)));
}
    break;

  case 152:
#line 1900 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 157:
#line 1930 "parser.yxx"
    {
  if (!egg_stack.back()->is_of_type(EggCompositePrimitive::get_class_type())) {
    eggyyerror("Not a composite primitive; components are not allowed here.");
  } else {
    PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
    if ((yyvsp[(3) - (4)]._number) < 0 || (yyvsp[(3) - (4)]._number) >= comp->get_num_components()) {
      eggyyerror("Invalid component number");
    }
  }
  // We temporarily add an EggPolygon to the stack, just to receive
  // the component attributes.
  egg_stack.push_back(new EggPolygon);
}
    break;

  case 158:
#line 1944 "parser.yxx"
    {
  PT(EggPrimitive) prim = DCAST(EggPrimitive, egg_stack.back());
  egg_stack.pop_back();
  PT(EggCompositePrimitive) comp = DCAST(EggCompositePrimitive, egg_stack.back());
  comp->set_component((int)(yyvsp[(3) - (7)]._number), prim);
}
    break;

  case 166:
#line 1958 "parser.yxx"
    {
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  string strval = (yyvsp[(5) - (6)]._string);
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "thick") == 0) {
    if (primitive->is_of_type(EggLine::get_class_type())) {
      DCAST(EggLine, primitive)->set_thick(value);
    } else if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_thick(value);
    } else {
      eggyywarning("scalar thick is only meaningful for points and lines.");
    }
  } else if (cmp_nocase_uh(name, "perspective") == 0) {
    if (primitive->is_of_type(EggPoint::get_class_type())) {
      DCAST(EggPoint, primitive)->set_perspective(value != 0);
    } else {
      eggyywarning("scalar perspective is only meaningful for points.");
    }
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;

  case 178:
#line 2042 "parser.yxx"
    {
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, (yyvsp[(2) - (2)]._egg));
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_curves_on_surface.push_back(curve);
}
    break;

  case 180:
#line 2049 "parser.yxx"
    {
  EggNurbsSurface *primitive = DCAST(EggNurbsSurface, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  string strval = (yyvsp[(5) - (6)]._string);
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "u_subdiv") == 0) {
    primitive->set_u_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "v_subdiv") == 0) {
    primitive->set_v_subdiv((int)value);
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;

  case 191:
#line 2123 "parser.yxx"
    {
  EggNurbsCurve *primitive = DCAST(EggNurbsCurve, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  string strval = (yyvsp[(5) - (6)]._string);
  
  if (cmp_nocase_uh(name, "alpha") == 0) {
    EggRenderMode::AlphaMode a = EggRenderMode::string_alpha_mode(strval);
    if (a == EggRenderMode::AM_unspecified) {
      eggyywarning("Unknown alpha mode " + strval);
    } else {
      primitive->set_alpha_mode(a);
    }
  } else if (cmp_nocase_uh(name, "depth_write") == 0) {
    EggRenderMode::DepthWriteMode m = 
      EggRenderMode::string_depth_write_mode(strval);
    if (m == EggRenderMode::DWM_unspecified) {
      eggyywarning("Unknown depth-write mode " + strval);
    } else {
      primitive->set_depth_write_mode(m);
    }

  } else if (cmp_nocase_uh(name, "depth_test") == 0) {
    EggRenderMode::DepthTestMode m = 
      EggRenderMode::string_depth_test_mode(strval);
    if (m == EggRenderMode::DTM_unspecified) {
      eggyywarning("Unknown depth-test mode " + strval);
    } else {
      primitive->set_depth_test_mode(m);
    }

  } else if (cmp_nocase_uh(name, "visibility") == 0) {
    EggRenderMode::VisibilityMode m = 
      EggRenderMode::string_visibility_mode(strval);
    if (m == EggRenderMode::VM_unspecified) {
      eggyywarning("Unknown visibility mode " + strval);
    } else {
      primitive->set_visibility_mode(m);
    }

  } else if (cmp_nocase_uh(name, "draw_order") == 0) {
    primitive->set_draw_order((int)value);
  } else if (cmp_nocase_uh(name, "bin") == 0) {
    primitive->set_bin(strval);
  } else if (cmp_nocase_uh(name, "subdiv") == 0) {
    primitive->set_subdiv((int)value);
  } else if (cmp_nocase_uh(name, "type") == 0) {
    EggCurve::CurveType a = EggCurve::string_curve_type(strval);
    if (a == EggCurve::CT_none) {
      eggyywarning("Unknown curve type " + strval);
    } else {
      primitive->set_curve_type(a);
    }
    
  } else {
    eggyywarning("Unknown scalar " + name);
  }
}
    break;

  case 192:
#line 2192 "parser.yxx"
    {
  if ((yyvsp[(1) - (1)]._egg) != (EggTexture *)NULL) {
    EggTexture *texture = DCAST(EggTexture, (yyvsp[(1) - (1)]._egg));
    DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
  }
}
    break;

  case 193:
#line 2209 "parser.yxx"
    {
  EggTexture *texture = NULL;

  // Defining a texture on-the-fly.
  Filename filename = (yyvsp[(1) - (1)]._string);
  string tref_name = filename.get_basename();

  Textures::iterator vpi = textures.find(tref_name);
  if (vpi == textures.end()) {
    // The texture was not yet defined.  Define it.
    texture = new EggTexture(tref_name, filename);
    textures[tref_name] = texture;

    if (egg_top_node != NULL) {
      egg_top_node->add_child(texture);
    }

  } else {
    // The texture already existed.  Use it.
    texture = (*vpi).second;
    if (filename != texture->get_filename()) {
      eggyywarning(string("Using previous path: ") + 
                   texture->get_filename().get_fullpath());
    }
  }

  nassertr(texture != NULL, 0);
  DCAST(EggPrimitive, egg_stack.back())->add_texture(texture);
}
    break;

  case 194:
#line 2249 "parser.yxx"
    {
  if ((yyvsp[(1) - (1)]._egg) != (EggMaterial *)NULL) {
    EggMaterial *material = DCAST(EggMaterial, (yyvsp[(1) - (1)]._egg));
    DCAST(EggPrimitive, egg_stack.back())->set_material(material);
  }
}
    break;

  case 195:
#line 2266 "parser.yxx"
    {
  DCAST(EggPrimitive, egg_stack.back())->set_normal(Normald((yyvsp[(1) - (3)]._number), (yyvsp[(2) - (3)]._number), (yyvsp[(3) - (3)]._number)));
}
    break;

  case 196:
#line 2270 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal((yyvsp[(3) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (8)]._string));
  }
}
    break;

  case 197:
#line 2278 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_dnormals.
    insert(EggMorphNormal((yyvsp[(4) - (8)]._string), LVector3d((yyvsp[(5) - (8)]._number), (yyvsp[(6) - (8)]._number), (yyvsp[(7) - (8)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (8)]._string));
  }
}
    break;

  case 198:
#line 2296 "parser.yxx"
    {
  DCAST(EggPrimitive, egg_stack.back())->set_color(Colorf((yyvsp[(1) - (4)]._number), (yyvsp[(2) - (4)]._number), (yyvsp[(3) - (4)]._number), (yyvsp[(4) - (4)]._number)));
}
    break;

  case 199:
#line 2300 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor((yyvsp[(3) - (9)]._string), LVector4f((yyvsp[(5) - (9)]._number), (yyvsp[(6) - (9)]._number), (yyvsp[(7) - (9)]._number), (yyvsp[(8) - (9)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(3) - (9)]._string));
  }
}
    break;

  case 200:
#line 2308 "parser.yxx"
    {
  bool inserted = DCAST(EggPrimitive, egg_stack.back())->_drgbas.
    insert(EggMorphColor((yyvsp[(4) - (9)]._string), LVector4f((yyvsp[(5) - (9)]._number), (yyvsp[(6) - (9)]._number), (yyvsp[(7) - (9)]._number), (yyvsp[(8) - (9)]._number)))).second;
  if (!inserted) {
    eggyywarning("Ignoring repeated morph name " + (yyvsp[(4) - (9)]._string));
  }
}
    break;

  case 201:
#line 2326 "parser.yxx"
    {
  EggPrimitive *primitive = DCAST(EggPrimitive, egg_stack.back());
  int value = (int)(yyvsp[(1) - (1)]._number);
  primitive->set_bface_flag(value!=0);
}
    break;

  case 202:
#line 2342 "parser.yxx"
    {
  if ((yyvsp[(6) - (8)]._egg) != (EggVertexPool *)NULL) {
    EggVertexPool *pool = DCAST(EggVertexPool, (yyvsp[(6) - (8)]._egg));
    EggPrimitive *prim = DCAST(EggPrimitive, egg_stack.back());
    PTA_double nums = (yyvsp[(3) - (8)]._number_list);

    for (int i = 0; i < (int)nums.size(); i++) {
      int index = (int)nums[i];
      EggVertex *vertex = pool->get_forward_vertex(index);
      if (vertex == NULL) {
        ostringstream errmsg;
        errmsg << "No vertex " << index << " in pool " << pool->get_name() 
               << ends;
        eggyyerror(errmsg);
      } else {
        prim->add_vertex(vertex);
      }
    }
  }
}
    break;

  case 203:
#line 2373 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  int u_order = (int)(yyvsp[(1) - (2)]._number);
  int v_order = (int)(yyvsp[(2) - (2)]._number);
  nurbs->set_u_order(u_order);
  nurbs->set_v_order(v_order);
}
    break;

  case 204:
#line 2391 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = (yyvsp[(1) - (1)]._number_list);

  nurbs->set_num_u_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_u_knot(i, nums[i]);
  }
}
    break;

  case 205:
#line 2411 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  PTA_double nums = (yyvsp[(1) - (1)]._number_list);

  nurbs->set_num_v_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_v_knot(i, nums[i]);
  }
}
    break;

  case 206:
#line 2431 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nurbs->_trims.push_back(EggNurbsSurface::Trim());
}
    break;

  case 208:
#line 2447 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nurbs->_trims.back().push_back(EggNurbsSurface::Loop());
}
    break;

  case 209:
#line 2453 "parser.yxx"
    {
  EggNurbsSurface *nurbs = DCAST(EggNurbsSurface, egg_stack.back());
  nassertr(!nurbs->_trims.empty(), 0);
  nassertr(!nurbs->_trims.back().empty(), 0);
  EggNurbsCurve *curve = DCAST(EggNurbsCurve, (yyvsp[(2) - (2)]._egg)); 
  nurbs->_trims.back().back().push_back(curve);
}
    break;

  case 210:
#line 2472 "parser.yxx"
    {
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  int order = (int)(yyvsp[(1) - (1)]._number);
  nurbs->set_order(order);
}
    break;

  case 211:
#line 2488 "parser.yxx"
    {
  EggNurbsCurve *nurbs = DCAST(EggNurbsCurve, egg_stack.back());
  PTA_double nums = (yyvsp[(1) - (1)]._number_list);

  nurbs->set_num_knots(nums.size());
  for (int i = 0; i < (int)nums.size(); i++) {
    nurbs->set_knot(i, nums[i]);
  }
}
    break;

  case 212:
#line 2509 "parser.yxx"
    {
  EggTable *table = new EggTable((yyvsp[(2) - (2)]._string));
  table->set_table_type(EggTable::TT_table);
  egg_stack.push_back(table);
}
    break;

  case 213:
#line 2515 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
  Thread::consider_yield();
}
    break;

  case 214:
#line 2532 "parser.yxx"
    {
  EggTable *table = new EggTable((yyvsp[(2) - (2)]._string));
  table->set_table_type(EggTable::TT_bundle);
  egg_stack.push_back(table);
}
    break;

  case 215:
#line 2538 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 217:
#line 2554 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 218:
#line 2558 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 219:
#line 2562 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 220:
#line 2566 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 221:
#line 2570 "parser.yxx"
    {
  DCAST(EggTable, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 222:
#line 2585 "parser.yxx"
    {
  EggSAnimData *anim_data = new EggSAnimData((yyvsp[(2) - (2)]._string));
  egg_stack.push_back(anim_data);
}
    break;

  case 223:
#line 2590 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 225:
#line 2607 "parser.yxx"
    {
  EggSAnimData *anim_data = DCAST(EggSAnimData, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else {
    eggyywarning("Unsupported S$Anim scalar: " + name);
  }
}
    break;

  case 226:
#line 2619 "parser.yxx"
    {
  DCAST(EggSAnimData, egg_stack.back())->set_data((yyvsp[(4) - (5)]._number_list));
}
    break;

  case 227:
#line 2633 "parser.yxx"
    {
  EggXfmAnimData *anim_data = new EggXfmAnimData((yyvsp[(2) - (2)]._string));
  egg_stack.push_back(anim_data);
}
    break;

  case 228:
#line 2638 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 230:
#line 2655 "parser.yxx"
    {
  EggXfmAnimData *anim_data = DCAST(EggXfmAnimData, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  string strval = (yyvsp[(5) - (6)]._string);

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_data->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_data->set_order(strval);
  } else if (cmp_nocase_uh(name, "contents") == 0) {
    anim_data->set_contents(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim scalar: " + name);
  }
}
    break;

  case 231:
#line 2672 "parser.yxx"
    {
  DCAST(EggXfmAnimData, egg_stack.back())->set_data((yyvsp[(4) - (5)]._number_list));
}
    break;

  case 232:
#line 2686 "parser.yxx"
    {
  EggXfmSAnim *anim_group = new EggXfmSAnim((yyvsp[(2) - (2)]._string));
  egg_stack.push_back(anim_group);
}
    break;

  case 233:
#line 2691 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 235:
#line 2708 "parser.yxx"
    {
  EggXfmSAnim *anim_group = DCAST(EggXfmSAnim, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);
  string strval = (yyvsp[(5) - (6)]._string);

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_group->set_fps(value);
  } else if (cmp_nocase_uh(name, "order") == 0) {
    anim_group->set_order(strval);
  } else {
    eggyywarning("Unsupported Xfm$Anim_S$ scalar: " + name);
  }
}
    break;

  case 236:
#line 2723 "parser.yxx"
    {
  DCAST(EggXfmSAnim, egg_stack.back())->add_child(DCAST(EggNode, (yyvsp[(2) - (2)]._egg)));
}
    break;

  case 237:
#line 2738 "parser.yxx"
    {
  EggAnimPreload *anim_preload = new EggAnimPreload((yyvsp[(2) - (2)]._string));
  egg_stack.push_back(anim_preload);
}
    break;

  case 238:
#line 2743 "parser.yxx"
    {
  (yyval._egg) = egg_stack.back();
  egg_stack.pop_back();
}
    break;

  case 240:
#line 2760 "parser.yxx"
    {
  EggAnimPreload *anim_preload = DCAST(EggAnimPreload, egg_stack.back());
  string name = (yyvsp[(3) - (6)]._string);
  double value = (yyvsp[(5) - (6)]._number);

  if (cmp_nocase_uh(name, "fps") == 0) {
    anim_preload->set_fps(value);
  } else if (cmp_nocase_uh(name, "frames") == 0) {
    anim_preload->set_num_frames((int)value);
  } else {
    eggyywarning("Unsupported AnimPreload scalar: " + name);
  }
}
    break;

  case 241:
#line 2784 "parser.yxx"
    {
  (yyval._number_list) = PTA_double::empty_array(0);
}
    break;

  case 242:
#line 2788 "parser.yxx"
    {
  (yyval._number_list).push_back((double)(yyvsp[(2) - (2)]._number));
}
    break;

  case 243:
#line 2802 "parser.yxx"
    {
  (yyval._number_list) = PTA_double::empty_array(0);
}
    break;

  case 244:
#line 2806 "parser.yxx"
    {
  (yyval._number_list).push_back((yyvsp[(2) - (2)]._number));
}
    break;

  case 245:
#line 2820 "parser.yxx"
    {
  string name = (yyvsp[(1) - (1)]._string);
  Textures::iterator vpi = textures.find(name);
  if (vpi == textures.end()) {
    eggyyerror("Unknown texture " + name);
    (yyval._egg) = PT(EggObject)();
  } else {
    (yyval._egg) = (*vpi).second;
  }
}
    break;

  case 246:
#line 2841 "parser.yxx"
    {
  string name = (yyvsp[(1) - (1)]._string);
  Materials::iterator vpi = materials.find(name);
  if (vpi == materials.end()) {
    eggyyerror("Unknown material " + name);
    (yyval._egg) = PT(EggObject)();
  } else {
    (yyval._egg) = (*vpi).second;
  }
}
    break;

  case 247:
#line 2862 "parser.yxx"
    {
  string name = (yyvsp[(1) - (1)]._string);
  VertexPools::iterator vpi = vertex_pools.find(name);
  if (vpi == vertex_pools.end()) {
    // This will become a forward reference.
    EggVertexPool *pool = new EggVertexPool(name);
    // The egg syntax starts counting at 1 by convention.
    pool->set_highest_index(0);
    vertex_pools[name] = pool;
    (yyval._egg) = pool;
  } else {
    (yyval._egg) = (*vpi).second;
  }
}
    break;

  case 248:
#line 2887 "parser.yxx"
    {
  string name = (yyvsp[(1) - (1)]._string);
  Groups::iterator vpi = groups.find(name);
  if (vpi == groups.end()) {
    eggyyerror("Unknown group " + name);
    (yyval._egg) = PT(EggObject)();
  } else {
    (yyval._egg) = (*vpi).second;
  }
}
    break;

  case 249:
#line 2908 "parser.yxx"
    {
  eggyyerror("Name required.");
  (yyval._string) = "";
}
    break;

  case 252:
#line 2937 "parser.yxx"
    {
  eggyyerror("String required.");
  (yyval._string) = "";
}
    break;

  case 254:
#line 2953 "parser.yxx"
    {
  (yyval._string) = "";
}
    break;

  case 256:
#line 2971 "parser.yxx"
    {
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 257:
#line 2975 "parser.yxx"
    {
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 259:
#line 2992 "parser.yxx"
    {
  (yyval._string) = "";
}
    break;

  case 260:
#line 2996 "parser.yxx"
    {
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 261:
#line 3012 "parser.yxx"
    {
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 262:
#line 3016 "parser.yxx"
    {
  (yyval._string) = (yyvsp[(1) - (2)]._string) + "\n" + (yyvsp[(2) - (2)]._string);
}
    break;

  case 264:
#line 3031 "parser.yxx"
    {
  (yyval._number) = (yyvsp[(1) - (1)]._ulong);
}
    break;

  case 265:
#line 3046 "parser.yxx"
    {
  (yyval._number) = (yyvsp[(1) - (1)]._number);
  (yyval._ulong) = (unsigned long)(yyvsp[(1) - (1)]._number);
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 266:
#line 3052 "parser.yxx"
    {
  (yyval._number) = (yyvsp[(1) - (1)]._ulong);
  (yyval._ulong) = (yyvsp[(1) - (1)]._ulong);
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 267:
#line 3058 "parser.yxx"
    {
  (yyval._number) = 0.0;
  (yyval._ulong) = 0;
  (yyval._string) = (yyvsp[(1) - (1)]._string);
}
    break;

  case 268:
#line 3075 "parser.yxx"
    {
  int i = (int)(yyvsp[(1) - (1)]._number);
  if ((double)i != (yyvsp[(1) - (1)]._number)) {
    eggyywarning("Integer expected.");
    (yyval._number) = (double)i;
  }
}
    break;

  case 269:
#line 3083 "parser.yxx"
    {
  (yyval._number) = (yyvsp[(1) - (1)]._ulong);
}
    break;


/* Line 1267 of yacc.c.  */
#line 4785 "y.tab.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



