/* A Bison parser, made by GNU Bison 2.0.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 1

/* Substitute the variable and function names.  */
#define yyparse cppyyparse
#define yylex   cppyylex
#define yyerror cppyyerror
#define yylval  cppyylval
#define yychar  cppyychar
#define yydebug cppyydebug
#define yynerrs cppyynerrs
#define yylloc cppyylloc

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     REAL = 258,
     INTEGER = 259,
     CHAR_TOK = 260,
     STRING = 261,
     SIMPLE_IDENTIFIER = 262,
     IDENTIFIER = 263,
     TYPENAME_IDENTIFIER = 264,
     SCOPING = 265,
     TYPEDEFNAME = 266,
     ELLIPSIS = 267,
     OROR = 268,
     ANDAND = 269,
     EQCOMPARE = 270,
     NECOMPARE = 271,
     LECOMPARE = 272,
     GECOMPARE = 273,
     LSHIFT = 274,
     RSHIFT = 275,
     POINTSAT_STAR = 276,
     DOT_STAR = 277,
     UNARY = 278,
     UNARY_NOT = 279,
     UNARY_NEGATE = 280,
     UNARY_MINUS = 281,
     UNARY_STAR = 282,
     UNARY_REF = 283,
     POINTSAT = 284,
     SCOPE = 285,
     PLUSPLUS = 286,
     MINUSMINUS = 287,
     TIMESEQUAL = 288,
     DIVIDEEQUAL = 289,
     MODEQUAL = 290,
     PLUSEQUAL = 291,
     MINUSEQUAL = 292,
     OREQUAL = 293,
     ANDEQUAL = 294,
     XOREQUAL = 295,
     LSHIFTEQUAL = 296,
     RSHIFTEQUAL = 297,
     TOKENPASTE = 298,
     KW_BEGIN_PUBLISH = 299,
     KW_BLOCKING = 300,
     KW_BOOL = 301,
     KW_CATCH = 302,
     KW_CHAR = 303,
     KW_WCHAR_T = 304,
     KW_CLASS = 305,
     KW_CONST = 306,
     KW_DELETE = 307,
     KW_DOUBLE = 308,
     KW_DYNAMIC_CAST = 309,
     KW_ELSE = 310,
     KW_END_PUBLISH = 311,
     KW_ENUM = 312,
     KW_EXTERN = 313,
     KW_EXPLICIT = 314,
     KW_PUBLISHED = 315,
     KW_FALSE = 316,
     KW_FLOAT = 317,
     KW_FRIEND = 318,
     KW_FOR = 319,
     KW_GOTO = 320,
     KW_IF = 321,
     KW_INLINE = 322,
     KW_INT = 323,
     KW_LONG = 324,
     KW_LONGLONG = 325,
     KW_MAKE_SEQ = 326,
     KW_MUTABLE = 327,
     KW_NAMESPACE = 328,
     KW_NEW = 329,
     KW_OPERATOR = 330,
     KW_PRIVATE = 331,
     KW_PROTECTED = 332,
     KW_PUBLIC = 333,
     KW_REGISTER = 334,
     KW_RETURN = 335,
     KW_SHORT = 336,
     KW_SIGNED = 337,
     KW_SIZEOF = 338,
     KW_STATIC = 339,
     KW_STATIC_CAST = 340,
     KW_STRUCT = 341,
     KW_TEMPLATE = 342,
     KW_THROW = 343,
     KW_TRUE = 344,
     KW_TRY = 345,
     KW_TYPEDEF = 346,
     KW_TYPENAME = 347,
     KW_UNION = 348,
     KW_UNSIGNED = 349,
     KW_USING = 350,
     KW_VIRTUAL = 351,
     KW_VOID = 352,
     KW_VOLATILE = 353,
     KW_WHILE = 354,
     START_CPP = 355,
     START_CONST_EXPR = 356,
     START_TYPE = 357
   };
#endif
#define REAL 258
#define INTEGER 259
#define CHAR_TOK 260
#define STRING 261
#define SIMPLE_IDENTIFIER 262
#define IDENTIFIER 263
#define TYPENAME_IDENTIFIER 264
#define SCOPING 265
#define TYPEDEFNAME 266
#define ELLIPSIS 267
#define OROR 268
#define ANDAND 269
#define EQCOMPARE 270
#define NECOMPARE 271
#define LECOMPARE 272
#define GECOMPARE 273
#define LSHIFT 274
#define RSHIFT 275
#define POINTSAT_STAR 276
#define DOT_STAR 277
#define UNARY 278
#define UNARY_NOT 279
#define UNARY_NEGATE 280
#define UNARY_MINUS 281
#define UNARY_STAR 282
#define UNARY_REF 283
#define POINTSAT 284
#define SCOPE 285
#define PLUSPLUS 286
#define MINUSMINUS 287
#define TIMESEQUAL 288
#define DIVIDEEQUAL 289
#define MODEQUAL 290
#define PLUSEQUAL 291
#define MINUSEQUAL 292
#define OREQUAL 293
#define ANDEQUAL 294
#define XOREQUAL 295
#define LSHIFTEQUAL 296
#define RSHIFTEQUAL 297
#define TOKENPASTE 298
#define KW_BEGIN_PUBLISH 299
#define KW_BLOCKING 300
#define KW_BOOL 301
#define KW_CATCH 302
#define KW_CHAR 303
#define KW_WCHAR_T 304
#define KW_CLASS 305
#define KW_CONST 306
#define KW_DELETE 307
#define KW_DOUBLE 308
#define KW_DYNAMIC_CAST 309
#define KW_ELSE 310
#define KW_END_PUBLISH 311
#define KW_ENUM 312
#define KW_EXTERN 313
#define KW_EXPLICIT 314
#define KW_PUBLISHED 315
#define KW_FALSE 316
#define KW_FLOAT 317
#define KW_FRIEND 318
#define KW_FOR 319
#define KW_GOTO 320
#define KW_IF 321
#define KW_INLINE 322
#define KW_INT 323
#define KW_LONG 324
#define KW_LONGLONG 325
#define KW_MAKE_SEQ 326
#define KW_MUTABLE 327
#define KW_NAMESPACE 328
#define KW_NEW 329
#define KW_OPERATOR 330
#define KW_PRIVATE 331
#define KW_PROTECTED 332
#define KW_PUBLIC 333
#define KW_REGISTER 334
#define KW_RETURN 335
#define KW_SHORT 336
#define KW_SIGNED 337
#define KW_SIZEOF 338
#define KW_STATIC 339
#define KW_STATIC_CAST 340
#define KW_STRUCT 341
#define KW_TEMPLATE 342
#define KW_THROW 343
#define KW_TRUE 344
#define KW_TRY 345
#define KW_TYPEDEF 346
#define KW_TYPENAME 347
#define KW_UNION 348
#define KW_UNSIGNED 349
#define KW_USING 350
#define KW_VIRTUAL 351
#define KW_VOID 352
#define KW_VOLATILE 353
#define KW_WHILE 354
#define START_CPP 355
#define START_CONST_EXPR 356
#define START_TYPE 357




/* Copy the first part of user declarations.  */
#line 6 "cppBison.yxx"


#include "cppBisonDefs.h"
#include "cppParser.h"
#include "cppExpression.h"
#include "cppSimpleType.h"
#include "cppExtensionType.h"
#include "cppStructType.h"
#include "cppEnumType.h"
#include "cppFunctionType.h"
#include "cppTBDType.h"
#include "cppMakeSeq.h"
#include "cppParameterList.h"
#include "cppInstance.h"
#include "cppClassTemplateParameter.h"
#include "cppTemplateParameterList.h"
#include "cppInstanceIdentifier.h"
#include "cppTypedef.h"
#include "cppTypeDeclaration.h"
#include "cppVisibility.h"
#include "cppIdentifier.h"
#include "cppScope.h"
#include "cppTemplateScope.h"
#include "cppNamespace.h"
#include "cppUsing.h"

////////////////////////////////////////////////////////////////////
// Defining the interface to the parser.
////////////////////////////////////////////////////////////////////

CPPScope *current_scope = NULL;
CPPScope *global_scope = NULL;
CPPPreprocessor *current_lexer = NULL;

static CPPStructType *current_struct = NULL; 
static CPPEnumType *current_enum = NULL;
static int current_storage_class = 0;
static CPPType *current_type = NULL;
static CPPExpression *current_expr = NULL;
static int publish_nest_level = 0;
static CPPVisibility publish_previous;
static YYLTYPE publish_loc;

static vector<CPPScope *> last_scopes;
static vector<int> last_storage_classes;
static vector<CPPStructType *> last_structs;

int yyparse();

#define YYERROR_VERBOSE

static void
yyerror(const string &msg) {
  current_lexer->error(msg);
}

static void
yyerror(const string &msg, YYLTYPE &loc) {
  current_lexer->error(msg, loc.first_line, loc.first_column);
}

static void
yywarning(const string &msg, YYLTYPE &loc) {
  current_lexer->warning(msg, loc.first_line, loc.first_column);
}

static int
yylex(YYSTYPE *lval, YYLTYPE *lloc) {
  CPPToken token = current_lexer->get_next_token();
  *lval = token._lval;
  *lloc = token._lloc;
  return token._token;
}

void
parse_cpp(CPPParser *cp) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;

  current_scope = cp;
  global_scope = cp;
  current_lexer = cp;
  publish_nest_level = 0;
  yyparse();

  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
  }

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
    
}

CPPExpression *
parse_const_expr(CPPPreprocessor *pp, CPPScope *new_current_scope,
                 CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPExpression *old_expr = current_expr;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_expr = (CPPExpression *)NULL;
  current_lexer = pp;
  yyparse();

  CPPExpression *result = current_expr;

  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_expr = old_expr;

  return result;
}

CPPType *
parse_type(CPPPreprocessor *pp, CPPScope *new_current_scope,
           CPPScope *new_global_scope) {
  CPPScope *old_scope = current_scope;
  CPPScope *old_global_scope = global_scope;
  CPPPreprocessor *old_lexer = current_lexer;
  CPPType *old_type = current_type;

  current_scope = new_current_scope;
  global_scope = new_global_scope;
  current_type = (CPPType *)NULL;
  current_lexer = pp;
  yyparse();

  CPPType *result = current_type;
  
  current_scope = old_scope;
  global_scope = old_global_scope;
  current_lexer = old_lexer;
  current_type = old_type;

  return result;
}

static void
push_scope(CPPScope *new_scope) {
  last_scopes.push_back(current_scope);
  if (new_scope != NULL) {
    current_scope = new_scope;
  }
}

static void
pop_scope() {
  assert(!last_scopes.empty());
  current_scope = last_scopes.back();
  last_scopes.pop_back();
}

static void
push_storage_class(int new_storage_class) {
  last_storage_classes.push_back(current_storage_class);
  current_storage_class = new_storage_class;
}

static void
pop_storage_class() {
  assert(!last_storage_classes.empty());
  current_storage_class = last_storage_classes.back();
  last_storage_classes.pop_back();
}

static void
push_struct(CPPStructType *new_struct) {
  last_structs.push_back(current_struct);
  current_struct = new_struct;
}

static void
pop_struct() {
  assert(!last_structs.empty());
  current_struct = last_structs.back();
  last_structs.pop_back();
}



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
typedef int YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined (YYLTYPE) && ! defined (YYLTYPE_IS_DECLARED)
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 213 of yacc.c.  */
#line 499 "y.tab.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC malloc
# endif

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYLTYPE_IS_TRIVIAL) && YYLTYPE_IS_TRIVIAL \
             && defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  69
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   3407

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  127
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  94
/* YYNRULES -- Number of rules. */
#define YYNRULES  530
/* YYNRULES -- Number of states. */
#define YYNSTATES  951

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   357

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   125,     2,     2,     2,   118,   111,     2,
     121,   123,   116,   114,   104,   115,   120,   117,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   106,   105,
     112,   107,   113,   108,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   122,     2,   126,   110,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   103,   109,   124,   119,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    17,    20,    22,
      26,    31,    32,    38,    40,    42,    44,    46,    48,    50,
      53,    55,    57,    60,    63,    66,    69,    79,    80,    84,
      86,    89,    93,    96,    99,   102,   105,   108,   111,   114,
     117,   119,   123,   127,   128,   133,   134,   140,   143,   148,
     151,   156,   157,   162,   163,   169,   173,   176,   181,   184,
     189,   190,   197,   198,   205,   206,   214,   215,   226,   227,
     239,   240,   249,   250,   260,   262,   264,   266,   271,   277,
     279,   281,   283,   285,   287,   289,   291,   293,   295,   297,
     299,   301,   303,   305,   307,   309,   311,   313,   315,   317,
     319,   321,   323,   325,   327,   329,   331,   333,   335,   337,
     339,   341,   343,   345,   347,   350,   353,   355,   357,   359,
     361,   362,   369,   371,   373,   375,   379,   382,   387,   391,
     396,   398,   400,   402,   405,   407,   410,   413,   416,   419,
     423,   428,   432,   436,   437,   444,   446,   448,   450,   454,
     457,   459,   463,   465,   468,   470,   473,   475,   479,   485,
     489,   494,   496,   498,   501,   503,   507,   511,   517,   521,
     525,   530,   532,   534,   536,   538,   541,   544,   547,   551,
     556,   558,   560,   562,   565,   568,   571,   575,   580,   588,
     592,   594,   597,   600,   603,   607,   612,   620,   622,   624,
     627,   629,   631,   633,   635,   638,   641,   643,   645,   648,
     650,   652,   654,   656,   659,   662,   664,   666,   669,   672,
     675,   678,   682,   683,   689,   690,   698,   700,   702,   705,
     709,   712,   715,   718,   722,   726,   730,   734,   738,   742,
     743,   749,   750,   757,   759,   761,   764,   766,   770,   774,
     780,   782,   784,   786,   788,   789,   796,   801,   804,   808,
     810,   812,   814,   816,   818,   820,   822,   824,   826,   828,
     830,   832,   835,   838,   841,   844,   846,   849,   851,   855,
     858,   860,   861,   864,   866,   869,   871,   873,   875,   877,
     879,   881,   883,   885,   887,   889,   891,   893,   895,   897,
     899,   901,   903,   905,   907,   909,   911,   913,   915,   917,
     919,   921,   923,   925,   927,   929,   931,   933,   935,   937,
     939,   941,   943,   945,   947,   949,   951,   953,   955,   957,
     959,   961,   963,   965,   967,   969,   971,   973,   975,   977,
     979,   981,   983,   985,   987,   989,   991,   993,   995,   997,
     999,  1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,  1017,
    1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,  1035,  1037,
    1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,  1055,  1057,
    1059,  1061,  1063,  1065,  1067,  1069,  1071,  1073,  1075,  1077,
    1081,  1083,  1085,  1087,  1089,  1091,  1095,  1097,  1102,  1110,
    1118,  1123,  1126,  1129,  1132,  1135,  1138,  1142,  1146,  1150,
    1154,  1158,  1162,  1166,  1170,  1174,  1178,  1182,  1186,  1190,
    1194,  1198,  1204,  1209,  1214,  1218,  1222,  1226,  1230,  1232,
    1237,  1245,  1253,  1258,  1263,  1268,  1273,  1278,  1283,  1288,
    1293,  1298,  1303,  1308,  1313,  1316,  1322,  1325,  1328,  1331,
    1334,  1337,  1341,  1345,  1349,  1353,  1357,  1361,  1365,  1369,
    1373,  1377,  1381,  1385,  1389,  1393,  1397,  1401,  1405,  1411,
    1416,  1421,  1425,  1429,  1433,  1437,  1439,  1441,  1443,  1445,
    1447,  1449,  1451,  1453,  1458,  1466,  1474,  1479,  1482,  1488,
    1491,  1494,  1497,  1500,  1504,  1508,  1512,  1516,  1520,  1524,
    1528,  1532,  1536,  1540,  1544,  1548,  1552,  1556,  1560,  1564,
    1568,  1574,  1579,  1584,  1588,  1592,  1596,  1600,  1602,  1604,
    1606,  1608,  1610,  1612,  1614,  1617,  1620,  1622,  1624,  1626,
    1629
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
     128,     0,    -1,   100,   129,    -1,   101,   213,    -1,   102,
     182,    -1,   220,    -1,   129,   105,    -1,   129,   134,    -1,
     131,    -1,   130,   104,   131,    -1,   218,   121,   210,   123,
      -1,    -1,   137,   103,   133,   129,   124,    -1,   138,    -1,
     160,    -1,   132,    -1,   198,    -1,   200,    -1,   135,    -1,
      91,   144,    -1,    44,    -1,    56,    -1,    60,   106,    -1,
      78,   106,    -1,    77,   106,    -1,    76,   106,    -1,    71,
     121,   218,   104,   218,   104,   218,   123,   105,    -1,    -1,
      63,   136,   134,    -1,   220,    -1,   137,    58,    -1,   137,
      58,   219,    -1,   137,    84,    -1,   137,    67,    -1,   137,
      96,    -1,   137,    59,    -1,   137,    98,    -1,   137,    72,
      -1,   137,    79,    -1,   137,    45,    -1,   139,    -1,   137,
     180,   105,    -1,   137,   149,   172,    -1,    -1,   137,   180,
     140,   142,    -1,    -1,   137,    51,   179,   141,   143,    -1,
     166,   172,    -1,   166,   171,   104,   142,    -1,   166,   172,
      -1,   166,   171,   104,   143,    -1,    -1,   137,   180,   145,
     147,    -1,    -1,   137,    51,   179,   146,   148,    -1,   137,
     149,   172,    -1,   166,   172,    -1,   166,   171,   104,   147,
      -1,   166,   172,    -1,   166,   171,   104,   148,    -1,    -1,
       8,   121,   150,   168,   123,   157,    -1,    -1,     9,   121,
     151,   168,   123,   157,    -1,    -1,   119,   218,   121,   152,
     168,   123,   157,    -1,    -1,     9,   121,   116,   166,   123,
     121,   153,   168,   123,   157,    -1,    -1,     9,   121,    10,
     116,   166,   123,   121,   154,   168,   123,   157,    -1,    -1,
      75,   179,   176,   121,   155,   168,   123,   157,    -1,    -1,
      75,    51,   179,   176,   121,   156,   168,   123,   157,    -1,
       8,    -1,   220,    -1,    51,    -1,   157,    88,   121,   123,
      -1,   157,    88,   121,   218,   123,    -1,   125,    -1,   119,
      -1,   116,    -1,   117,    -1,   118,    -1,   114,    -1,   115,
      -1,   109,    -1,   111,    -1,   110,    -1,    13,    -1,    14,
      -1,    15,    -1,    16,    -1,    17,    -1,    18,    -1,   112,
      -1,   113,    -1,    19,    -1,    20,    -1,   107,    -1,   104,
      -1,    31,    -1,    32,    -1,    33,    -1,    34,    -1,    35,
      -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,
      -1,    41,    -1,    42,    -1,    29,    -1,   122,   126,    -1,
     121,   123,    -1,    74,    -1,    52,    -1,   138,    -1,   160,
      -1,    -1,    87,   161,   112,   162,   113,   159,    -1,   220,
      -1,   163,    -1,   164,    -1,   163,   104,   164,    -1,    50,
     218,    -1,    50,   218,   107,   182,    -1,   165,   177,   170,
      -1,    51,   165,   177,   170,    -1,   201,    -1,     8,    -1,
       9,    -1,    92,   218,    -1,   218,    -1,    75,   158,    -1,
      51,   166,    -1,   116,   166,    -1,   111,   166,    -1,    10,
     116,   166,    -1,   166,   122,   209,   126,    -1,   166,   106,
       4,    -1,   121,   166,   123,    -1,    -1,   166,   121,   167,
     168,   123,   157,    -1,   220,    -1,    12,    -1,   169,    -1,
     169,   104,    12,    -1,   169,    12,    -1,   175,    -1,   169,
     104,   175,    -1,   220,    -1,   107,   212,    -1,   220,    -1,
     107,   213,    -1,   105,    -1,   103,   205,   124,    -1,   106,
     130,   103,   205,   124,    -1,   107,   213,   105,    -1,   107,
     103,   173,   124,    -1,   220,    -1,   174,    -1,   174,   104,
      -1,   213,    -1,   103,   173,   124,    -1,   174,   104,   213,
      -1,   174,   104,   103,   173,   124,    -1,   179,   177,   171,
      -1,     8,   177,   171,    -1,    51,   179,   177,   171,    -1,
     215,    -1,   220,    -1,     8,    -1,     9,    -1,    51,   176,
      -1,   116,   176,    -1,   111,   176,    -1,    10,   116,   176,
      -1,   176,   122,   209,   126,    -1,   220,    -1,     8,    -1,
       9,    -1,    51,   177,    -1,   116,   177,    -1,   111,   177,
      -1,    10,   116,   177,    -1,   177,   122,   209,   126,    -1,
     121,   177,   123,   121,   168,   123,   157,    -1,   121,   177,
     123,    -1,   220,    -1,    51,   178,    -1,   116,   178,    -1,
     111,   178,    -1,    10,   116,   178,    -1,   178,   122,   209,
     126,    -1,   121,   178,   123,   121,   168,   123,   157,    -1,
     201,    -1,     9,    -1,    92,   218,    -1,   183,    -1,   185,
      -1,   190,    -1,   192,    -1,   197,   218,    -1,   196,   218,
      -1,   201,    -1,     9,    -1,    92,   218,    -1,   183,    -1,
     185,    -1,   190,    -1,   192,    -1,   197,   218,    -1,   196,
     218,    -1,   201,    -1,     9,    -1,    92,   218,    -1,   197,
     218,    -1,   196,   218,    -1,   179,   178,    -1,    51,   179,
     178,    -1,    -1,   197,   103,   184,   129,   124,    -1,    -1,
     197,   218,   186,   187,   103,   129,   124,    -1,   220,    -1,
     188,    -1,   106,   189,    -1,   188,   104,   189,    -1,    78,
     217,    -1,    77,   217,    -1,    76,   217,    -1,    96,    78,
     217,    -1,    96,    77,   217,    -1,    96,    76,   217,    -1,
      78,    96,   217,    -1,    77,    96,   217,    -1,    76,    96,
     217,    -1,    -1,   196,   103,   191,   194,   124,    -1,    -1,
     196,   218,   103,   193,   194,   124,    -1,   220,    -1,   195,
      -1,   195,   104,    -1,   218,    -1,   218,   107,   213,    -1,
     195,   104,   218,    -1,   195,   104,   218,   107,   213,    -1,
      57,    -1,    50,    -1,    86,    -1,    93,    -1,    -1,    73,
     218,   103,   199,   129,   124,    -1,    73,   103,   129,   124,
      -1,    95,   218,    -1,    95,    73,   218,    -1,   202,    -1,
     203,    -1,   204,    -1,    46,    -1,    48,    -1,    49,    -1,
      81,    -1,    69,    -1,    70,    -1,    94,    -1,    82,    -1,
      68,    -1,    81,   202,    -1,    69,   202,    -1,    94,   202,
      -1,    82,   202,    -1,    62,    -1,    69,    62,    -1,    53,
      -1,    69,    69,    62,    -1,    69,    53,    -1,    97,    -1,
      -1,   206,   207,    -1,   220,    -1,   207,   208,    -1,     3,
      -1,     4,    -1,     6,    -1,     5,    -1,     8,    -1,     9,
      -1,    10,    -1,     7,    -1,    12,    -1,    13,    -1,    14,
      -1,    15,    -1,    16,    -1,    17,    -1,    18,    -1,    19,
      -1,    20,    -1,    21,    -1,    22,    -1,    29,    -1,    30,
      -1,    31,    -1,    32,    -1,    33,    -1,    34,    -1,    35,
      -1,    36,    -1,    37,    -1,    38,    -1,    39,    -1,    40,
      -1,    41,    -1,    42,    -1,    46,    -1,    47,    -1,    48,
      -1,    49,    -1,    50,    -1,    51,    -1,    52,    -1,    53,
      -1,    54,    -1,    55,    -1,    57,    -1,    58,    -1,    59,
      -1,    61,    -1,    62,    -1,    63,    -1,    64,    -1,    65,
      -1,    66,    -1,    67,    -1,    68,    -1,    69,    -1,    72,
      -1,    74,    -1,    76,    -1,    77,    -1,    78,    -1,    60,
      -1,    79,    -1,    80,    -1,    81,    -1,    82,    -1,    83,
      -1,    84,    -1,    85,    -1,    86,    -1,    88,    -1,    89,
      -1,    90,    -1,    91,    -1,    92,    -1,    93,    -1,    94,
      -1,    96,    -1,    97,    -1,    98,    -1,    99,    -1,    43,
      -1,    75,    -1,   114,    -1,   115,    -1,   116,    -1,   117,
      -1,   111,    -1,   109,    -1,   110,    -1,   125,    -1,   119,
      -1,   107,    -1,   118,    -1,   112,    -1,   113,    -1,   121,
      -1,   123,    -1,   120,    -1,   104,    -1,   105,    -1,   106,
      -1,   122,    -1,   126,    -1,   108,    -1,   103,   207,   124,
      -1,   220,    -1,   213,    -1,   220,    -1,   211,    -1,   213,
      -1,   211,   104,   213,    -1,   214,    -1,   121,   182,   123,
     212,    -1,    85,   112,   182,   113,   121,   211,   123,    -1,
      54,   112,   182,   113,   121,   211,   123,    -1,    83,   121,
     182,   123,    -1,   125,   212,    -1,   119,   212,    -1,   115,
     212,    -1,   116,   212,    -1,   111,   212,    -1,   212,   116,
     212,    -1,   212,   117,   212,    -1,   212,   118,   212,    -1,
     212,   114,   212,    -1,   212,   115,   212,    -1,   212,   109,
     212,    -1,   212,   111,   212,    -1,   212,    13,   212,    -1,
     212,    14,   212,    -1,   212,    15,   212,    -1,   212,    16,
     212,    -1,   212,    17,   212,    -1,   212,    18,   212,    -1,
     212,    19,   212,    -1,   212,    20,   212,    -1,   212,   108,
     212,   106,   212,    -1,   212,   122,   213,   126,    -1,   212,
     121,   211,   123,    -1,   212,   121,   123,    -1,   212,   120,
     212,    -1,   212,    29,   212,    -1,   121,   211,   123,    -1,
     214,    -1,   121,   182,   123,   213,    -1,    85,   112,   182,
     113,   121,   211,   123,    -1,    54,   112,   182,   113,   121,
     211,   123,    -1,     9,   121,   210,   123,    -1,    68,   121,
     210,   123,    -1,    48,   121,   210,   123,    -1,    49,   121,
     210,   123,    -1,    46,   121,   210,   123,    -1,    81,   121,
     210,   123,    -1,    69,   121,   210,   123,    -1,    94,   121,
     210,   123,    -1,    82,   121,   210,   123,    -1,    62,   121,
     210,   123,    -1,    53,   121,   210,   123,    -1,    83,   121,
     182,   123,    -1,    74,   181,    -1,    74,   181,   121,   210,
     123,    -1,   125,   213,    -1,   119,   213,    -1,   115,   213,
      -1,   116,   213,    -1,   111,   213,    -1,   213,   116,   213,
      -1,   213,   117,   213,    -1,   213,   118,   213,    -1,   213,
     114,   213,    -1,   213,   115,   213,    -1,   213,   109,   213,
      -1,   213,   111,   213,    -1,   213,    13,   213,    -1,   213,
      14,   213,    -1,   213,    15,   213,    -1,   213,    16,   213,
      -1,   213,    17,   213,    -1,   213,    18,   213,    -1,   213,
     112,   213,    -1,   213,   113,   213,    -1,   213,    19,   213,
      -1,   213,    20,   213,    -1,   213,   108,   213,   106,   213,
      -1,   213,   122,   213,   126,    -1,   213,   121,   211,   123,
      -1,   213,   121,   123,    -1,   213,   120,   213,    -1,   213,
      29,   213,    -1,   121,   211,   123,    -1,     4,    -1,    89,
      -1,    61,    -1,     5,    -1,     3,    -1,   219,    -1,     8,
      -1,   216,    -1,   121,   182,   123,   213,    -1,    85,   112,
     182,   113,   121,   211,   123,    -1,    54,   112,   182,   113,
     121,   211,   123,    -1,    83,   121,   182,   123,    -1,    74,
     181,    -1,    74,   181,   121,   210,   123,    -1,   125,   213,
      -1,   119,   213,    -1,   115,   213,    -1,   111,   213,    -1,
     215,   116,   213,    -1,   215,   117,   213,    -1,   215,   118,
     213,    -1,   215,   114,   213,    -1,   215,   115,   213,    -1,
     215,   109,   213,    -1,   215,   111,   213,    -1,   215,    13,
     213,    -1,   215,    14,   213,    -1,   215,    15,   213,    -1,
     215,    16,   213,    -1,   215,    17,   213,    -1,   215,    18,
     213,    -1,   215,   112,   213,    -1,   215,   113,   213,    -1,
     215,    19,   213,    -1,   215,    20,   213,    -1,   215,   108,
     213,   106,   213,    -1,   215,   122,   213,   126,    -1,   215,
     121,   211,   123,    -1,   215,   121,   123,    -1,   215,   120,
     213,    -1,   215,    29,   213,    -1,   121,   211,   123,    -1,
       4,    -1,    89,    -1,    61,    -1,     5,    -1,     3,    -1,
     219,    -1,   218,    -1,   197,   218,    -1,    92,   218,    -1,
       8,    -1,     9,    -1,     6,    -1,   219,     6,    -1,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   381,   381,   382,   386,   393,   394,   395,   399,   400,
     404,   417,   416,   428,   429,   430,   431,   432,   433,   434,
     435,   448,   457,   461,   469,   473,   477,   486,   485,   500,
     504,   508,   519,   523,   527,   531,   535,   539,   543,   547,
     554,   558,   567,   579,   578,   594,   593,   611,   619,   630,
     639,   653,   652,   668,   667,   678,   692,   700,   711,   720,
     735,   734,   757,   756,   781,   780,   811,   810,   826,   825,
     843,   842,   874,   873,   899,   912,   916,   920,   924,   931,
     935,   939,   943,   947,   951,   955,   959,   963,   967,   971,
     975,   979,   983,   987,   991,   995,   999,  1003,  1007,  1011,
    1015,  1019,  1023,  1027,  1031,  1035,  1039,  1043,  1047,  1051,
    1055,  1059,  1063,  1067,  1071,  1075,  1079,  1083,  1090,  1091,
    1096,  1095,  1106,  1107,  1111,  1117,  1126,  1130,  1134,  1140,
    1150,  1154,  1159,  1164,  1172,  1176,  1190,  1195,  1200,  1205,
    1210,  1215,  1220,  1226,  1225,  1247,  1251,  1256,  1260,  1265,
    1273,  1278,  1286,  1290,  1297,  1301,  1308,  1312,  1316,  1320,
    1324,  1331,  1332,  1333,  1337,  1340,  1341,  1342,  1346,  1351,
    1359,  1365,  1375,  1379,  1383,  1387,  1392,  1397,  1402,  1407,
    1415,  1419,  1423,  1427,  1432,  1437,  1442,  1447,  1452,  1458,
    1466,  1470,  1475,  1480,  1485,  1490,  1495,  1504,  1508,  1513,
    1517,  1521,  1525,  1529,  1533,  1549,  1568,  1572,  1577,  1581,
    1585,  1589,  1593,  1597,  1613,  1632,  1636,  1641,  1645,  1661,
    1680,  1686,  1697,  1696,  1721,  1720,  1750,  1751,  1755,  1756,
    1760,  1764,  1768,  1772,  1776,  1780,  1784,  1788,  1792,  1800,
    1799,  1812,  1811,  1823,  1824,  1825,  1829,  1834,  1839,  1844,
    1852,  1859,  1863,  1867,  1875,  1874,  1896,  1900,  1906,  1915,
    1916,  1917,  1921,  1925,  1929,  1933,  1938,  1943,  1948,  1953,
    1958,  1962,  1967,  1976,  1981,  1989,  1993,  1998,  2002,  2007,
    2015,  2025,  2025,  2035,  2036,  2040,  2043,  2046,  2049,  2052,
    2055,  2058,  2061,  2064,  2064,  2064,  2065,  2065,  2065,  2065,
    2066,  2066,  2066,  2066,  2066,  2067,  2067,  2067,  2068,  2068,
    2068,  2068,  2068,  2069,  2069,  2069,  2069,  2069,  2070,  2070,
    2070,  2070,  2070,  2070,  2071,  2071,  2071,  2071,  2071,  2072,
    2072,  2072,  2073,  2073,  2073,  2073,  2074,  2074,  2074,  2075,
    2075,  2075,  2075,  2075,  2076,  2076,  2076,  2076,  2077,  2077,
    2077,  2077,  2077,  2078,  2078,  2078,  2078,  2078,  2078,  2079,
    2079,  2079,  2079,  2079,  2080,  2080,  2081,  2084,  2084,  2084,
    2084,  2084,  2084,  2084,  2084,  2084,  2084,  2084,  2085,  2085,
    2085,  2085,  2085,  2085,  2085,  2085,  2085,  2085,  2086,  2086,
    2090,  2094,  2101,  2105,  2112,  2116,  2123,  2127,  2131,  2135,
    2139,  2143,  2147,  2151,  2163,  2167,  2171,  2175,  2179,  2183,
    2187,  2191,  2195,  2199,  2203,  2207,  2211,  2215,  2219,  2223,
    2227,  2231,  2235,  2239,  2243,  2247,  2251,  2255,  2263,  2267,
    2271,  2275,  2279,  2286,  2292,  2298,  2304,  2310,  2317,  2324,
    2331,  2338,  2344,  2350,  2354,  2358,  2362,  2366,  2370,  2382,
    2386,  2390,  2394,  2398,  2402,  2406,  2410,  2414,  2418,  2422,
    2426,  2430,  2434,  2438,  2442,  2446,  2450,  2454,  2458,  2462,
    2466,  2470,  2474,  2478,  2482,  2489,  2493,  2497,  2501,  2505,
    2509,  2513,  2527,  2531,  2535,  2539,  2543,  2547,  2551,  2555,
    2559,  2563,  2575,  2579,  2583,  2587,  2591,  2595,  2599,  2603,
    2607,  2611,  2615,  2619,  2623,  2627,  2631,  2635,  2639,  2643,
    2647,  2651,  2655,  2659,  2663,  2667,  2671,  2678,  2682,  2686,
    2690,  2694,  2698,  2705,  2713,  2721,  2744,  2748,  2755,  2759,
    2765
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "REAL", "INTEGER", "CHAR_TOK", "STRING",
  "SIMPLE_IDENTIFIER", "IDENTIFIER", "TYPENAME_IDENTIFIER", "SCOPING",
  "TYPEDEFNAME", "ELLIPSIS", "OROR", "ANDAND", "EQCOMPARE", "NECOMPARE",
  "LECOMPARE", "GECOMPARE", "LSHIFT", "RSHIFT", "POINTSAT_STAR",
  "DOT_STAR", "UNARY", "UNARY_NOT", "UNARY_NEGATE", "UNARY_MINUS",
  "UNARY_STAR", "UNARY_REF", "POINTSAT", "SCOPE", "PLUSPLUS", "MINUSMINUS",
  "TIMESEQUAL", "DIVIDEEQUAL", "MODEQUAL", "PLUSEQUAL", "MINUSEQUAL",
  "OREQUAL", "ANDEQUAL", "XOREQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL",
  "TOKENPASTE", "KW_BEGIN_PUBLISH", "KW_BLOCKING", "KW_BOOL", "KW_CATCH",
  "KW_CHAR", "KW_WCHAR_T", "KW_CLASS", "KW_CONST", "KW_DELETE",
  "KW_DOUBLE", "KW_DYNAMIC_CAST", "KW_ELSE", "KW_END_PUBLISH", "KW_ENUM",
  "KW_EXTERN", "KW_EXPLICIT", "KW_PUBLISHED", "KW_FALSE", "KW_FLOAT",
  "KW_FRIEND", "KW_FOR", "KW_GOTO", "KW_IF", "KW_INLINE", "KW_INT",
  "KW_LONG", "KW_LONGLONG", "KW_MAKE_SEQ", "KW_MUTABLE", "KW_NAMESPACE",
  "KW_NEW", "KW_OPERATOR", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC",
  "KW_REGISTER", "KW_RETURN", "KW_SHORT", "KW_SIGNED", "KW_SIZEOF",
  "KW_STATIC", "KW_STATIC_CAST", "KW_STRUCT", "KW_TEMPLATE", "KW_THROW",
  "KW_TRUE", "KW_TRY", "KW_TYPEDEF", "KW_TYPENAME", "KW_UNION",
  "KW_UNSIGNED", "KW_USING", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE",
  "KW_WHILE", "START_CPP", "START_CONST_EXPR", "START_TYPE", "'{'", "','",
  "';'", "':'", "'='", "'?'", "'|'", "'^'", "'&'", "'<'", "'>'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'~'", "'.'", "'('", "'['", "')'", "'}'",
  "'!'", "']'", "$accept", "grammar", "cpp", "constructor_inits",
  "constructor_init", "extern_c", "@1", "declaration",
  "friend_declaration", "@2", "storage_class", "type_like_declaration",
  "multiple_var_declaration", "@3", "@4", "multiple_instance_identifiers",
  "multiple_const_instance_identifiers", "typedef_declaration", "@5", "@6",
  "typedef_instance_identifiers", "typedef_const_instance_identifiers",
  "function_prototype", "@7", "@8", "@9", "@10", "@11", "@12", "@13",
  "function_post", "function_operator", "more_template_declaration",
  "template_declaration", "@14", "template_formal_parameters",
  "template_nonempty_formal_parameters", "template_formal_parameter",
  "template_formal_parameter_type", "instance_identifier", "@15",
  "formal_parameter_list", "formal_parameters",
  "template_parameter_maybe_initialize", "maybe_initialize",
  "maybe_initialize_or_function_body", "structure_init",
  "structure_init_body", "formal_parameter",
  "not_paren_formal_parameter_identifier", "formal_parameter_identifier",
  "empty_instance_identifier", "type", "type_decl", "predefined_type",
  "full_type", "anonymous_struct", "@16", "named_struct", "@17",
  "maybe_class_derivation", "class_derivation", "base_specification",
  "anonymous_enum", "@18", "named_enum", "@19", "enum_body",
  "enum_body_no_trailing_comma", "enum_keyword", "struct_keyword",
  "namespace_declaration", "@20", "using_declaration", "simple_type",
  "simple_int_type", "simple_float_type", "simple_void_type", "code",
  "@21", "code_block", "element", "optional_const_expr",
  "optional_const_expr_comma", "const_expr_comma",
  "no_angle_bracket_const_expr", "const_expr", "const_operand",
  "formal_const_expr", "formal_const_operand", "class_derivation_name",
  "name", "string", "empty", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   123,    44,    59,    58,    61,    63,   124,
      94,    38,    60,    62,    43,    45,    42,    47,    37,   126,
      46,    40,    91,    41,   125,    33,    93
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,   127,   128,   128,   128,   129,   129,   129,   130,   130,
     131,   133,   132,   134,   134,   134,   134,   134,   134,   134,
     134,   134,   134,   134,   134,   134,   134,   136,   135,   137,
     137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
     138,   138,   138,   140,   139,   141,   139,   142,   142,   143,
     143,   145,   144,   146,   144,   144,   147,   147,   148,   148,
     150,   149,   151,   149,   152,   149,   153,   149,   154,   149,
     155,   149,   156,   149,   149,   157,   157,   157,   157,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   159,   159,
     161,   160,   162,   162,   163,   163,   164,   164,   164,   164,
     165,   165,   165,   165,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   167,   166,   168,   168,   168,   168,   168,
     169,   169,   170,   170,   171,   171,   172,   172,   172,   172,
     172,   173,   173,   173,   174,   174,   174,   174,   175,   175,
     175,   175,   176,   176,   176,   176,   176,   176,   176,   176,
     177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
     178,   178,   178,   178,   178,   178,   178,   179,   179,   179,
     179,   179,   179,   179,   179,   179,   180,   180,   180,   180,
     180,   180,   180,   180,   180,   181,   181,   181,   181,   181,
     182,   182,   184,   183,   186,   185,   187,   187,   188,   188,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   191,
     190,   193,   192,   194,   194,   194,   195,   195,   195,   195,
     196,   197,   197,   197,   199,   198,   198,   200,   200,   201,
     201,   201,   202,   202,   202,   202,   202,   202,   202,   202,
     202,   202,   202,   202,   202,   203,   203,   203,   203,   203,
     204,   206,   205,   207,   207,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
     209,   209,   210,   210,   211,   211,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   214,   214,   214,   214,   214,
     214,   214,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
     215,   215,   215,   215,   215,   215,   215,   216,   216,   216,
     216,   216,   216,   217,   217,   217,   218,   218,   219,   219,
     220
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     2,     2,     2,     1,     2,     2,     1,     3,
       4,     0,     5,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     2,     2,     2,     9,     0,     3,     1,
       2,     3,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     3,     3,     0,     4,     0,     5,     2,     4,     2,
       4,     0,     4,     0,     5,     3,     2,     4,     2,     4,
       0,     6,     0,     6,     0,     7,     0,    10,     0,    11,
       0,     8,     0,     9,     1,     1,     1,     4,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       0,     6,     1,     1,     1,     3,     2,     4,     3,     4,
       1,     1,     1,     2,     1,     2,     2,     2,     2,     3,
       4,     3,     3,     0,     6,     1,     1,     1,     3,     2,
       1,     3,     1,     2,     1,     2,     1,     3,     5,     3,
       4,     1,     1,     2,     1,     3,     3,     5,     3,     3,
       4,     1,     1,     1,     1,     2,     2,     2,     3,     4,
       1,     1,     1,     2,     2,     2,     3,     4,     7,     3,
       1,     2,     2,     2,     3,     4,     7,     1,     1,     2,
       1,     1,     1,     1,     2,     2,     1,     1,     2,     1,
       1,     1,     1,     2,     2,     1,     1,     2,     2,     2,
       2,     3,     0,     5,     0,     7,     1,     1,     2,     3,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     0,
       5,     0,     6,     1,     1,     2,     1,     3,     3,     5,
       1,     1,     1,     1,     0,     6,     4,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     2,     2,     1,     2,     1,     3,     2,
       1,     0,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     3,     1,     4,     7,     7,
       4,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     4,     4,     3,     3,     3,     3,     1,     4,
       7,     7,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     2,     5,     2,     2,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     4,
       4,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     7,     7,     4,     2,     5,     2,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     4,     4,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     2,
       0
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short int yydefact[] =
{
       0,   530,     0,     0,     0,   530,     5,   479,   475,   478,
     528,   481,     0,     0,     0,     0,     0,     0,   477,     0,
       0,     0,     0,     0,     0,     0,     0,   476,     0,     0,
       0,     0,     0,     0,     0,     3,   428,   480,   198,   262,
     263,   264,   251,     0,   277,   250,   275,   270,   266,   267,
     265,   269,   252,     0,   253,   268,   280,   530,     4,   200,
     201,   202,   203,     0,     0,   197,   259,   260,   261,     1,
      20,    21,     0,    27,     0,     0,     0,     0,     0,   120,
     530,     0,     6,    15,     7,    18,     0,    13,    40,    14,
      16,    17,    29,   530,   530,   530,   530,   530,     0,   530,
     530,   530,   216,     0,   444,     0,     0,   215,   530,   530,
       0,     0,   530,   450,   448,   449,   447,   198,   262,   263,
     264,   277,   275,   270,   266,   265,   269,   268,     0,     0,
     394,   446,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   529,   530,   279,   276,   266,   272,
     266,   271,   274,   526,   527,   199,   273,     0,   530,   530,
     530,   530,   220,   190,   239,   205,   222,   204,    22,   530,
       0,   530,     0,    25,    24,    23,     0,     0,    19,     0,
     257,    74,   207,    39,     0,    30,    35,    33,    37,     0,
      38,    32,     0,    34,    36,    11,     0,     0,    43,   209,
     210,   211,   212,     0,     0,   206,     0,   393,   392,     0,
       0,     0,     0,     0,     0,     0,     0,   217,   530,   219,
     218,     0,     0,     0,     0,     0,     0,     0,   474,   458,
     459,   460,   461,   462,   463,   466,   467,   473,     0,   456,
     457,   464,   465,   454,   455,   451,   452,   453,   472,   471,
       0,     0,   221,   278,   530,   191,   193,   192,     0,   530,
     530,   241,   530,   530,    28,     0,   530,   254,   530,     0,
       0,    51,   258,    60,    62,    45,    31,     0,   530,   208,
     530,     0,   281,   156,     0,     0,    42,    41,     0,   214,
     213,   432,   436,   434,   435,   442,     0,   441,   433,   438,
       0,   437,   440,   443,     0,   439,   429,   395,     0,   470,
     469,   194,     0,     0,   391,   390,     0,   244,   246,   243,
     530,   530,     0,     0,   227,   226,     0,   256,   530,   131,
     132,     0,     0,     0,     0,   123,   124,   530,   130,   122,
      53,    55,     0,   530,     0,     0,   530,     0,   530,   173,
     174,     0,   530,   530,   530,     0,   172,   530,    64,     0,
     530,     0,     8,     0,   530,     0,     0,     0,     0,     0,
       0,     0,    44,   530,   134,     0,   445,     0,   468,   530,
     195,   240,   245,     0,     0,   223,     0,     0,     0,     0,
     228,   530,     0,     0,   530,   126,   530,   133,   530,     0,
     181,   182,     0,   530,   530,   530,   530,   530,   180,     0,
      52,   530,   521,   517,   520,   530,   146,     0,     0,   519,
       0,     0,     0,   518,     0,     0,     0,     0,     0,     0,
     147,   150,   530,   171,   482,   522,   145,     0,     0,     0,
      46,   530,     0,   530,   175,   177,   176,    70,   530,    12,
     530,   157,   282,   283,   281,     0,   530,   530,     0,   162,
     164,   161,   159,     0,   136,    89,    90,    91,    92,    93,
      94,    97,    98,   113,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   117,   116,   100,    99,
      86,    88,    87,    95,    96,    84,    85,    81,    82,    83,
      80,     0,     0,    79,   135,   138,   137,     0,     0,     0,
     143,   530,     0,    47,   154,     0,     0,     0,   248,   247,
     242,     0,     0,     0,   232,   523,     0,   231,     0,   230,
       0,     0,     0,   530,   229,     0,   255,     0,   530,     0,
     118,   121,   119,   125,   530,   183,   185,   184,     0,     0,
     530,   128,   152,    54,   530,     0,    56,   530,   530,     0,
     487,     0,     0,   492,   491,   490,     0,     0,   489,   530,
     149,     0,   530,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   530,     0,
      49,    72,   178,   530,     0,     0,   285,   286,   288,   287,
     292,   289,   290,   291,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   365,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   345,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   366,   342,   343,   344,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   530,   383,
     384,   385,   376,   388,   372,   373,   371,   378,   379,   367,
     368,   369,   370,   377,   375,   382,   380,   386,   381,   374,
     387,   284,     0,     9,     0,     0,   160,   163,   139,   115,
     114,   142,   141,   155,   530,     0,     0,   431,   430,   530,
       0,   525,   238,   524,   237,   236,   235,   234,   233,   225,
       0,   127,   129,   186,   189,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   153,   396,     0,     0,    58,     0,
       0,   169,   530,     0,   530,     0,     0,     0,   516,    76,
      61,    75,   148,   151,   168,   500,   501,   502,   503,   504,
     505,   508,   509,   515,     0,   498,   499,   506,   507,   496,
     497,   493,   494,   495,   514,   513,     0,     0,     0,    66,
      63,     0,   530,     0,   179,   530,     0,   158,    10,   165,
     530,   166,     0,   140,    48,   196,   249,     0,   530,     0,
       0,     0,   405,   403,   404,   402,     0,     0,   401,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   187,
       0,    57,   155,   170,     0,     0,   486,     0,   483,     0,
       0,   512,   511,    68,   530,    50,     0,   530,    65,   389,
       0,   530,    26,     0,     0,     0,     0,     0,   427,   413,
     414,   415,   416,   417,   418,   419,   420,   426,     0,   411,
     412,   409,   410,   406,   407,   408,   425,   424,     0,     0,
      59,     0,   488,     0,     0,   510,   530,     0,   530,    71,
     167,   144,   530,     0,   400,     0,   397,     0,   423,   422,
       0,     0,    77,     0,     0,   530,    73,   188,     0,     0,
     421,   485,   484,    78,   530,    67,     0,     0,    69,   399,
     398
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     4,     5,   371,   372,    83,   290,    84,    85,   179,
      86,    87,    88,   298,   357,   382,   450,   188,   352,   419,
     420,   563,   207,   353,   356,   460,   874,   916,   613,   812,
     780,   514,   551,    89,   186,   344,   345,   346,   347,   383,
     734,   439,   440,   561,   522,   296,   468,   469,   441,   365,
     417,   172,    57,   208,   104,    58,    59,   272,    60,   273,
     333,   334,   400,    61,   270,    62,   330,   326,   327,    63,
      64,    90,   338,    91,    65,    66,    67,    68,   369,   370,
     462,   721,   323,   216,   217,   764,   130,    36,   443,   444,
     534,   384,    37,   218
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -483
static const short int yypact[] =
{
     223,  -483,  2022,  3004,    19,  2905,  -483,  -483,  -483,  -483,
    -483,  -483,   -85,   -59,   -47,   -37,   -19,    -7,  -483,    -8,
      -6,    27,  3106,    32,    35,    43,    70,  -483,    67,  2022,
    2022,  2022,  2022,  1215,  2022,  2565,  -483,   171,  -483,  -483,
    -483,  -483,  -483,  3156,  -483,  -483,  -483,  -483,  1779,  -483,
     850,   850,  -483,   241,  -483,   850,  -483,   132,  -483,  -483,
    -483,  -483,  -483,    34,    37,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,   112,  -483,   101,    56,   121,   133,   138,  -483,
    -483,    89,  -483,  -483,  -483,  -483,  2346,  -483,  -483,  -483,
    -483,  -483,  -483,  2022,  2022,  2022,  2022,  2022,  3004,  2022,
    2022,  2022,  -483,   241,   135,   241,   241,  -483,  2022,  2022,
    3004,  3004,  2022,    65,    65,    65,    65,   -85,   -59,   -47,
     -37,   -19,    -8,    -6,  1605,  1211,  1401,  1692,   147,   -74,
    2565,    65,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,
    2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,
    2022,  2022,  1500,  2022,  -483,   132,  -483,  -483,  1866,  -483,
     850,  -483,  -483,  -483,  -483,  -483,  -483,   164,   132,   132,
     132,   132,   166,  -483,  -483,   189,  -483,   -62,  -483,  2736,
     241,  -483,   193,  -483,  -483,  -483,   192,  2402,  -483,   241,
    -483,   200,   220,  -483,  3156,   348,  -483,  -483,  -483,  3056,
    -483,  -483,   241,  -483,  -483,  -483,   241,   176,   254,  -483,
    -483,  -483,  -483,    34,    37,  -483,   247,   268,  -483,   263,
     264,   270,   273,   281,   274,   278,   279,  -483,  2022,  -483,
    -483,   285,   288,   294,   291,   298,  2022,  2022,  -483,  2725,
    2756,   788,   788,   478,   478,   144,   144,  -483,  1233,  2771,
    2786,   478,   478,   218,   218,    65,    65,    65,  -483,  -483,
     -24,  2105,   166,  -483,   132,   166,   166,   166,   242,  2022,
     241,  -483,  -483,   316,  -483,   324,  3183,  -483,  2966,  3156,
     176,  -483,  -483,  -483,    23,  -483,   171,  3156,    49,  -483,
    -483,   318,  -483,  -483,   241,  1587,  -483,  -483,    63,   189,
     -62,  -483,  -483,  -483,  -483,  -483,   321,  -483,  -483,  -483,
     314,  -483,  -483,  -483,   323,  -483,    65,  2565,  2022,  -483,
    -483,   166,   325,   319,  2565,  -483,   330,   343,   351,  -483,
     241,  3208,     0,   357,   359,  -483,   241,  -483,  -483,  -483,
    -483,   241,  2269,   241,   354,   360,  -483,   120,  -483,  -483,
    -483,  -483,    63,  1310,   345,    63,  1310,    63,    49,  -483,
    -483,   353,    49,    49,    49,   246,  -483,  3233,  -483,   352,
    -483,   271,  -483,   361,  1674,  1423,   358,    63,  2268,    63,
      63,    63,  -483,     1,  -483,  2022,  -483,  2022,  2565,  1310,
    -483,  -483,   241,  2022,   362,  -483,   226,   418,   773,   272,
    -483,  -483,     0,   371,  3258,   374,   120,  -483,   396,  2966,
    -483,  -483,   373,   120,   120,   120,   120,   -41,  -483,    63,
    -483,     1,  -483,  -483,  -483,   120,  -483,  3156,   379,  -483,
    3106,   380,   383,  -483,  2022,  2022,  2022,  1215,  2022,   385,
      15,  -483,   120,  2582,  -483,   171,  -483,    63,   187,   386,
    -483,     1,   256,    49,   381,   381,   381,  -483,  2022,  -483,
    1310,  -483,  1091,  -483,  -483,   241,  2022,  1674,   378,   402,
    2565,  -483,  -483,    63,   259,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,   389,   387,  -483,  -483,   259,   259,   222,   282,  1587,
    -483,  2022,   411,  -483,  -483,   -13,    -3,   394,   414,  2565,
    -483,   241,   440,   241,  -483,  -483,   440,  -483,   440,  -483,
     440,   440,   440,  3283,  -483,   241,  -483,  3004,   -41,  2458,
    -483,  -483,  -483,  -483,   120,   400,   400,   400,   261,   772,
    2022,  -483,  -483,  -483,     1,   419,  -483,    28,   120,  3004,
     397,  3004,  3004,    65,    65,    65,   401,     8,    65,   477,
    -483,  1405,    28,  2022,  2022,  2022,  2022,  2022,  2022,  2022,
    2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,  2022,
    2022,  2022,  2022,  1761,  2022,   350,   527,   427,   477,   436,
    -483,  -483,   381,  1310,   423,   422,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -483,  -483,   426,  -483,   428,   430,  -483,  1848,   259,  -483,
    -483,  -483,  -483,  1423,  1310,   429,    63,  -483,  -483,   477,
    2022,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
     433,  -483,  -483,   400,   431,   446,   439,   449,   772,   772,
     772,   772,  1215,   772,  2616,  -483,   438,   458,  -483,    63,
    2022,  -483,    28,   452,  2022,   445,   457,  2022,  -483,  -483,
     484,  -483,  -483,  -483,  -483,  2725,  2756,   788,   788,   478,
     478,   144,   144,  -483,  2544,  2771,  2786,   478,   478,   218,
     218,    65,    65,    65,  -483,  -483,   117,  2135,   454,  -483,
     484,    63,  1310,   450,  -483,   477,   967,  -483,  -483,  -483,
    1674,  2565,   459,  -483,  -483,   484,  2565,   475,  1310,  3004,
    3004,  3004,    95,    95,    95,    95,   460,   119,    95,   772,
     772,   772,   772,   772,   772,   772,   772,   772,   772,   772,
     772,   772,   772,   772,   772,   772,   772,  1935,  2022,  -483,
      63,  -483,  2565,  -483,   463,   462,  -483,   465,    65,   466,
    2022,  -483,  -483,  -483,  1310,  -483,   467,   477,   484,  -483,
     473,   477,  -483,   479,   476,   480,   488,   772,  -483,  2741,
    2801,  2080,  2080,  1492,  1492,   185,   185,  -483,  2599,  2909,
    2924,   313,   313,    95,    95,    95,  -483,  -483,   128,  2154,
    -483,  2022,  -483,  2022,    26,  2565,  1310,   482,   477,   484,
    -483,   484,   477,   485,  -483,   487,    95,   772,  -483,  -483,
     129,   150,  -483,   486,   491,   477,   484,   484,  2022,  2022,
    2616,  -483,  -483,  -483,   477,   484,   151,   174,   484,  -483,
    -483
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -483,  -483,  -163,  -483,   145,  -483,  -483,   432,  -483,  -483,
     -57,   207,  -483,  -483,  -483,  -120,  -194,  -483,  -483,  -483,
    -146,  -235,   441,  -483,  -483,  -483,  -483,  -483,  -483,  -483,
    -482,  -483,  -483,   219,  -483,  -483,  -483,   224,   287,  -326,
    -483,  -328,  -483,    83,  -401,  -232,  -464,  -483,    51,  -295,
    -270,  -131,   -42,   447,   205,   -28,   -84,  -483,   -71,  -483,
    -483,  -483,   234,   -70,  -483,   -69,  -483,   309,  -483,    25,
     139,  -483,  -483,  -483,   -11,   265,  -483,  -483,   197,  -483,
     -58,  -483,  -426,   -87,   -27,  -139,    58,    -2,  -483,  -483,
    -312,   424,  -143,    -1
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -225
static const short int yytable[] =
{
       6,   155,   209,   725,    92,   128,   129,   219,   220,   221,
     222,   107,   224,   225,   226,   210,   211,   212,   276,    69,
     565,   231,   232,   187,   262,   235,   421,   580,   449,   448,
     237,   451,   614,   354,   163,   164,    93,   265,   266,   267,
     268,  -224,   163,   164,  -224,   163,   164,   105,   351,   238,
     609,   474,   286,   515,   516,   517,   173,   359,   360,   361,
      35,   527,    94,   452,   163,   164,   559,   454,   455,   456,
     223,   163,   164,   376,    95,   215,   396,   397,   398,    92,
     237,   560,   233,   234,    96,   537,   539,   113,   114,   115,
     116,   237,   131,   564,   140,   735,   399,   163,   164,   319,
     362,   237,    97,   209,   292,    98,   293,   518,   519,   331,
     737,   213,   237,    99,   377,   100,   210,   211,   212,   581,
     738,   605,   520,   521,   847,   260,   810,   367,   410,   411,
     412,   778,   615,   321,   766,   770,   548,   174,   378,   355,
     176,   310,   167,   555,   556,   557,   558,   728,   101,   932,
     560,   523,   285,   108,   173,   567,   109,   288,   612,   181,
     363,   106,   189,   767,   110,   364,   771,   173,   173,   173,
     173,   413,   582,   140,   379,   404,   215,   154,    92,   380,
       6,   784,   111,   168,   381,   151,   152,   153,   112,   566,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     445,   261,   213,   445,   847,   856,   857,   858,   178,   610,
     742,   237,   180,   237,   744,   214,   745,   183,   746,   747,
     748,   414,   237,   237,   163,   164,   415,   350,   543,   184,
     871,   416,   888,   169,   185,   358,   445,   140,   170,   163,
     164,   928,   941,   171,   237,   237,   228,   825,   146,   147,
     148,   149,   150,   173,   151,   152,   153,   348,   325,   329,
     236,     6,   335,   942,   949,    92,    42,   349,   237,   292,
     264,   293,   294,   295,   753,   813,   732,   366,   269,     6,
     163,   164,   271,   606,   316,   317,   277,   950,   772,   851,
     852,   853,   854,   855,   278,   856,   857,   858,   520,   521,
     607,   442,    52,   159,   442,   161,   162,   445,   531,    54,
     166,   283,   532,     1,     2,     3,   214,   324,   606,   329,
      92,   348,   768,   878,   148,   149,   150,     6,   151,   152,
     153,   284,   847,   520,   521,   731,   418,   442,   540,   541,
     542,   549,   446,   375,    10,   446,   880,   366,   525,   297,
     526,   366,   366,   366,   269,   322,    92,   457,   458,   463,
     301,   863,   237,   471,   464,   465,   388,   611,   458,   724,
     520,   521,   524,   560,   754,   568,   302,   303,   446,   159,
     161,   162,   166,   304,   306,   919,   305,   307,   348,   921,
       6,   308,   309,    92,   314,   418,   822,    92,   311,   576,
     577,   312,   418,   418,   418,   418,   562,   313,   442,   107,
     524,   315,   332,   159,   418,   159,   163,   164,   336,   853,
     854,   855,   470,   856,   857,   858,   936,   386,   445,   368,
     937,   418,   385,   421,   387,   390,   389,   392,   163,   164,
     524,   529,   366,   945,   391,   105,   606,   325,   393,   446,
     401,   447,   948,   402,   409,   209,   471,   408,    42,   453,
     445,   520,   521,   808,   473,   545,   461,   165,   210,   211,
     212,   547,   466,    79,   876,   451,   530,   175,   177,   554,
      42,   569,   573,   574,   575,   572,   578,   138,   139,   182,
     883,   571,   726,   458,    52,   190,   727,   140,   579,   608,
     531,    54,   729,   730,   536,   736,   324,   739,   774,   751,
     325,   740,   560,   769,   777,   470,    52,   227,   779,   229,
     230,   732,   531,    54,   564,   533,   533,   533,   215,   442,
     811,   773,    92,   775,   776,   815,   917,   562,   809,   814,
     817,   818,   828,   418,   819,   823,   827,   765,   829,   325,
     830,   831,   860,   524,   859,   864,   524,   418,   866,   106,
     867,   442,   869,   877,   213,   873,   806,   733,   781,   324,
     882,   524,   881,   887,   911,   912,   913,   914,   934,   923,
     918,   445,   146,   147,   148,   149,   150,   920,   151,   152,
     153,   925,   922,   924,   275,   935,   938,   781,   939,   943,
     723,   274,   446,   282,   944,   550,   824,   875,   324,   832,
     833,   834,   835,   861,   838,   910,   289,   552,   280,   406,
     291,   752,   783,   553,   281,   570,   544,   299,   300,   394,
     816,   785,   786,   787,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,   799,   800,   801,   802,   803,
     804,   722,   807,     0,     0,     0,     0,     0,     0,   445,
       0,   533,     0,     0,     0,   533,     0,   533,     0,   533,
     533,   533,     0,     0,     0,   445,     0,   865,   214,     0,
       0,     0,   442,     0,   328,     0,     0,   463,     0,     0,
     889,   890,   891,   892,   893,   894,   895,   896,   897,   898,
     899,   900,   901,   902,   903,   904,   905,   906,   373,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   445,     0,   446,   836,   837,     0,     0,   781,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   926,     0,
       0,     0,     0,     0,   328,     0,   765,   765,   765,   765,
     403,   765,     0,     0,     0,   405,     0,   407,     0,     0,
     442,   524,     0,   445,     0,     7,     8,     9,    10,     0,
      11,   163,   164,     0,     0,   821,   442,     0,   940,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   826,     0,
       0,   884,   885,   886,     0,   136,   137,   138,   139,     0,
       0,   446,     0,     0,   781,     0,   528,   140,     0,   471,
     535,   535,   535,    42,     0,     0,   755,   446,   862,     0,
     908,     0,   442,    18,     0,   868,     0,   765,   765,   765,
     765,   765,   765,   765,   765,   765,   765,   765,   765,   765,
     765,   765,   765,   765,   765,   756,     0,   757,     0,    52,
       0,    27,     0,     0,     0,   531,    54,     0,     0,   538,
       0,     0,     0,   446,   442,     0,   781,     0,   470,     0,
     781,     0,     0,   758,   930,   765,   931,   759,   760,   373,
       0,   761,     0,   762,     0,     0,    39,   763,    40,    41,
     144,   145,   146,   147,   148,   149,   150,     0,   151,   152,
     153,   946,   947,     0,     0,   446,   909,   781,    47,   160,
      49,   781,     0,     0,     0,   765,     0,     0,   915,     0,
       0,    50,    51,     0,   781,     0,     0,     0,     0,     0,
       0,     0,   373,   781,    55,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   741,   535,   743,     0,     0,
     535,     0,   535,     0,   535,   535,   535,     0,     0,   750,
     616,   617,   618,   619,   620,   621,   622,   623,     0,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
       0,     0,     0,     0,     0,     0,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,   645,   646,   647,   648,
     649,     0,     0,   650,   651,   652,   653,   654,   655,   656,
     657,   658,   659,     0,   660,   661,   662,   663,   664,   665,
     666,   667,   668,   669,   670,   671,   672,     0,     0,   673,
       0,   674,   675,   676,   677,   678,   679,   680,   681,   682,
     683,   684,   685,   686,     0,   687,   688,   689,   690,   691,
     692,   693,     0,   694,   695,   696,   697,     0,     0,     0,
     698,   699,   700,   701,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   713,   714,   715,   716,   717,
     718,   879,   719,   720,   616,   617,   618,   619,   620,   621,
     622,   623,     0,   624,   625,   626,   627,   628,   629,   630,
     631,   632,   633,   634,     0,     0,     0,     0,     0,     0,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,     0,     0,   650,   651,   652,
     653,   654,   655,   656,   657,   658,   659,     0,   660,   661,
     662,   663,   664,   665,   666,   667,   668,   669,   670,   671,
     672,     0,     0,   673,     0,   674,   675,   676,   677,   678,
     679,   680,   681,   682,   683,   684,   685,   686,     0,   687,
     688,   689,   690,   691,   692,   693,     0,   694,   695,   696,
     697,     0,     0,     0,   698,   699,   700,   701,   702,   703,
     704,   705,   706,   707,   708,   709,   710,   711,   712,   713,
     714,   715,   716,   717,   718,     0,   719,   720,     7,     8,
       9,    10,     0,    11,   117,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   132,   133,   134,   135,
     136,   137,   138,   139,     0,     0,     0,    39,     0,    40,
      41,   118,   140,   119,   120,    42,    43,     0,   121,    17,
       0,     0,    45,     0,     0,     0,    18,   122,     0,    47,
     160,    49,     0,   123,   124,    49,     0,     0,     0,    22,
       0,     0,    50,    51,     0,     0,   125,   126,    25,     0,
      26,    52,     0,     0,    27,    55,     0,    53,    54,   127,
       0,     0,    56,   422,   423,   424,    10,     0,   425,    38,
       0,     0,   426,     0,     0,     0,    29,     0,     0,     0,
      30,    31,   108,     0,    32,     0,    33,     0,   933,   318,
      34,   141,   142,     0,   143,   144,   145,   146,   147,   148,
     149,   150,     0,   151,   152,   153,    39,     0,    40,    41,
      42,   427,     0,    44,   428,     0,     0,    45,     0,     0,
       0,   429,    46,     0,     0,     0,     0,     0,    47,    48,
      49,     0,     0,     0,   430,     0,     0,     0,     0,     0,
       0,    50,    51,   431,     0,   432,    52,     0,     0,   433,
       0,     0,    53,    54,    55,     0,     0,    56,   422,   423,
     424,    10,     0,   425,    38,     0,     0,   782,     0,     0,
       0,   434,     0,     0,     0,   435,     0,     0,     0,   436,
       0,   437,     0,     0,     0,   438,   132,   133,   134,   135,
     136,   137,   138,   139,     0,     0,     0,    39,     0,    40,
      41,    39,   140,    40,    41,    42,   427,     0,    44,   428,
       0,     0,    45,     0,     0,     0,   429,    46,     0,    47,
     160,    49,     0,    47,    48,    49,     0,     0,     0,   430,
       0,     0,    50,    51,     0,     0,    50,    51,   431,     0,
     432,    52,     0,     0,   433,    55,     0,    53,    54,    55,
       0,     0,    56,     7,     8,     9,    10,     0,    11,    12,
       0,   845,   846,     0,     0,     0,   434,     0,     0,     0,
     435,   847,   109,     0,   436,     0,   437,     0,   472,     0,
     438,   141,   142,     0,   143,   144,   145,   146,   147,   148,
     149,   150,     0,   151,   152,   153,    13,     0,    14,    15,
       0,     0,     0,    16,    17,     0,     0,     0,     0,     0,
       0,    18,    19,     0,     0,     0,     0,     0,    20,    21,
       0,     0,     0,     0,    22,     0,     0,     0,     0,     0,
       0,    23,    24,    25,     0,    26,     0,     0,     0,    27,
       7,     8,     9,    10,    28,    11,    12,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   851,   852,   853,   854,
     855,    29,   856,   857,   858,    30,    31,     0,     0,    32,
       0,    33,     0,   259,     0,    34,     0,     0,     0,     0,
       0,     0,     0,    13,     0,    14,    15,     0,     0,     0,
      16,    17,     0,     0,     0,     0,     0,     0,    18,    19,
       0,    39,     0,    40,    41,    20,    21,     0,   156,     0,
       0,    22,     0,     0,     0,     0,     0,   157,    23,    24,
      25,     0,    26,    47,   158,    49,    27,     7,     8,     9,
      10,    28,    11,    12,     0,     0,    50,    51,     0,     0,
     374,     0,     0,     0,     0,     0,     0,     0,    29,    55,
       0,     0,    30,    31,     0,     0,    32,     0,    33,     0,
       0,     0,    34,     0,     0,     0,     0,     0,     0,     0,
      13,     0,    14,    15,     0,     0,   101,    16,    17,     0,
       0,     0,     0,     0,     0,    18,    19,     0,    39,     0,
      40,    41,    20,    21,     0,     0,     0,     0,    22,     0,
       0,     0,     0,     0,     0,    23,    24,    25,     0,    26,
      47,   160,    49,    27,     7,     8,     9,    10,    28,    11,
      12,     0,     0,    50,    51,     0,     0,   467,     0,     0,
       0,     0,     0,     0,     0,    29,    55,     0,     0,    30,
      31,     0,     0,    32,     0,    33,     0,     0,     0,    34,
       0,     0,     0,     0,     0,     0,     0,    13,     0,    14,
      15,     0,     0,   112,    16,    17,     0,     0,     0,     0,
       0,     0,    18,    19,     0,    39,     0,    40,    41,    20,
      21,     0,   156,     0,     0,    22,     0,     0,     0,     0,
       0,   157,    23,    24,    25,     0,    26,    47,   158,    49,
      27,     7,     8,     9,    10,    28,    11,    12,     0,     0,
      50,    51,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    29,    55,     0,     0,    30,    31,     0,     0,
      32,     0,    33,     0,   805,     0,    34,     0,     0,     0,
       0,     0,     0,     0,    13,     0,    14,    15,     0,     0,
       0,    16,    17,     0,     0,     0,     0,     0,     0,    18,
      19,     0,    39,     0,    40,    41,    20,    21,     0,     0,
       0,     0,    22,     0,     0,     0,     0,     0,   263,    23,
      24,    25,     0,    26,    47,   160,    49,    27,     7,     8,
       9,    10,    28,    11,    12,     0,     0,    50,    51,     0,
       0,   820,     0,     0,     0,     0,     0,     0,     0,    29,
      55,     0,     0,    30,    31,     0,     0,    32,     0,    33,
       0,     0,     0,    34,     0,     0,     0,     0,     0,     0,
       0,    13,     0,    14,    15,     0,     0,     0,    16,    17,
       0,     0,     0,     0,     0,     0,    18,    19,     0,     0,
       0,     0,     0,    20,    21,     0,     0,     0,     0,    22,
       0,     0,     0,     0,     0,     0,    23,    24,    25,     0,
      26,     0,     0,     0,    27,     7,     8,     9,    10,    28,
      11,    12,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
      30,    31,     0,     0,    32,     0,    33,     0,   907,     0,
      34,     0,     0,     0,     0,     0,     0,     0,    13,     0,
      14,    15,     0,     0,     0,    16,    17,     0,     0,     0,
       0,     0,     0,    18,    19,     0,     0,     0,     0,     0,
      20,    21,     0,     0,     0,     0,    22,   843,   844,   845,
     846,     0,     0,    23,    24,    25,     0,    26,     0,   847,
       0,    27,     0,     0,     0,     0,    28,     0,   132,   133,
     134,   135,   136,   137,   138,   139,     0,     0,     0,     0,
       0,     0,     0,    29,   140,     0,     0,    30,    31,     0,
       0,    32,     0,    33,     0,     0,     0,    34,   132,   133,
     134,   135,   136,   137,   138,   139,     0,     0,     0,     0,
       0,     0,     0,     0,   140,     0,     0,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,     0,     0,     0,
       0,     0,     0,   140,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   851,   852,   853,   854,   855,     0,
     856,   857,   858,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   141,   142,     0,   143,   144,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,     0,     0,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   141,   142,     0,   143,   144,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,     0,     0,
       0,   872,   141,   142,     0,   143,   144,   145,   146,   147,
     148,   149,   150,     0,   151,   152,   153,   339,   340,     0,
     929,   475,   476,   477,   478,   479,   480,   481,   482,     0,
       0,     0,     0,     0,     0,     0,     0,   483,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,     0,     0,     0,     0,    39,     0,    40,    41,     0,
     496,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,    46,     0,     0,     0,     0,     0,    47,    48,    49,
       0,     0,   497,     0,     0,     0,     0,     0,     0,     0,
      50,    51,     0,     0,   191,   192,     0,     0,     0,     0,
       0,   343,     0,    55,     0,     0,    56,     0,     0,     0,
       0,     0,   498,     0,     0,   499,     0,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,     0,   511,
     512,   193,    39,   513,    40,    41,    42,   194,     0,    44,
       0,     0,     0,    45,   195,   196,     0,     0,    46,     0,
     191,   192,     0,   197,    47,    48,    49,     0,   198,     0,
       0,   199,     0,     0,     0,   200,     0,    50,    51,     0,
     201,     0,    52,     0,     0,     0,     0,     0,   202,    54,
      55,     0,   203,    56,   204,     0,     0,   193,    39,   205,
      40,    41,    42,   279,     0,    44,     0,     0,     0,    45,
     195,   196,     0,     0,    46,   206,   191,   192,     0,   197,
      47,    48,    49,     0,   198,     0,     0,   199,     0,     0,
       0,   200,     0,    50,    51,     0,   201,     0,    52,     0,
       0,     0,     0,     0,   202,    54,    55,     0,   203,    56,
     204,     0,     0,   193,    39,     0,    40,    41,    42,   194,
       0,    44,     0,     0,     0,    45,   195,   196,     0,     0,
      46,   206,     0,     0,     0,   197,    47,    48,    49,     0,
     198,     0,     0,   199,     0,     0,     0,   200,     0,    50,
      51,     0,   201,     0,    52,     0,     0,     0,     0,     0,
     202,    54,    55,     0,   203,    56,   204,   132,   133,   134,
     135,   136,   137,   138,   139,     0,     0,     0,     0,     0,
       0,     0,     0,   140,     0,     0,     0,   206,   132,   133,
     134,   135,   136,   137,   138,   139,     0,     0,     0,     0,
       0,     0,     0,     0,   140,   583,   584,   585,   586,   587,
     588,   589,   590,     0,     0,     0,     0,     0,     0,     0,
       0,   591,   839,   840,   841,   842,   843,   844,   845,   846,
       0,     0,     0,     0,     0,     0,     0,     0,   847,   839,
     840,   841,   842,   843,   844,   845,   846,     0,     0,     0,
       0,     0,     0,     0,     0,   847,     0,     0,     0,     0,
     870,     0,   141,   142,     0,   143,   144,   145,   146,   147,
     148,   149,   150,     0,   151,   152,   153,     0,     0,     0,
       0,     0,     0,   141,   142,     0,   143,   144,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,     0,     0,
     592,   593,     0,   594,   595,   596,   597,   598,   599,   600,
     601,     0,   602,   603,   604,   927,     0,   848,   849,     0,
     850,     0,     0,   851,   852,   853,   854,   855,     0,   856,
     857,   858,     0,     0,   848,   849,     0,   850,     0,     0,
     851,   852,   853,   854,   855,     0,   856,   857,   858,   133,
     134,   135,   136,   137,   138,   139,     0,     0,     0,     0,
       0,     0,     0,     0,   140,   840,   841,   842,   843,   844,
     845,   846,     0,     0,     0,     0,     0,     0,     0,     0,
     847,   134,   135,   136,   137,   138,   139,     0,     0,     0,
      70,     0,     0,     0,     0,   140,   134,   135,   136,   137,
     138,   139,    71,     0,     0,     0,    72,     0,     0,    73,
     140,   134,   135,   136,   137,   138,   139,    74,     0,    75,
       0,     0,    76,    77,    78,   140,   841,   842,   843,   844,
     845,   846,     0,    79,     0,     0,     0,    80,     0,     0,
     847,    81,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,     0,     0,
     849,     0,   850,     0,     0,   851,   852,   853,   854,   855,
       0,   856,   857,   858,     0,   142,     0,   143,   144,   145,
     146,   147,   148,   149,   150,     0,   151,   152,   153,     0,
       0,     0,   143,   144,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,     0,     0,     0,     0,   144,   145,
     146,   147,   148,   149,   150,    -2,   151,   152,   153,     0,
     849,     0,   850,     0,     0,   851,   852,   853,   854,   855,
       0,   856,   857,   858,   841,   842,   843,   844,   845,   846,
       0,     0,     0,     0,     0,     0,     0,     0,   847,   841,
     842,   843,   844,   845,   846,     0,     0,     0,     0,    70,
       0,     0,     0,   847,     0,     0,     0,     0,     0,     0,
       0,    71,     0,     0,     0,    72,     0,     0,    73,     0,
       0,     0,     0,     0,   339,   340,    74,     0,    75,     0,
       0,    76,    77,    78,     0,     0,     0,     0,     0,     0,
       0,     0,    79,     0,     0,     0,    80,     0,     0,     0,
      81,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    39,    38,    40,    41,   341,   342,     0,    44,
     850,     0,     0,   851,   852,   853,   854,   855,    46,   856,
     857,   858,     0,     0,    47,    48,    49,     0,   851,   852,
     853,   854,   855,     0,   856,   857,   858,    50,    51,     0,
      39,     0,    40,    41,    42,    43,     0,    44,   343,     0,
      55,    45,     0,    56,     0,    38,    46,     0,     0,     0,
       0,     0,    47,    48,    49,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,    51,     0,     0,     0,
      52,     0,     0,     0,     0,     0,    53,    54,    55,     0,
       0,    56,    39,     0,    40,    41,    42,   287,     0,    44,
       0,     0,     0,    45,     0,   102,     0,     0,    46,     0,
       0,     0,     0,     0,    47,    48,    49,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    50,    51,     0,
       0,     0,    52,     0,     0,     0,     0,     0,    53,    54,
      55,     0,    39,    56,    40,    41,    42,     0,     0,    44,
       0,     0,     0,    45,     0,    38,     0,     0,    46,     0,
       0,     0,     0,     0,    47,    48,    49,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    50,    51,     0,
       0,     0,    52,     0,     0,     0,     0,     0,   103,    54,
      55,     0,    39,    56,    40,    41,    42,     0,     0,    44,
       0,     0,     0,    45,     0,     0,     0,     0,    46,     0,
       0,     0,     0,     0,    47,    48,    49,    70,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    50,    51,    71,
       0,     0,    52,    72,     0,     0,    73,     0,    53,    54,
      55,     0,    70,    56,    74,     0,    75,     0,     0,    76,
      77,    78,     0,     0,    71,     0,     0,     0,    72,     0,
      79,    73,     0,     0,    80,     0,     0,    70,    81,    74,
       0,    75,     0,     0,    76,    77,    78,     0,    82,    71,
       0,     0,     0,    72,     0,    79,    73,     0,     0,    80,
       0,     0,    70,    81,    74,     0,    75,   337,     0,    76,
      77,    78,     0,    82,    71,     0,     0,     0,    72,     0,
      79,    73,     0,     0,    80,     0,     0,    70,    81,    74,
       0,    75,   395,     0,    76,    77,    78,     0,    82,    71,
       0,     0,     0,    72,     0,    79,    73,     0,     0,    80,
       0,     0,     0,    81,    74,     0,    75,   459,     0,    76,
      77,    78,     0,    82,     0,     0,     0,     0,     0,     0,
      79,     0,     0,     0,    80,     0,     0,     0,    81,     0,
       0,     0,   546,     0,     0,     0,     0,     0,    82,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   749
};

static const short int yycheck[] =
{
       1,    43,    86,   467,     5,    33,    33,    94,    95,    96,
      97,    22,    99,   100,   101,    86,    86,    86,   181,     0,
     421,   108,   109,    80,   155,   112,   352,    12,   356,   355,
     104,   357,   458,    10,     8,     9,   121,   168,   169,   170,
     171,   103,     8,     9,   106,     8,     9,    22,   280,   123,
     451,   377,   195,   379,   380,   381,    57,     8,     9,    10,
       2,   389,   121,   358,     8,     9,   107,   362,   363,   364,
      98,     8,     9,    10,   121,    86,    76,    77,    78,    80,
     104,   122,   110,   111,   121,   397,   398,    29,    30,    31,
      32,   104,    34,   419,    29,   521,    96,     8,     9,   123,
      51,   104,   121,   187,   103,   112,   105,   106,   107,   272,
     123,    86,   104,   121,    51,   121,   187,   187,   187,   104,
     123,   447,   121,   122,    29,   152,   608,   290,     8,     9,
      10,   123,   460,   264,   560,   107,   406,   103,    75,   116,
     103,   228,    10,   413,   414,   415,   416,   473,   121,   123,
     122,   383,   194,   121,   155,   425,   121,   199,   453,   103,
     111,    22,    73,   564,   121,   116,   567,   168,   169,   170,
     171,    51,   442,    29,   111,   338,   187,     6,   179,   116,
     181,   582,   112,    51,   121,   120,   121,   122,   121,   421,
     132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     353,   153,   187,   356,    29,   120,   121,   122,   106,   451,
     532,   104,   121,   104,   536,    86,   538,   106,   540,   541,
     542,   111,   104,   104,     8,     9,   116,   279,   401,   106,
     123,   121,   123,   111,   106,   287,   389,    29,   116,     8,
       9,   123,   123,   121,   104,   104,   121,   739,   114,   115,
     116,   117,   118,   264,   120,   121,   122,   278,   269,   270,
     123,   272,   273,   123,   123,   276,    50,   278,   104,   103,
     116,   105,   106,   107,   554,   613,     4,   288,   122,   290,
       8,     9,   103,   106,   236,   237,   103,   123,   568,   114,
     115,   116,   117,   118,   112,   120,   121,   122,   121,   122,
     123,   353,    86,    48,   356,    50,    51,   460,    92,    93,
      55,   121,    96,   100,   101,   102,   187,   269,   106,   330,
     331,   342,   564,   815,   116,   117,   118,   338,   120,   121,
     122,   121,    29,   121,   122,   123,   347,   389,    76,    77,
      78,   408,   353,   295,     6,   356,   820,   358,   385,   105,
     387,   362,   363,   364,   122,   123,   367,   121,   122,   370,
     123,   772,   104,   374,   103,   104,   318,   121,   122,   466,
     121,   122,   383,   122,   123,   427,   123,   123,   389,   124,
     125,   126,   127,   123,   113,   877,   123,   123,   409,   881,
     401,   123,   123,   404,   113,   406,   734,   408,   123,   437,
     437,   123,   413,   414,   415,   416,   417,   123,   460,   430,
     421,   123,   106,   158,   425,   160,     8,     9,   104,   116,
     117,   118,   374,   120,   121,   122,   918,   123,   581,   121,
     922,   442,   121,   769,   121,   126,   121,   104,     8,     9,
     451,   393,   453,   935,   124,   430,   106,   458,   107,   460,
     103,   116,   944,   104,   104,   549,   467,   113,    50,   116,
     613,   121,   122,   123,   116,   104,   124,    53,   549,   549,
     549,   107,   121,    87,   812,   811,   124,    63,    64,   116,
      50,   112,   434,   435,   436,   112,   438,    19,    20,    75,
     828,   121,   124,   122,    86,    81,   104,    29,   123,   123,
      92,    93,   123,   126,    96,   104,   458,   123,   121,   547,
     521,   107,   122,   104,   123,   467,    86,   103,    51,   105,
     106,     4,    92,    93,   860,   396,   397,   398,   549,   581,
     104,   569,   543,   571,   572,   123,   874,   548,   121,   126,
     124,   123,   121,   554,   124,   126,   123,   559,   112,   560,
     121,   112,   104,   564,   126,   113,   567,   568,   123,   430,
     113,   613,    88,   123,   549,   121,   603,   519,   579,   521,
     105,   582,   123,   123,   121,   123,   121,   121,   916,   113,
     123,   734,   114,   115,   116,   117,   118,   124,   120,   121,
     122,   113,   123,   123,   180,   123,   121,   608,   121,   123,
     465,   179,   613,   189,   123,   408,   736,   811,   560,   758,
     759,   760,   761,   769,   763,   860,   202,   408,   187,   342,
     206,   548,   581,   409,   187,   430,   402,   213,   214,   330,
     698,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   597,   598,   599,   600,   601,
     602,   464,   604,    -1,    -1,    -1,    -1,    -1,    -1,   812,
      -1,   532,    -1,    -1,    -1,   536,    -1,   538,    -1,   540,
     541,   542,    -1,    -1,    -1,   828,    -1,   774,   549,    -1,
      -1,    -1,   734,    -1,   270,    -1,    -1,   698,    -1,    -1,
     839,   840,   841,   842,   843,   844,   845,   846,   847,   848,
     849,   850,   851,   852,   853,   854,   855,   856,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   874,    -1,   734,   762,   762,    -1,    -1,   739,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   887,    -1,
      -1,    -1,    -1,    -1,   330,    -1,   758,   759,   760,   761,
     336,   763,    -1,    -1,    -1,   341,    -1,   343,    -1,    -1,
     812,   772,    -1,   916,    -1,     3,     4,     5,     6,    -1,
       8,     8,     9,    -1,    -1,   727,   828,    -1,   927,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   740,    -1,
      -1,   829,   830,   831,    -1,    17,    18,    19,    20,    -1,
      -1,   812,    -1,    -1,   815,    -1,   392,    29,    -1,   820,
     396,   397,   398,    50,    -1,    -1,    54,   828,   770,    -1,
     857,    -1,   874,    61,    -1,   777,    -1,   839,   840,   841,
     842,   843,   844,   845,   846,   847,   848,   849,   850,   851,
     852,   853,   854,   855,   856,    83,    -1,    85,    -1,    86,
      -1,    89,    -1,    -1,    -1,    92,    93,    -1,    -1,    96,
      -1,    -1,    -1,   874,   916,    -1,   877,    -1,   820,    -1,
     881,    -1,    -1,   111,   911,   887,   913,   115,   116,   465,
      -1,   119,    -1,   121,    -1,    -1,    46,   125,    48,    49,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   938,   939,    -1,    -1,   916,   858,   918,    68,    69,
      70,   922,    -1,    -1,    -1,   927,    -1,    -1,   870,    -1,
      -1,    81,    82,    -1,   935,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   944,    94,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
     536,    -1,   538,    -1,   540,   541,   542,    -1,    -1,   545,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    -1,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    -1,    -1,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,    -1,    -1,    -1,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    -1,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    -1,    -1,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,    -1,    -1,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    46,    -1,    48,
      49,    46,    29,    48,    49,    50,    51,    -1,    53,    54,
      -1,    -1,    57,    -1,    -1,    -1,    61,    62,    -1,    68,
      69,    70,    -1,    68,    69,    70,    -1,    -1,    -1,    74,
      -1,    -1,    81,    82,    -1,    -1,    81,    82,    83,    -1,
      85,    86,    -1,    -1,    89,    94,    -1,    92,    93,    94,
      -1,    -1,    97,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    12,    -1,    -1,    -1,   111,    -1,    -1,    -1,
     115,   116,   121,    -1,   119,    -1,   121,    -1,   914,   106,
     125,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,    46,    -1,    48,    49,
      50,    51,    -1,    53,    54,    -1,    -1,    57,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    68,    69,
      70,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    82,    83,    -1,    85,    86,    -1,    -1,    89,
      -1,    -1,    92,    93,    94,    -1,    -1,    97,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    12,    -1,    -1,
      -1,   111,    -1,    -1,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,    -1,    -1,    -1,   125,    13,    14,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    46,    -1,    48,
      49,    46,    29,    48,    49,    50,    51,    -1,    53,    54,
      -1,    -1,    57,    -1,    -1,    -1,    61,    62,    -1,    68,
      69,    70,    -1,    68,    69,    70,    -1,    -1,    -1,    74,
      -1,    -1,    81,    82,    -1,    -1,    81,    82,    83,    -1,
      85,    86,    -1,    -1,    89,    94,    -1,    92,    93,    94,
      -1,    -1,    97,     3,     4,     5,     6,    -1,     8,     9,
      -1,    19,    20,    -1,    -1,    -1,   111,    -1,    -1,    -1,
     115,    29,   121,    -1,   119,    -1,   121,    -1,   105,    -1,
     125,   108,   109,    -1,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,    46,    -1,    48,    49,
      -1,    -1,    -1,    53,    54,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    82,    83,    -1,    85,    -1,    -1,    -1,    89,
       3,     4,     5,     6,    94,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
     118,   111,   120,   121,   122,   115,   116,    -1,    -1,   119,
      -1,   121,    -1,   123,    -1,   125,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    48,    49,    -1,    -1,    -1,
      53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      -1,    46,    -1,    48,    49,    68,    69,    -1,    53,    -1,
      -1,    74,    -1,    -1,    -1,    -1,    -1,    62,    81,    82,
      83,    -1,    85,    68,    69,    70,    89,     3,     4,     5,
       6,    94,     8,     9,    -1,    -1,    81,    82,    -1,    -1,
     103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,    94,
      -1,    -1,   115,   116,    -1,    -1,   119,    -1,   121,    -1,
      -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    48,    49,    -1,    -1,   121,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    46,    -1,
      48,    49,    68,    69,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    82,    83,    -1,    85,
      68,    69,    70,    89,     3,     4,     5,     6,    94,     8,
       9,    -1,    -1,    81,    82,    -1,    -1,   103,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   111,    94,    -1,    -1,   115,
     116,    -1,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    48,
      49,    -1,    -1,   121,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    -1,    46,    -1,    48,    49,    68,
      69,    -1,    53,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    62,    81,    82,    83,    -1,    85,    68,    69,    70,
      89,     3,     4,     5,     6,    94,     8,     9,    -1,    -1,
      81,    82,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   111,    94,    -1,    -1,   115,   116,    -1,    -1,
     119,    -1,   121,    -1,   123,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    48,    49,    -1,    -1,
      -1,    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    -1,    46,    -1,    48,    49,    68,    69,    -1,    -1,
      -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    62,    81,
      82,    83,    -1,    85,    68,    69,    70,    89,     3,     4,
       5,     6,    94,     8,     9,    -1,    -1,    81,    82,    -1,
      -1,   103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
      94,    -1,    -1,   115,   116,    -1,    -1,   119,    -1,   121,
      -1,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    48,    49,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,
      -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,    -1,
      85,    -1,    -1,    -1,    89,     3,     4,     5,     6,    94,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,
     115,   116,    -1,    -1,   119,    -1,   121,    -1,   123,    -1,
     125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      48,    49,    -1,    -1,    -1,    53,    54,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,    -1,
      68,    69,    -1,    -1,    -1,    -1,    74,    17,    18,    19,
      20,    -1,    -1,    81,    82,    83,    -1,    85,    -1,    29,
      -1,    89,    -1,    -1,    -1,    -1,    94,    -1,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   111,    29,    -1,    -1,   115,   116,    -1,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    -1,    -1,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,    -1,
      -1,   126,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,     8,     9,    -1,
     126,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    -1,    -1,    -1,    -1,    46,    -1,    48,    49,    -1,
      52,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    -1,    -1,    -1,    -1,    -1,    68,    69,    70,
      -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    82,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    94,    -1,    -1,    97,    -1,    -1,    -1,
      -1,    -1,   104,    -1,    -1,   107,    -1,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    -1,   121,
     122,    45,    46,   125,    48,    49,    50,    51,    -1,    53,
      -1,    -1,    -1,    57,    58,    59,    -1,    -1,    62,    -1,
       8,     9,    -1,    67,    68,    69,    70,    -1,    72,    -1,
      -1,    75,    -1,    -1,    -1,    79,    -1,    81,    82,    -1,
      84,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    -1,    96,    97,    98,    -1,    -1,    45,    46,   103,
      48,    49,    50,    51,    -1,    53,    -1,    -1,    -1,    57,
      58,    59,    -1,    -1,    62,   119,     8,     9,    -1,    67,
      68,    69,    70,    -1,    72,    -1,    -1,    75,    -1,    -1,
      -1,    79,    -1,    81,    82,    -1,    84,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    92,    93,    94,    -1,    96,    97,
      98,    -1,    -1,    45,    46,    -1,    48,    49,    50,    51,
      -1,    53,    -1,    -1,    -1,    57,    58,    59,    -1,    -1,
      62,   119,    -1,    -1,    -1,    67,    68,    69,    70,    -1,
      72,    -1,    -1,    75,    -1,    -1,    -1,    79,    -1,    81,
      82,    -1,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      92,    93,    94,    -1,    96,    97,    98,    13,    14,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    29,    -1,    -1,    -1,   119,    13,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    13,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    29,    13,    14,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    13,
      14,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,
     106,    -1,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,    -1,    -1,
      -1,    -1,    -1,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   106,    -1,   108,   109,    -1,
     111,    -1,    -1,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   108,   109,    -1,   111,    -1,    -1,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,    14,
      15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    29,    14,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      29,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      44,    -1,    -1,    -1,    -1,    29,    15,    16,    17,    18,
      19,    20,    56,    -1,    -1,    -1,    60,    -1,    -1,    63,
      29,    15,    16,    17,    18,    19,    20,    71,    -1,    73,
      -1,    -1,    76,    77,    78,    29,    15,    16,    17,    18,
      19,    20,    -1,    87,    -1,    -1,    -1,    91,    -1,    -1,
      29,    95,    -1,    -1,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     109,    -1,   111,    -1,    -1,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,    -1,   109,    -1,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
      -1,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,    -1,    -1,    -1,    -1,   112,   113,
     114,   115,   116,   117,   118,     0,   120,   121,   122,    -1,
     109,    -1,   111,    -1,    -1,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    29,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    44,
      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    56,    -1,    -1,    -1,    60,    -1,    -1,    63,    -1,
      -1,    -1,    -1,    -1,     8,     9,    71,    -1,    73,    -1,
      -1,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    87,    -1,    -1,    -1,    91,    -1,    -1,    -1,
      95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     105,    -1,    46,     9,    48,    49,    50,    51,    -1,    53,
     111,    -1,    -1,   114,   115,   116,   117,   118,    62,   120,
     121,   122,    -1,    -1,    68,    69,    70,    -1,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,    81,    82,    -1,
      46,    -1,    48,    49,    50,    51,    -1,    53,    92,    -1,
      94,    57,    -1,    97,    -1,     9,    62,    -1,    -1,    -1,
      -1,    -1,    68,    69,    70,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    81,    82,    -1,    -1,    -1,
      86,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    -1,
      -1,    97,    46,    -1,    48,    49,    50,    51,    -1,    53,
      -1,    -1,    -1,    57,    -1,     9,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    -1,    46,    97,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    57,    -1,     9,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    -1,
      -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    92,    93,
      94,    -1,    46,    97,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    57,    -1,    -1,    -1,    -1,    62,    -1,
      -1,    -1,    -1,    -1,    68,    69,    70,    44,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    81,    82,    56,
      -1,    -1,    86,    60,    -1,    -1,    63,    -1,    92,    93,
      94,    -1,    44,    97,    71,    -1,    73,    -1,    -1,    76,
      77,    78,    -1,    -1,    56,    -1,    -1,    -1,    60,    -1,
      87,    63,    -1,    -1,    91,    -1,    -1,    44,    95,    71,
      -1,    73,    -1,    -1,    76,    77,    78,    -1,   105,    56,
      -1,    -1,    -1,    60,    -1,    87,    63,    -1,    -1,    91,
      -1,    -1,    44,    95,    71,    -1,    73,   124,    -1,    76,
      77,    78,    -1,   105,    56,    -1,    -1,    -1,    60,    -1,
      87,    63,    -1,    -1,    91,    -1,    -1,    44,    95,    71,
      -1,    73,   124,    -1,    76,    77,    78,    -1,   105,    56,
      -1,    -1,    -1,    60,    -1,    87,    63,    -1,    -1,    91,
      -1,    -1,    -1,    95,    71,    -1,    73,   124,    -1,    76,
      77,    78,    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      87,    -1,    -1,    -1,    91,    -1,    -1,    -1,    95,    -1,
      -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,   105,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   124
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,   100,   101,   102,   128,   129,   220,     3,     4,     5,
       6,     8,     9,    46,    48,    49,    53,    54,    61,    62,
      68,    69,    74,    81,    82,    83,    85,    89,    94,   111,
     115,   116,   119,   121,   125,   213,   214,   219,     9,    46,
      48,    49,    50,    51,    53,    57,    62,    68,    69,    70,
      81,    82,    86,    92,    93,    94,    97,   179,   182,   183,
     185,   190,   192,   196,   197,   201,   202,   203,   204,     0,
      44,    56,    60,    63,    71,    73,    76,    77,    78,    87,
      91,    95,   105,   132,   134,   135,   137,   138,   139,   160,
     198,   200,   220,   121,   121,   121,   121,   121,   112,   121,
     121,   121,     9,    92,   181,   196,   197,   201,   121,   121,
     121,   112,   121,   213,   213,   213,   213,     9,    46,    48,
      49,    53,    62,    68,    69,    81,    82,    94,   182,   211,
     213,   213,    13,    14,    15,    16,    17,    18,    19,    20,
      29,   108,   109,   111,   112,   113,   114,   115,   116,   117,
     118,   120,   121,   122,     6,   179,    53,    62,    69,   202,
      69,   202,   202,     8,     9,   218,   202,    10,    51,   111,
     116,   121,   178,   220,   103,   218,   103,   218,   106,   136,
     121,   103,   218,   106,   106,   106,   161,   137,   144,    73,
     218,     8,     9,    45,    51,    58,    59,    67,    72,    75,
      79,    84,    92,    96,    98,   103,   119,   149,   180,   183,
     185,   190,   192,   196,   197,   201,   210,   211,   220,   210,
     210,   210,   210,   182,   210,   210,   210,   218,   121,   218,
     218,   210,   210,   182,   182,   210,   123,   104,   123,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   123,
     211,   213,   178,    62,   116,   178,   178,   178,   178,   122,
     191,   103,   184,   186,   134,   218,   129,   103,   112,    51,
     149,   180,   218,   121,   121,   179,   219,    51,   179,   218,
     133,   218,   103,   105,   106,   107,   172,   105,   140,   218,
     218,   123,   123,   123,   123,   123,   113,   123,   123,   123,
     210,   123,   123,   123,   113,   123,   213,   213,   106,   123,
     126,   178,   123,   209,   213,   220,   194,   195,   218,   220,
     193,   129,   106,   187,   188,   220,   104,   124,   199,     8,
       9,    50,    51,    92,   162,   163,   164,   165,   201,   220,
     179,   172,   145,   150,    10,   116,   151,   141,   179,     8,
       9,    10,    51,   111,   116,   176,   220,   129,   121,   205,
     206,   130,   131,   218,   103,   213,    10,    51,    75,   111,
     116,   121,   142,   166,   218,   121,   123,   121,   213,   121,
     126,   124,   104,   107,   194,   124,    76,    77,    78,    96,
     189,   103,   104,   218,   129,   218,   165,   218,   113,   104,
       8,     9,    10,    51,   111,   116,   121,   177,   220,   146,
     147,   166,     3,     4,     5,     8,    12,    51,    54,    61,
      74,    83,    85,    89,   111,   115,   119,   121,   125,   168,
     169,   175,   179,   215,   216,   219,   220,   116,   166,   168,
     143,   166,   176,   116,   176,   176,   176,   121,   122,   124,
     152,   124,   207,   220,   103,   104,   121,   103,   173,   174,
     213,   220,   105,   116,   166,    13,    14,    15,    16,    17,
      18,    19,    20,    29,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    52,    74,   104,   107,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   121,   122,   125,   158,   166,   166,   166,   106,   107,
     121,   122,   171,   172,   220,   211,   211,   168,   218,   213,
     124,    92,    96,   197,   217,   218,    96,   217,    96,   217,
      76,    77,    78,   129,   189,   104,   124,   107,   177,   137,
     138,   159,   160,   164,   116,   177,   177,   177,   177,   107,
     122,   170,   220,   148,   166,   171,   172,   177,   179,   112,
     181,   121,   112,   213,   213,   213,   182,   211,   213,   123,
      12,   104,   177,    13,    14,    15,    16,    17,    18,    19,
      20,    29,   108,   109,   111,   112,   113,   114,   115,   116,
     117,   118,   120,   121,   122,   166,   106,   123,   123,   171,
     172,   121,   176,   155,   209,   168,     3,     4,     5,     6,
       7,     8,     9,    10,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    72,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    88,    89,    90,
      91,    92,    93,    94,    96,    97,    98,    99,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   125,
     126,   208,   205,   131,   210,   173,   124,   104,   166,   123,
     126,   123,     4,   213,   167,   209,   104,   123,   123,   123,
     107,   218,   217,   218,   217,   217,   217,   217,   217,   124,
     218,   182,   170,   177,   123,    54,    83,    85,   111,   115,
     116,   119,   121,   125,   212,   214,   209,   171,   172,   104,
     107,   171,   177,   182,   121,   182,   182,   123,   123,    51,
     157,   220,    12,   175,   171,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   213,   213,   213,   213,   213,
     213,   213,   213,   213,   213,   123,   211,   213,   123,   121,
     157,   104,   156,   168,   126,   123,   207,   124,   123,   124,
     103,   213,   168,   126,   142,   157,   213,   123,   121,   112,
     121,   112,   212,   212,   212,   212,   182,   211,   212,    13,
      14,    15,    16,    17,    18,    19,    20,    29,   108,   109,
     111,   114,   115,   116,   117,   118,   120,   121,   122,   126,
     104,   147,   213,   171,   113,   210,   123,   113,   213,    88,
     106,   123,   126,   121,   153,   143,   168,   123,   157,   124,
     173,   123,   105,   168,   182,   182,   182,   123,   123,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   123,   211,   213,
     148,   121,   123,   121,   121,   213,   154,   168,   123,   157,
     124,   157,   123,   113,   123,   113,   212,   106,   123,   126,
     211,   211,   123,   218,   168,   123,   157,   157,   121,   121,
     212,   123,   123,   123,   123,   157,   211,   211,   157,   123,
     123
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, &yylloc)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Type, Value, Location);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
  (void) yylocationp;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  fprintf (yyoutput, ": ");

# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;
  (void) yylocationp;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
YYLTYPE yylloc;

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  register short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended. */
  YYLTYPE yyerror_range[2];

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;
#if YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 0;
#endif


  yyvsp[0] = yylval;
    yylsp[0] = yylloc;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
  *++yylsp = yylloc;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, yylsp - yylen, yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 3:
#line 383 "cppBison.yxx"
    {
  current_expr = (yyvsp[0].u.expr);
}
    break;

  case 4:
#line 387 "cppBison.yxx"
    {
  current_type = (yyvsp[0].u.type);
}
    break;

  case 10:
#line 405 "cppBison.yxx"
    {
  delete (yyvsp[-1].u.expr);
}
    break;

  case 11:
#line 417 "cppBison.yxx"
    {
  push_storage_class((current_storage_class & ~CPPInstance::SC_c_binding) | 
                     ((yyvsp[-1].u.integer) & CPPInstance::SC_c_binding));
}
    break;

  case 12:
#line 422 "cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 20:
#line 436 "cppBison.yxx"
    {
  if (publish_nest_level != 0) {
    yyerror("Unclosed __begin_publish", publish_loc);
    publish_nest_level = 0;
    current_scope->set_current_vis(V_public);
  }

  publish_previous = current_scope->get_current_vis();
  publish_loc = (yylsp[0]);
  publish_nest_level++;
  current_scope->set_current_vis(V_published);
}
    break;

  case 21:
#line 449 "cppBison.yxx"
    {
  if (publish_nest_level != 1) {
    yyerror("Unmatched __end_publish", (yylsp[0]));
  } else {
    current_scope->set_current_vis(publish_previous);
  }
  publish_nest_level = 0;
}
    break;

  case 22:
#line 458 "cppBison.yxx"
    {
  current_scope->set_current_vis(V_published);
}
    break;

  case 23:
#line 462 "cppBison.yxx"
    {
  if (publish_nest_level > 0) {
    current_scope->set_current_vis(V_published);
  } else {
    current_scope->set_current_vis(V_public);
  }
}
    break;

  case 24:
#line 470 "cppBison.yxx"
    {
  current_scope->set_current_vis(V_protected);
}
    break;

  case 25:
#line 474 "cppBison.yxx"
    {
  current_scope->set_current_vis(V_private);
}
    break;

  case 26:
#line 478 "cppBison.yxx"
    {
  CPPMakeSeq *make_seq = new CPPMakeSeq((yyvsp[-6].u.identifier)->get_simple_name(), (yyvsp[-4].u.identifier)->get_simple_name(), (yyvsp[-2].u.identifier)->get_simple_name(), (yylsp[-8]).file);
  current_scope->add_declaration(make_seq, global_scope, current_lexer, (yylsp[-8]));
}
    break;

  case 27:
#line 486 "cppBison.yxx"
    {
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("temp"),
                                     V_public);
  push_scope(new_scope);
}
    break;

  case 28:
#line 492 "cppBison.yxx"
    {
  delete current_scope;
  pop_scope();
}
    break;

  case 29:
#line 501 "cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 30:
#line 505 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_extern;
}
    break;

  case 31:
#line 509 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-2].u.integer) | (int)CPPInstance::SC_extern;
  if ((yyvsp[0].str) == "C") {
    (yyval.u.integer) |= (int)CPPInstance::SC_c_binding;
  } else if ((yyvsp[0].str) == "C++") {
    (yyval.u.integer) &= ~(int)CPPInstance::SC_c_binding;
  } else {
    yywarning("Ignoring unknown linkage type \"" + (yyvsp[0].str) + "\"", (yylsp[0]));
  }
}
    break;

  case 32:
#line 520 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_static;
}
    break;

  case 33:
#line 524 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_inline;
}
    break;

  case 34:
#line 528 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_virtual;
}
    break;

  case 35:
#line 532 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_explicit;
}
    break;

  case 36:
#line 536 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_volatile;
}
    break;

  case 37:
#line 540 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_mutable;
}
    break;

  case 38:
#line 544 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_register;
}
    break;

  case 39:
#line 548 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-1].u.integer) | (int)CPPInstance::SC_blocking;
}
    break;

  case 40:
#line 555 "cppBison.yxx"
    {
  /* multiple_var_declaration adds itself to the scope. */
}
    break;

  case 41:
#line 559 "cppBison.yxx"
    {
  // We don't really care about the storage class here.  In fact, it's
  // not actually legal to define a class or struct using a particular
  // storage class, but we require it just to help yacc out in its
  // parsing.

  current_scope->add_declaration((yyvsp[-1].u.decl), global_scope, current_lexer, (yylsp[-1]));
}
    break;

  case 42:
#line 568 "cppBison.yxx"
    {
  if ((yyvsp[-1].u.instance) != (CPPInstance *)NULL) {
    (yyvsp[-1].u.instance)->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
    current_scope->add_declaration((yyvsp[-1].u.instance), global_scope, current_lexer, (yylsp[-1]));
    (yyvsp[-1].u.instance)->set_initializer((yyvsp[0].u.expr));
  }
}
    break;

  case 43:
#line 579 "cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
    break;

  case 44:
#line 590 "cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 45:
#line 594 "cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = (yyvsp[0].u.type);
  push_storage_class((yyvsp[-2].u.integer));
}
    break;

  case 46:
#line 601 "cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 47:
#line 612 "cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
    break;

  case 48:
#line 620 "cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
    break;

  case 49:
#line 631 "cppBison.yxx"
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
}
    break;

  case 50:
#line 640 "cppBison.yxx"
    {
  (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-3]));
}
    break;

  case 51:
#line 653 "cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  if ((yyvsp[0].u.decl)->as_type_declaration()) {
    current_type = (yyvsp[0].u.decl)->as_type_declaration()->_type;
  } else {
    current_type = (yyvsp[0].u.decl)->as_type();
  }
  push_storage_class((yyvsp[-1].u.integer));
}
    break;

  case 52:
#line 664 "cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 53:
#line 668 "cppBison.yxx"
    {
  // We don't need to push/pop type, because we can't nest
  // multiple_var_declarations.
  current_type = (yyvsp[0].u.type);
  push_storage_class((yyvsp[-2].u.integer));
}
    break;

  case 54:
#line 675 "cppBison.yxx"
    {
  pop_storage_class();
}
    break;

  case 55:
#line 679 "cppBison.yxx"
    {
  if ((yyvsp[-1].u.instance) != (CPPDeclaration *)NULL) {
    CPPInstance *inst = (yyvsp[-1].u.instance)->as_instance();
    if (inst != (CPPInstance *)NULL) {
      inst->_storage_class |= (current_storage_class | (yyvsp[-2].u.integer));
      current_scope->add_declaration(inst, global_scope, current_lexer, (yylsp[-1]));
      current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[-1]));
    }
  }
}
    break;

  case 56:
#line 693 "cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[-1]));
}
    break;

  case 57:
#line 701 "cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[-3]));
}
    break;

  case 58:
#line 712 "cppBison.yxx"
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-1].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[-1]));
}
    break;

  case 59:
#line 721 "cppBison.yxx"
    {
  (yyvsp[-3].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance(current_type, (yyvsp[-3].u.inst_ident),
                                      current_storage_class,
                                      (yylsp[-3]).file);
  inst->set_initializer((yyvsp[-2].u.expr));
  current_scope->add_declaration(new CPPTypedef(inst, current_scope == global_scope), global_scope, current_lexer, (yylsp[-3]));
}
    break;

  case 60:
#line 735 "cppBison.yxx"
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 61:
#line 739 "cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
    break;

  case 62:
#line 757 "cppBison.yxx"
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 63:
#line 761 "cppBison.yxx"
    {
  pop_scope();
  CPPType *type;
  if ((yyvsp[-5].u.identifier)->get_simple_name() == current_scope->get_simple_name()) {
    // This is a constructor, and has no return.
    type = new CPPSimpleType(CPPSimpleType::T_void);
  } else {
    // This isn't a constructor, so it has an implicit return type of
    // int.
    type = new CPPSimpleType(CPPSimpleType::T_int);
  }

  CPPInstanceIdentifier *ii = new CPPInstanceIdentifier((yyvsp[-5].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
}
    break;

  case 64:
#line 781 "cppBison.yxx"
    {
  push_scope((yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope));
}
    break;

  case 65:
#line 785 "cppBison.yxx"
    {
  pop_scope();
  if ((yyvsp[-5].u.identifier)->is_scoped()) {
    yyerror("Invalid destructor name: ~" + (yyvsp[-5].u.identifier)->get_fully_scoped_name(), (yylsp[-5]));
  } else {
    CPPIdentifier *ident = 
      new CPPIdentifier("~" + (yyvsp[-5].u.identifier)->get_simple_name(), (yylsp[-5]).file);
    delete (yyvsp[-5].u.identifier);

    CPPType *type;
    type = new CPPSimpleType(CPPSimpleType::T_void);
    
    CPPInstanceIdentifier *ii = new CPPInstanceIdentifier(ident);
    ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));

    (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-5]).file);
  }
}
    break;

  case 66:
#line 811 "cppBison.yxx"
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 67:
#line 815 "cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[-9].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-6].u.inst_ident);
  ii->add_modifier(IIT_pointer);
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-9]).file);
}
    break;

  case 68:
#line 826 "cppBison.yxx"
    {
  push_scope((yyvsp[-2].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 69:
#line 830 "cppBison.yxx"
    {
  pop_scope();
  CPPType *type = (yyvsp[-10].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);

  CPPInstanceIdentifier *ii = (yyvsp[-6].u.inst_ident);
  ii->add_scoped_pointer_modifier((yyvsp[-8].u.identifier));
  ii->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  (yyval.u.instance) = new CPPInstance(type, ii, 0, (yylsp[-10]).file);
}
    break;

  case 70:
#line 843 "cppBison.yxx"
    {
  if ((yyvsp[-3].u.identifier) != NULL) {
    push_scope((yyvsp[-3].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 71:
#line 849 "cppBison.yxx"
    {
  if ((yyvsp[-7].u.identifier) != NULL) {
    pop_scope();
  }

  // We use formal_parameter_identifier, because that can match a type
  // name with or without an identifier, but especially without, which
  // is what follows the keyword "operator" in a typecast function.
  // As an added bonus, the type of the formal_parameter will be the
  // typecast type, i.e. the return type of the typecast function.

  // We give typecast operators the name "operator typecast <name>",
  // where <name> is a simple name of the type to be typecast.  Use
  // the method's return type to determine the full type description.
  string name = "operator typecast " + (yyvsp[-6].u.type)->get_simple_name();
  CPPIdentifier *ident = (yyvsp[-7].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier(name, (yylsp[-7]).file);
  } else {
    ident->add_name(name);
  }
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
    break;

  case 72:
#line 874 "cppBison.yxx"
    {
  if ((yyvsp[-4].u.identifier) != NULL) {
    push_scope((yyvsp[-4].u.identifier)->get_scope(current_scope, global_scope));
  }
}
    break;

  case 73:
#line 880 "cppBison.yxx"
    {
  if ((yyvsp[-8].u.identifier) != NULL) {
    pop_scope();
  }

  CPPIdentifier *ident = (yyvsp[-8].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator typecast", (yylsp[-8]).file);
  } else {
    ident->add_name("operator typecast");
  }
  (yyvsp[-5].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = CPPInstance::make_typecast_function
    (new CPPInstance((yyvsp[-6].u.type), (yyvsp[-5].u.inst_ident), 0, (yylsp[-5]).file), ident, (yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
    break;

  case 74:
#line 900 "cppBison.yxx"
    {
  CPPDeclaration *decl = 
    (yyvsp[0].u.identifier)->find_symbol(current_scope, global_scope, current_lexer);
  if (decl != (CPPDeclaration *)NULL) {
    (yyval.u.instance) = decl->as_instance();
  } else {
    (yyval.u.instance) = (CPPInstance *)NULL;
  }
}
    break;

  case 75:
#line 913 "cppBison.yxx"
    {
  (yyval.u.integer) = 0;
}
    break;

  case 76:
#line 917 "cppBison.yxx"
    {
  (yyval.u.integer) = (int)CPPFunctionType::F_const_method;
}
    break;

  case 77:
#line 921 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-3].u.integer);
}
    break;

  case 78:
#line 925 "cppBison.yxx"
    {
  (yyval.u.integer) = (yyvsp[-4].u.integer);
}
    break;

  case 79:
#line 932 "cppBison.yxx"
    {
  (yyval.str) = "!";
}
    break;

  case 80:
#line 936 "cppBison.yxx"
    {
  (yyval.str) = "~";
}
    break;

  case 81:
#line 940 "cppBison.yxx"
    {
  (yyval.str) = "*";
}
    break;

  case 82:
#line 944 "cppBison.yxx"
    {
  (yyval.str) = "/";
}
    break;

  case 83:
#line 948 "cppBison.yxx"
    {
  (yyval.str) = "%";
}
    break;

  case 84:
#line 952 "cppBison.yxx"
    {
  (yyval.str) = "+";
}
    break;

  case 85:
#line 956 "cppBison.yxx"
    {
  (yyval.str) = "-";
}
    break;

  case 86:
#line 960 "cppBison.yxx"
    {
  (yyval.str) = "|";
}
    break;

  case 87:
#line 964 "cppBison.yxx"
    {
  (yyval.str) = "&";
}
    break;

  case 88:
#line 968 "cppBison.yxx"
    {
  (yyval.str) = "^";
}
    break;

  case 89:
#line 972 "cppBison.yxx"
    {
  (yyval.str) = "||";
}
    break;

  case 90:
#line 976 "cppBison.yxx"
    {
  (yyval.str) = "&&";
}
    break;

  case 91:
#line 980 "cppBison.yxx"
    {
  (yyval.str) = "==";
}
    break;

  case 92:
#line 984 "cppBison.yxx"
    {
  (yyval.str) = "!=";
}
    break;

  case 93:
#line 988 "cppBison.yxx"
    {
  (yyval.str) = "<=";
}
    break;

  case 94:
#line 992 "cppBison.yxx"
    {
  (yyval.str) = ">=";
}
    break;

  case 95:
#line 996 "cppBison.yxx"
    {
  (yyval.str) = "<";
}
    break;

  case 96:
#line 1000 "cppBison.yxx"
    {
  (yyval.str) = ">";
}
    break;

  case 97:
#line 1004 "cppBison.yxx"
    {
  (yyval.str) = "<<";
}
    break;

  case 98:
#line 1008 "cppBison.yxx"
    {
  (yyval.str) = ">>";
}
    break;

  case 99:
#line 1012 "cppBison.yxx"
    {
  (yyval.str) = "=";
}
    break;

  case 100:
#line 1016 "cppBison.yxx"
    {
  (yyval.str) = ",";
}
    break;

  case 101:
#line 1020 "cppBison.yxx"
    {
  (yyval.str) = "++";
}
    break;

  case 102:
#line 1024 "cppBison.yxx"
    {
  (yyval.str) = "--";
}
    break;

  case 103:
#line 1028 "cppBison.yxx"
    {
  (yyval.str) = "*=";
}
    break;

  case 104:
#line 1032 "cppBison.yxx"
    {
  (yyval.str) = "/=";
}
    break;

  case 105:
#line 1036 "cppBison.yxx"
    {
  (yyval.str) = "%=";
}
    break;

  case 106:
#line 1040 "cppBison.yxx"
    {
  (yyval.str) = "+=";
}
    break;

  case 107:
#line 1044 "cppBison.yxx"
    {
  (yyval.str) = "-=";
}
    break;

  case 108:
#line 1048 "cppBison.yxx"
    {
  (yyval.str) = "|=";
}
    break;

  case 109:
#line 1052 "cppBison.yxx"
    {
  (yyval.str) = "&=";
}
    break;

  case 110:
#line 1056 "cppBison.yxx"
    {
  (yyval.str) = "^=";
}
    break;

  case 111:
#line 1060 "cppBison.yxx"
    {
  (yyval.str) = "<<=";
}
    break;

  case 112:
#line 1064 "cppBison.yxx"
    {
  (yyval.str) = ">>=";
}
    break;

  case 113:
#line 1068 "cppBison.yxx"
    {
  (yyval.str) = "->";
}
    break;

  case 114:
#line 1072 "cppBison.yxx"
    {
  (yyval.str) = "[]";
}
    break;

  case 115:
#line 1076 "cppBison.yxx"
    {
  (yyval.str) = "()";
}
    break;

  case 116:
#line 1080 "cppBison.yxx"
    {
  (yyval.str) = "new";
}
    break;

  case 117:
#line 1084 "cppBison.yxx"
    {
  (yyval.str) = "delete";
}
    break;

  case 120:
#line 1096 "cppBison.yxx"
    {
  push_scope(new CPPTemplateScope(current_scope));
}
    break;

  case 121:
#line 1100 "cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 124:
#line 1112 "cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
    break;

  case 125:
#line 1118 "cppBison.yxx"
    {
  CPPTemplateScope *ts = current_scope->as_template_scope();
  assert(ts != NULL);
  ts->add_template_parameter((yyvsp[0].u.decl));
}
    break;

  case 126:
#line 1127 "cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[0].u.identifier)));
}
    break;

  case 127:
#line 1131 "cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPClassTemplateParameter((yyvsp[-2].u.identifier), (yyvsp[0].u.type)));
}
    break;

  case 128:
#line 1135 "cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 129:
#line 1141 "cppBison.yxx"
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  inst->set_initializer((yyvsp[0].u.expr));
  (yyval.u.decl) = inst;
}
    break;

  case 130:
#line 1151 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
    break;

  case 131:
#line 1155 "cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[0].u.identifier)->get_fully_scoped_name(), (yylsp[0]));
  (yyval.u.type) = CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
}
    break;

  case 132:
#line 1160 "cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
    break;

  case 133:
#line 1165 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
    break;

  case 134:
#line 1173 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
    break;

  case 135:
#line 1177 "cppBison.yxx"
    {
  // For an operator function.  We implement this simply by building a
  // ficticious name for the function; in other respects it's just
  // like a regular function.
  CPPIdentifier *ident = (yyvsp[-1].u.identifier);
  if (ident == NULL) {
    ident = new CPPIdentifier("operator "+(yyvsp[0].str), (yylsp[0]).file);
  } else {
    ident->_names.push_back("operator "+(yyvsp[0].str));
  }

  (yyval.u.inst_ident) = new CPPInstanceIdentifier(ident);
}
    break;

  case 136:
#line 1191 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 137:
#line 1196 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 138:
#line 1201 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 139:
#line 1206 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
    break;

  case 140:
#line 1211 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
    break;

  case 141:
#line 1216 "cppBison.yxx"
    {
  // bitfield definition.  We ignore the bitfield for now.
  (yyval.u.inst_ident) = (yyvsp[-2].u.inst_ident);
}
    break;

  case 142:
#line 1221 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 143:
#line 1226 "cppBison.yxx"
    {
  push_scope((yyvsp[-1].u.inst_ident)->get_scope(current_scope, global_scope));
}
    break;

  case 144:
#line 1230 "cppBison.yxx"
    {
  pop_scope();
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  if ((yyvsp[-2].u.param_list)->is_parameter_expr() && (yyvsp[0].u.integer) == 0) {
    // Oops, this must have been an instance declaration with a
    // parameter list, not a function prototype.
    (yyval.u.inst_ident)->add_initializer_modifier((yyvsp[-2].u.param_list));

  } else {
    // This was (probably) a function prototype.
    (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
  }
}
    break;

  case 145:
#line 1248 "cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
}
    break;

  case 146:
#line 1252 "cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 147:
#line 1257 "cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[0].u.param_list);
}
    break;

  case 148:
#line 1261 "cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 149:
#line 1266 "cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[-1].u.param_list);
  (yyval.u.param_list)->_includes_ellipsis = true;
}
    break;

  case 150:
#line 1274 "cppBison.yxx"
    {
  (yyval.u.param_list) = new CPPParameterList;
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
    break;

  case 151:
#line 1279 "cppBison.yxx"
    {
  (yyval.u.param_list) = (yyvsp[-2].u.param_list);
  (yyval.u.param_list)->_parameters.push_back((yyvsp[0].u.instance));
}
    break;

  case 152:
#line 1287 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 153:
#line 1291 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 154:
#line 1298 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 155:
#line 1302 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 156:
#line 1309 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 157:
#line 1313 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 158:
#line 1317 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 159:
#line 1321 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
    break;

  case 160:
#line 1325 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 164:
#line 1338 "cppBison.yxx"
    {
}
    break;

  case 168:
#line 1347 "cppBison.yxx"
    {
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
    break;

  case 169:
#line 1352 "cppBison.yxx"
    {
  yywarning("Not a type: " + (yyvsp[-2].u.identifier)->get_fully_scoped_name(), (yylsp[-2]));
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_unknown));
  (yyval.u.instance) = new CPPInstance(type, (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
    break;

  case 170:
#line 1360 "cppBison.yxx"
    {
  (yyvsp[-1].u.inst_ident)->add_modifier(IIT_const);
  (yyval.u.instance) = new CPPInstance((yyvsp[-2].u.type), (yyvsp[-1].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
    break;

  case 171:
#line 1366 "cppBison.yxx"
    {
  CPPType *type =
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_parameter));
  (yyval.u.instance) = new CPPInstance(type, "expr");
  (yyval.u.instance)->set_initializer((yyvsp[0].u.expr));
}
    break;

  case 172:
#line 1376 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 173:
#line 1380 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
    break;

  case 174:
#line 1384 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
    break;

  case 175:
#line 1388 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 176:
#line 1393 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 177:
#line 1398 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 178:
#line 1403 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
    break;

  case 179:
#line 1408 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
    break;

  case 180:
#line 1416 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 181:
#line 1420 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
    break;

  case 182:
#line 1424 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((yyvsp[0].u.identifier));
}
    break;

  case 183:
#line 1428 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 184:
#line 1433 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 185:
#line 1438 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 186:
#line 1443 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
    break;

  case 187:
#line 1448 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
    break;

  case 188:
#line 1453 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
    break;

  case 189:
#line 1459 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-1].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
}
    break;

  case 190:
#line 1467 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = new CPPInstanceIdentifier((CPPIdentifier *)NULL);
}
    break;

  case 191:
#line 1471 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_const);
}
    break;

  case 192:
#line 1476 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_pointer);
}
    break;

  case 193:
#line 1481 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_reference);
}
    break;

  case 194:
#line 1486 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[0].u.inst_ident);
  (yyval.u.inst_ident)->add_scoped_pointer_modifier((yyvsp[-2].u.identifier));
}
    break;

  case 195:
#line 1491 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-3].u.inst_ident);
  (yyval.u.inst_ident)->add_array_modifier((yyvsp[-1].u.expr));
}
    break;

  case 196:
#line 1496 "cppBison.yxx"
    {
  (yyval.u.inst_ident) = (yyvsp[-5].u.inst_ident);
  (yyval.u.inst_ident)->add_modifier(IIT_paren);
  (yyval.u.inst_ident)->add_func_modifier((yyvsp[-2].u.param_list), (yyvsp[0].u.integer));
}
    break;

  case 197:
#line 1505 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
    break;

  case 198:
#line 1509 "cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
    break;

  case 199:
#line 1514 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
    break;

  case 200:
#line 1518 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
    break;

  case 201:
#line 1522 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.struct_type));
}
    break;

  case 202:
#line 1526 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
    break;

  case 203:
#line 1530 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.enum_type));
}
    break;

  case 204:
#line 1534 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 205:
#line 1550 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 206:
#line 1569 "cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.simple_type));
}
    break;

  case 207:
#line 1573 "cppBison.yxx"
    {
  (yyval.u.decl) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.decl) != NULL);
}
    break;

  case 208:
#line 1578 "cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
    break;

  case 209:
#line 1582 "cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.struct_type));
}
    break;

  case 210:
#line 1586 "cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.struct_type)));
}
    break;

  case 211:
#line 1590 "cppBison.yxx"
    {
  (yyval.u.decl) = CPPType::new_type((yyvsp[0].u.enum_type));
}
    break;

  case 212:
#line 1594 "cppBison.yxx"
    {
  (yyval.u.decl) = new CPPTypeDeclaration(CPPType::new_type((yyvsp[0].u.enum_type)));
}
    break;

  case 213:
#line 1598 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 214:
#line 1614 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.decl) = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.decl) = et;
  }
}
    break;

  case 215:
#line 1633 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type((yyvsp[0].u.simple_type));
}
    break;

  case 216:
#line 1637 "cppBison.yxx"
    {
  (yyval.u.type) = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert((yyval.u.type) != NULL);
}
    break;

  case 217:
#line 1642 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
    break;

  case 218:
#line 1646 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 219:
#line 1662 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  if (type != NULL) {
    (yyval.u.type) = type;
  } else {
    CPPExtensionType *et = 
      CPPType::new_type(new CPPExtensionType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope, (yylsp[-1]).file))
      ->as_extension_type();
    CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope);
    if (scope != NULL) {
      scope->define_extension_type(et);
    }
    (yyval.u.type) = et;
  }
}
    break;

  case 220:
#line 1681 "cppBison.yxx"
    {
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[-1]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 221:
#line 1687 "cppBison.yxx"
    {
  (yyvsp[0].u.inst_ident)->add_modifier(IIT_const);
  CPPInstance *inst = new CPPInstance((yyvsp[-1].u.type), (yyvsp[0].u.inst_ident), 0, (yylsp[-2]).file);
  (yyval.u.type) = inst->_type;
  delete inst;
}
    break;

  case 222:
#line 1697 "cppBison.yxx"
    {
  CPPVisibility starting_vis = 
  ((yyvsp[-1].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;
  
  CPPScope *new_scope = new CPPScope(current_scope, CPPNameComponent("anon"),
                                     starting_vis);
  CPPStructType *st = new CPPStructType((yyvsp[-1].u.extension_enum), NULL, current_scope,
                                        new_scope, (yylsp[-1]).file);
  new_scope->set_struct_type(st);

  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 223:
#line 1711 "cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 224:
#line 1721 "cppBison.yxx"
    {
  CPPVisibility starting_vis = 
  ((yyvsp[-1].u.extension_enum) == CPPExtensionType::T_class) ? V_private : V_public;

  CPPScope *scope = (yyvsp[0].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    scope = current_scope;
  }
  CPPScope *new_scope = new CPPScope(scope, (yyvsp[0].u.identifier)->_names.back(),
                                     starting_vis);

  CPPStructType *st = new CPPStructType((yyvsp[-1].u.extension_enum), (yyvsp[0].u.identifier), current_scope,
                                        new_scope, (yylsp[-1]).file);
  new_scope->set_struct_type(st);
  current_scope->define_extension_type(st);
  
  push_scope(new_scope);
  push_struct(st);
}
    break;

  case 225:
#line 1741 "cppBison.yxx"
    {
  (yyval.u.struct_type) = current_struct;
  current_struct->_incomplete = false;
  pop_struct();
  pop_scope();
}
    break;

  case 230:
#line 1761 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, false);
}
    break;

  case 231:
#line 1765 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, false);
}
    break;

  case 232:
#line 1769 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, false);
}
    break;

  case 233:
#line 1773 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
    break;

  case 234:
#line 1777 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
    break;

  case 235:
#line 1781 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
    break;

  case 236:
#line 1785 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_public, true);
}
    break;

  case 237:
#line 1789 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_protected, true);
}
    break;

  case 238:
#line 1793 "cppBison.yxx"
    {
  current_struct->append_derivation((yyvsp[0].u.type), V_private, true);
}
    break;

  case 239:
#line 1800 "cppBison.yxx"
    {
  current_enum = new CPPEnumType(NULL, current_scope, (yylsp[-1]).file);
}
    break;

  case 240:
#line 1804 "cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 241:
#line 1812 "cppBison.yxx"
    {
  current_enum = new CPPEnumType((yyvsp[-1].u.identifier), current_scope, (yylsp[-2]).file);
}
    break;

  case 242:
#line 1816 "cppBison.yxx"
    {
  (yyval.u.enum_type) = current_enum;
  current_enum = NULL;
}
    break;

  case 246:
#line 1830 "cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), current_scope);
}
    break;

  case 247:
#line 1835 "cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), current_scope, (yyvsp[0].u.expr));
}
    break;

  case 248:
#line 1840 "cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[0].u.identifier)->get_simple_name(), current_scope);
}
    break;

  case 249:
#line 1845 "cppBison.yxx"
    {
  assert(current_enum != NULL);
  current_enum->add_element((yyvsp[-2].u.identifier)->get_simple_name(), current_scope, (yyvsp[0].u.expr));
}
    break;

  case 250:
#line 1853 "cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_enum;
}
    break;

  case 251:
#line 1860 "cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_class;
}
    break;

  case 252:
#line 1864 "cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_struct;
}
    break;

  case 253:
#line 1868 "cppBison.yxx"
    {
  (yyval.u.extension_enum) = CPPExtensionType::T_union;
}
    break;

  case 254:
#line 1875 "cppBison.yxx"
    {
  CPPScope *scope = (yyvsp[-1].u.identifier)->find_scope(current_scope, global_scope, current_lexer);
  if (scope == NULL) {
    // This must be a new namespace declaration.
    CPPScope *parent_scope = 
      (yyvsp[-1].u.identifier)->get_scope(current_scope, global_scope, current_lexer);
    if (parent_scope == NULL) {
      parent_scope = current_scope;
    }
    scope = new CPPScope(parent_scope, (yyvsp[-1].u.identifier)->_names.back(), V_public);
  }

  CPPNamespace *nspace = new CPPNamespace((yyvsp[-1].u.identifier), scope, (yylsp[-2]).file);
  current_scope->add_declaration(nspace, global_scope, current_lexer, (yylsp[-2]));
  current_scope->define_namespace(nspace);
  push_scope(scope);
}
    break;

  case 255:
#line 1893 "cppBison.yxx"
    {
  pop_scope();
}
    break;

  case 257:
#line 1901 "cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[0].u.identifier), false, (yylsp[-1]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-1]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 258:
#line 1907 "cppBison.yxx"
    {
  CPPUsing *using_decl = new CPPUsing((yyvsp[0].u.identifier), true, (yylsp[-2]).file);
  current_scope->add_declaration(using_decl, global_scope, current_lexer, (yylsp[-2]));
  current_scope->add_using(using_decl, global_scope, current_lexer);
}
    break;

  case 262:
#line 1922 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_bool);
}
    break;

  case 263:
#line 1926 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_char);
}
    break;

  case 264:
#line 1930 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_wchar_t);
}
    break;

  case 265:
#line 1934 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_short);
}
    break;

  case 266:
#line 1939 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_long);
}
    break;

  case 267:
#line 1944 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_longlong);
}
    break;

  case 268:
#line 1949 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_unsigned);
}
    break;

  case 269:
#line 1954 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int,
                         CPPSimpleType::F_signed);
}
    break;

  case 270:
#line 1959 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_int);
}
    break;

  case 271:
#line 1963 "cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_short;
}
    break;

  case 272:
#line 1968 "cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  if ((yyval.u.simple_type)->_flags & CPPSimpleType::F_long) {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_longlong;
  } else {
    (yyval.u.simple_type)->_flags |= CPPSimpleType::F_long;
  }
}
    break;

  case 273:
#line 1977 "cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_unsigned;
}
    break;

  case 274:
#line 1982 "cppBison.yxx"
    {
  (yyval.u.simple_type) = (yyvsp[0].u.simple_type);
  (yyval.u.simple_type)->_flags |= CPPSimpleType::F_signed;
}
    break;

  case 275:
#line 1990 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float);
}
    break;

  case 276:
#line 1994 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_long);
}
    break;

  case 277:
#line 1999 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double);
}
    break;

  case 278:
#line 2003 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_float,
                         CPPSimpleType::F_longlong);
}
    break;

  case 279:
#line 2008 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_double,
                         CPPSimpleType::F_long);
}
    break;

  case 280:
#line 2016 "cppBison.yxx"
    {
  (yyval.u.simple_type) = new CPPSimpleType(CPPSimpleType::T_void);
}
    break;

  case 281:
#line 2025 "cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = false;
}
    break;

  case 282:
#line 2029 "cppBison.yxx"
    {
  current_lexer->_resolve_identifiers = true;
}
    break;

  case 285:
#line 2041 "cppBison.yxx"
    {
}
    break;

  case 286:
#line 2044 "cppBison.yxx"
    {
}
    break;

  case 287:
#line 2047 "cppBison.yxx"
    {
}
    break;

  case 288:
#line 2050 "cppBison.yxx"
    {
}
    break;

  case 289:
#line 2053 "cppBison.yxx"
    {
}
    break;

  case 290:
#line 2056 "cppBison.yxx"
    {
}
    break;

  case 291:
#line 2059 "cppBison.yxx"
    {
}
    break;

  case 292:
#line 2062 "cppBison.yxx"
    {
}
    break;

  case 366:
#line 2082 "cppBison.yxx"
    {
}
    break;

  case 390:
#line 2091 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 391:
#line 2095 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 392:
#line 2102 "cppBison.yxx"
    {
  (yyval.u.expr) = (CPPExpression *)NULL;
}
    break;

  case 393:
#line 2106 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 394:
#line 2113 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 395:
#line 2117 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(',', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 396:
#line 2124 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 397:
#line 2128 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
    break;

  case 398:
#line 2132 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 399:
#line 2136 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 400:
#line 2140 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
    break;

  case 401:
#line 2144 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
    break;

  case 402:
#line 2148 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
    break;

  case 403:
#line 2152 "cppBison.yxx"
    {
  if ((yyvsp[0].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[0].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
  }
}
    break;

  case 404:
#line 2164 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
    break;

  case 405:
#line 2168 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
    break;

  case 406:
#line 2172 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 407:
#line 2176 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 408:
#line 2180 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 409:
#line 2184 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 410:
#line 2188 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 411:
#line 2192 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 412:
#line 2196 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 413:
#line 2200 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 414:
#line 2204 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 415:
#line 2208 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 416:
#line 2212 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 417:
#line 2216 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 418:
#line 2220 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 419:
#line 2224 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 420:
#line 2228 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 421:
#line 2232 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 422:
#line 2236 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
    break;

  case 423:
#line 2240 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
    break;

  case 424:
#line 2244 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
    break;

  case 425:
#line 2248 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 426:
#line 2252 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 427:
#line 2256 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
    break;

  case 428:
#line 2264 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 429:
#line 2268 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
    break;

  case 430:
#line 2272 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 431:
#line 2276 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 432:
#line 2280 "cppBison.yxx"
    {
  // A constructor call.
  CPPType *type = (yyvsp[-3].u.identifier)->find_type(current_scope, global_scope, false, current_lexer);
  assert(type != NULL);
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 433:
#line 2287 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 434:
#line 2293 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_char));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 435:
#line 2299 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_wchar_t));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 436:
#line 2305 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_bool));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 437:
#line 2311 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_short));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 438:
#line 2318 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_long));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 439:
#line 2325 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_unsigned));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 440:
#line 2332 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_int,
                                        CPPSimpleType::F_signed));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 441:
#line 2339 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_float));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 442:
#line 2345 "cppBison.yxx"
    {
  CPPType *type = 
    CPPType::new_type(new CPPSimpleType(CPPSimpleType::T_double));
  (yyval.u.expr) = new CPPExpression(CPPExpression::construct_op(type, (yyvsp[-1].u.expr)));
}
    break;

  case 443:
#line 2351 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
    break;

  case 444:
#line 2355 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
    break;

  case 445:
#line 2359 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 446:
#line 2363 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
    break;

  case 447:
#line 2367 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
    break;

  case 448:
#line 2371 "cppBison.yxx"
    {
  if ((yyvsp[0].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[0].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
  }
}
    break;

  case 449:
#line 2383 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_STAR, (yyvsp[0].u.expr));
}
    break;

  case 450:
#line 2387 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
    break;

  case 451:
#line 2391 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 452:
#line 2395 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 453:
#line 2399 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 454:
#line 2403 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 455:
#line 2407 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 456:
#line 2411 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 457:
#line 2415 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 458:
#line 2419 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 459:
#line 2423 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 460:
#line 2427 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 461:
#line 2431 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 462:
#line 2435 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 463:
#line 2439 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 464:
#line 2443 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 465:
#line 2447 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 466:
#line 2451 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 467:
#line 2455 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 468:
#line 2459 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 469:
#line 2463 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
    break;

  case 470:
#line 2467 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
    break;

  case 471:
#line 2471 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
    break;

  case 472:
#line 2475 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 473:
#line 2479 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 474:
#line 2483 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
    break;

  case 475:
#line 2490 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
    break;

  case 476:
#line 2494 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 477:
#line 2498 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 478:
#line 2502 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
    break;

  case 479:
#line 2506 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
    break;

  case 480:
#line 2510 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
    break;

  case 481:
#line 2514 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.identifier), current_scope, global_scope, current_lexer);
}
    break;

  case 482:
#line 2528 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[0].u.expr);
}
    break;

  case 483:
#line 2532 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-2].u.type), (yyvsp[0].u.expr)));
}
    break;

  case 484:
#line 2536 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 485:
#line 2540 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::typecast_op((yyvsp[-4].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 486:
#line 2544 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::sizeof_func((yyvsp[-1].u.type)));
}
    break;

  case 487:
#line 2548 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[0].u.type)));
}
    break;

  case 488:
#line 2552 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(CPPExpression::new_op((yyvsp[-3].u.type), (yyvsp[-1].u.expr)));
}
    break;

  case 489:
#line 2556 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NOT, (yyvsp[0].u.expr));
}
    break;

  case 490:
#line 2560 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_NEGATE, (yyvsp[0].u.expr));
}
    break;

  case 491:
#line 2564 "cppBison.yxx"
    {
  if ((yyvsp[0].u.expr)->_type == CPPExpression::T_integer) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._integer = -(yyval.u.expr)->_u._integer;
  } else if ((yyvsp[0].u.expr)->_type == CPPExpression::T_real) {
    (yyval.u.expr) = (yyvsp[0].u.expr);
    (yyval.u.expr)->_u._real = -(yyval.u.expr)->_u._real;
  } else {
    (yyval.u.expr) = new CPPExpression(UNARY_MINUS, (yyvsp[0].u.expr));
  }
}
    break;

  case 492:
#line 2576 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(UNARY_REF, (yyvsp[0].u.expr));
}
    break;

  case 493:
#line 2580 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('*', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 494:
#line 2584 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('/', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 495:
#line 2588 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('%', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 496:
#line 2592 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('+', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 497:
#line 2596 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('-', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 498:
#line 2600 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('|', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 499:
#line 2604 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('&', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 500:
#line 2608 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(OROR, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 501:
#line 2612 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(ANDAND, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 502:
#line 2616 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(EQCOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 503:
#line 2620 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(NECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 504:
#line 2624 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 505:
#line 2628 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(GECOMPARE, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 506:
#line 2632 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('<', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 507:
#line 2636 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('>', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 508:
#line 2640 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(LSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 509:
#line 2644 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(RSHIFT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 510:
#line 2648 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('?', (yyvsp[-4].u.expr), (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 511:
#line 2652 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('[', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
    break;

  case 512:
#line 2656 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-3].u.expr), (yyvsp[-1].u.expr));
}
    break;

  case 513:
#line 2660 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('f', (yyvsp[-2].u.expr));
}
    break;

  case 514:
#line 2664 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression('.', (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 515:
#line 2668 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(POINTSAT, (yyvsp[-2].u.expr), (yyvsp[0].u.expr));
}
    break;

  case 516:
#line 2672 "cppBison.yxx"
    {
  (yyval.u.expr) = (yyvsp[-1].u.expr);
}
    break;

  case 517:
#line 2679 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
    break;

  case 518:
#line 2683 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(true);
}
    break;

  case 519:
#line 2687 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression(false);
}
    break;

  case 520:
#line 2691 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.integer));
}
    break;

  case 521:
#line 2695 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].u.real));
}
    break;

  case 522:
#line 2699 "cppBison.yxx"
    {
  (yyval.u.expr) = new CPPExpression((yyvsp[0].str));
}
    break;

  case 523:
#line 2706 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 524:
#line 2714 "cppBison.yxx"
    {
  CPPType *type = (yyvsp[0].u.identifier)->find_type(current_scope, global_scope, true, current_lexer);
  if (type == NULL) {
    type = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
  }
  (yyval.u.type) = type;
}
    break;

  case 525:
#line 2722 "cppBison.yxx"
    {
  (yyval.u.type) = CPPType::new_type(new CPPTBDType((yyvsp[0].u.identifier)));
}
    break;

  case 526:
#line 2745 "cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
    break;

  case 527:
#line 2749 "cppBison.yxx"
    {
  (yyval.u.identifier) = (yyvsp[0].u.identifier);
}
    break;

  case 528:
#line 2756 "cppBison.yxx"
    {
  (yyval.str) = (yyvsp[0].str);
}
    break;

  case 529:
#line 2760 "cppBison.yxx"
    {
  (yyval.str) = (yyvsp[-1].str) + (yyvsp[0].str);
}
    break;


    }

/* Line 1037 of yacc.c.  */
#line 6091 "y.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;
  yylsp -= yylen;

  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
	  char *yymsg;
	  int yyx;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			yyp = yystpcpy (yyp, yyprefix);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yyprefix = " or ";
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {
                 yyerror_range[0] = *yylsp;
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 yydestruct ("Error: popping",
                             yystos[*yyssp], yyvsp, yylsp);
	       }
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
#endif

  yyerror_range[0] = yylsp[1-yylen];
  yylsp -= yylen;
  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping", yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the look-ahead.  YYLOC is available though. */
  YYLLOC_DEFAULT (yyloc, yyerror_range - 1, 2);
  *++yylsp = yyloc;

  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yydestruct ("Error: discarding lookahead",
              yytoken, &yylval, &yylloc);
  yychar = YYEMPTY;
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}



