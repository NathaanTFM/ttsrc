/*
 * This file generated by:
 * C:\cygwin\home\drose\player\dtool\built\bin\interrogate.exe -D EXPCL_DTOOLCONFIG= -nodb -python -promiscuous -I /home/drose/player/dtool/include -module dtoolconfig -library libdtoolconfig -true-names -do-module -oc pydtool.cxx ../../src/interrogatedb/interrogate_interface.h 
 *
 */

#include <sstream>

#include "../../src/interrogatedb/interrogate_interface.h"
#include "dtoolbase.h"

#undef HAVE_LONG_LONG
#undef _POSIX_C_SOURCE

#if PYTHON_FRAMEWORK
  #include "Python/Python.h"
#else
  #include "Python.h"
#endif
#ifdef HAVE_LONG_LONG
#undef HAVE_LONG_LONG
#endif 

static PyObject *_inPfd5RtbRf(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rda_g(PyObject *self, PyObject *args);
static PyObject *_inPfd5R4RgX(PyObject *self, PyObject *args);
static PyObject *_inPfd5R3Gip(PyObject *self, PyObject *args);
static PyObject *_inPfd5RRKDz(PyObject *self, PyObject *args);
static PyObject *_inPfd5RgZ9N(PyObject *self, PyObject *args);
static PyObject *_inPfd5RRQIx(PyObject *self, PyObject *args);
static PyObject *_inPfd5RGVSj(PyObject *self, PyObject *args);
static PyObject *_inPfd5RznM6(PyObject *self, PyObject *args);
static PyObject *_inPfd5RjiLg(PyObject *self, PyObject *args);
static PyObject *_inPfd5R_yjE(PyObject *self, PyObject *args);
static PyObject *_inPfd5RzK9F(PyObject *self, PyObject *args);
static PyObject *_inPfd5RJju_(PyObject *self, PyObject *args);
static PyObject *_inPfd5RZktk(PyObject *self, PyObject *args);
static PyObject *_inPfd5RG71J(PyObject *self, PyObject *args);
static PyObject *_inPfd5RgeUs(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rkg95(PyObject *self, PyObject *args);
static PyObject *_inPfd5RluRc(PyObject *self, PyObject *args);
static PyObject *_inPfd5RwtTf(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rrfao(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rcedk(PyObject *self, PyObject *args);
static PyObject *_inPfd5RXmoo(PyObject *self, PyObject *args);
static PyObject *_inPfd5RclIo(PyObject *self, PyObject *args);
static PyObject *_inPfd5RU2_B(PyObject *self, PyObject *args);
static PyObject *_inPfd5RHFO2(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rcfjm(PyObject *self, PyObject *args);
static PyObject *_inPfd5R3Sjw(PyObject *self, PyObject *args);
static PyObject *_inPfd5RgJcX(PyObject *self, PyObject *args);
static PyObject *_inPfd5RYlw6(PyObject *self, PyObject *args);
static PyObject *_inPfd5R3gns(PyObject *self, PyObject *args);
static PyObject *_inPfd5RN968(PyObject *self, PyObject *args);
static PyObject *_inPfd5RFJVJ(PyObject *self, PyObject *args);
static PyObject *_inPfd5RndTW(PyObject *self, PyObject *args);
static PyObject *_inPfd5RpjWj(PyObject *self, PyObject *args);
static PyObject *_inPfd5RNcQW(PyObject *self, PyObject *args);
static PyObject *_inPfd5RP_SX(PyObject *self, PyObject *args);
static PyObject *_inPfd5R1iRq(PyObject *self, PyObject *args);
static PyObject *_inPfd5REmel(PyObject *self, PyObject *args);
static PyObject *_inPfd5R20Vx(PyObject *self, PyObject *args);
static PyObject *_inPfd5RKcdW(PyObject *self, PyObject *args);
static PyObject *_inPfd5RhUs9(PyObject *self, PyObject *args);
static PyObject *_inPfd5RhF25(PyObject *self, PyObject *args);
static PyObject *_inPfd5Ru1qB(PyObject *self, PyObject *args);
static PyObject *_inPfd5RKMkY(PyObject *self, PyObject *args);
static PyObject *_inPfd5RRx9W(PyObject *self, PyObject *args);
static PyObject *_inPfd5R0C9G(PyObject *self, PyObject *args);
static PyObject *_inPfd5RhaPp(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rt_1v(PyObject *self, PyObject *args);
static PyObject *_inPfd5R8KQG(PyObject *self, PyObject *args);
static PyObject *_inPfd5REtIl(PyObject *self, PyObject *args);
static PyObject *_inPfd5RRFmo(PyObject *self, PyObject *args);
static PyObject *_inPfd5RWHA0(PyObject *self, PyObject *args);
static PyObject *_inPfd5RcyIl(PyObject *self, PyObject *args);
static PyObject *_inPfd5RBnBv(PyObject *self, PyObject *args);
static PyObject *_inPfd5RUvW7(PyObject *self, PyObject *args);
static PyObject *_inPfd5RPdXf(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rd0dl(PyObject *self, PyObject *args);
static PyObject *_inPfd5RdVbH(PyObject *self, PyObject *args);
static PyObject *_inPfd5RBwF0(PyObject *self, PyObject *args);
static PyObject *_inPfd5R9dPK(PyObject *self, PyObject *args);
static PyObject *_inPfd5RhUwR(PyObject *self, PyObject *args);
static PyObject *_inPfd5RA1eF(PyObject *self, PyObject *args);
static PyObject *_inPfd5R8pBy(PyObject *self, PyObject *args);
static PyObject *_inPfd5R85oW(PyObject *self, PyObject *args);
static PyObject *_inPfd5RYZz0(PyObject *self, PyObject *args);
static PyObject *_inPfd5RzKCA(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rsxxs(PyObject *self, PyObject *args);
static PyObject *_inPfd5RMT0z(PyObject *self, PyObject *args);
static PyObject *_inPfd5RiW3v(PyObject *self, PyObject *args);
static PyObject *_inPfd5R4Px8(PyObject *self, PyObject *args);
static PyObject *_inPfd5RNHcs(PyObject *self, PyObject *args);
static PyObject *_inPfd5RqHrb(PyObject *self, PyObject *args);
static PyObject *_inPfd5RaOqq(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rvue5(PyObject *self, PyObject *args);
static PyObject *_inPfd5RB_n_(PyObject *self, PyObject *args);
static PyObject *_inPfd5RDFET(PyObject *self, PyObject *args);
static PyObject *_inPfd5RUyNE(PyObject *self, PyObject *args);
static PyObject *_inPfd5RpDlm(PyObject *self, PyObject *args);
static PyObject *_inPfd5RAscF(PyObject *self, PyObject *args);
static PyObject *_inPfd5RYjbU(PyObject *self, PyObject *args);
static PyObject *_inPfd5RWmpU(PyObject *self, PyObject *args);
static PyObject *_inPfd5RnegH(PyObject *self, PyObject *args);
static PyObject *_inPfd5RrrnF(PyObject *self, PyObject *args);
static PyObject *_inPfd5R7ShX(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rx_aO(PyObject *self, PyObject *args);
static PyObject *_inPfd5RpofZ(PyObject *self, PyObject *args);
static PyObject *_inPfd5R2J9C(PyObject *self, PyObject *args);
static PyObject *_inPfd5RA6iz(PyObject *self, PyObject *args);
static PyObject *_inPfd5Ra78E(PyObject *self, PyObject *args);
static PyObject *_inPfd5RWD3W(PyObject *self, PyObject *args);
static PyObject *_inPfd5RYuud(PyObject *self, PyObject *args);
static PyObject *_inPfd5RlmJS(PyObject *self, PyObject *args);
static PyObject *_inPfd5RLlrr(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rw_wy(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rgk_l(PyObject *self, PyObject *args);
static PyObject *_inPfd5RXpHY(PyObject *self, PyObject *args);
static PyObject *_inPfd5RHhIg(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rff0T(PyObject *self, PyObject *args);
static PyObject *_inPfd5R5PPX(PyObject *self, PyObject *args);
static PyObject *_inPfd5RPww5(PyObject *self, PyObject *args);
static PyObject *_inPfd5RPke3(PyObject *self, PyObject *args);
static PyObject *_inPfd5RJmw3(PyObject *self, PyObject *args);
static PyObject *_inPfd5RR0Lc(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rc6gE(PyObject *self, PyObject *args);
static PyObject *_inPfd5R1iT0(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rz1Mn(PyObject *self, PyObject *args);
static PyObject *_inPfd5RWlf2(PyObject *self, PyObject *args);
static PyObject *_inPfd5R1q8q(PyObject *self, PyObject *args);
static PyObject *_inPfd5Robo6(PyObject *self, PyObject *args);
static PyObject *_inPfd5RjevK(PyObject *self, PyObject *args);
static PyObject *_inPfd5ReBpM(PyObject *self, PyObject *args);
static PyObject *_inPfd5RfmeN(PyObject *self, PyObject *args);
static PyObject *_inPfd5RKBCl(PyObject *self, PyObject *args);
static PyObject *_inPfd5R936K(PyObject *self, PyObject *args);
static PyObject *_inPfd5RPPXQ(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rnu86(PyObject *self, PyObject *args);
static PyObject *_inPfd5Rngiq(PyObject *self, PyObject *args);
static PyObject *_inPfd5RUXR0(PyObject *self, PyObject *args);
static PyObject *_inPfd5RDO7D(PyObject *self, PyObject *args);
static PyObject *_inPfd5RhZFz(PyObject *self, PyObject *args);
static PyObject *_inPfd5RnKPe(PyObject *self, PyObject *args);
static PyObject *_inPfd5RP3lS(PyObject *self, PyObject *args);
static PyObject *_inPfd5RUlLp(PyObject *self, PyObject *args);
static PyObject *_inPfd5R9Xei(PyObject *self, PyObject *args);
static PyObject *_inPfd5RaGkE(PyObject *self, PyObject *args);
static PyObject *_inPfd5Roe_l(PyObject *self, PyObject *args);
static PyObject *_inPfd5RuEdH(PyObject *self, PyObject *args);


/*
 * Python simple wrapper for
 * void interrogate_add_search_directory(char const *dirname)
 */
static PyObject *
_inPfd5RtbRf(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    interrogate_add_search_directory((char const *)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * void interrogate_add_search_path(char const *pathstring)
 */
static PyObject *
_inPfd5Rda_g(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    interrogate_add_search_path((char const *)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_error_flag(void)
 */
static PyObject *
_inPfd5R4RgX(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    bool return_value = interrogate_error_flag();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_manifests(void)
 */
static PyObject *
_inPfd5R3Gip(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_manifests();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_manifest(int n)
 */
static PyObject *
_inPfd5RRKDz(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_manifest((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_manifest_by_name(char const *manifest_name)
 */
static PyObject *
_inPfd5RgZ9N(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_manifest_by_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_manifest_name(int manifest)
 */
static PyObject *
_inPfd5RRQIx(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_manifest_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_manifest_definition(int manifest)
 */
static PyObject *
_inPfd5RGVSj(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_manifest_definition((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_type(int manifest)
 */
static PyObject *
_inPfd5RznM6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_get_type(int manifest)
 */
static PyObject *
_inPfd5RjiLg(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_get_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_getter(int manifest)
 */
static PyObject *
_inPfd5R_yjE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_getter((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_getter(int manifest)
 */
static PyObject *
_inPfd5RzK9F(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_getter((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_manifest_has_int_value(int manifest)
 */
static PyObject *
_inPfd5RJju_(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_manifest_has_int_value((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_manifest_get_int_value(int manifest)
 */
static PyObject *
_inPfd5RZktk(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_manifest_get_int_value((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_name(int element)
 */
static PyObject *
_inPfd5RG71J(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_element_scoped_name(int element)
 */
static PyObject *
_inPfd5RgeUs(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_element_scoped_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_element_by_name(char const *element_name)
 */
static PyObject *
_inPfd5Rkg95(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_element_by_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_element_by_scoped_name(char const *element_name)
 */
static PyObject *
_inPfd5RluRc(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_element_by_scoped_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_type(int element)
 */
static PyObject *
_inPfd5RwtTf(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_getter(int element)
 */
static PyObject *
_inPfd5Rrfao(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_getter((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_getter(int element)
 */
static PyObject *
_inPfd5Rcedk(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_getter((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_element_has_setter(int element)
 */
static PyObject *
_inPfd5RXmoo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_element_has_setter((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_element_setter(int element)
 */
static PyObject *
_inPfd5RclIo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_element_setter((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_globals(void)
 */
static PyObject *
_inPfd5RU2_B(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_globals();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global(int n)
 */
static PyObject *
_inPfd5RHFO2(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_global_functions(void)
 */
static PyObject *
_inPfd5Rcfjm(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_global_functions();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global_function(int n)
 */
static PyObject *
_inPfd5R3Sjw(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global_function((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_functions(void)
 */
static PyObject *
_inPfd5RgJcX(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_functions();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_function(int n)
 */
static PyObject *
_inPfd5RYlw6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_function((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_name(int function)
 */
static PyObject *
_inPfd5R3gns(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_scoped_name(int function)
 */
static PyObject *
_inPfd5RN968(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_scoped_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_comment(int function)
 */
static PyObject *
_inPfd5RFJVJ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_comment((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_comment(int function)
 */
static PyObject *
_inPfd5RndTW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_comment((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_prototype(int function)
 */
static PyObject *
_inPfd5RpjWj(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_prototype((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_is_method(int function)
 */
static PyObject *
_inPfd5RNcQW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_is_method((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_class(int function)
 */
static PyObject *
_inPfd5RP_SX(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_class((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_module_name(int function)
 */
static PyObject *
_inPfd5R1iRq(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_module_name((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_module_name(int function)
 */
static PyObject *
_inPfd5REmel(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_module_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_has_library_name(int function)
 */
static PyObject *
_inPfd5R20Vx(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_has_library_name((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_function_library_name(int function)
 */
static PyObject *
_inPfd5RKcdW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_function_library_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_function_is_virtual(int function)
 */
static PyObject *
_inPfd5RhUs9(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_function_is_virtual((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_number_of_c_wrappers(int function)
 */
static PyObject *
_inPfd5RhF25(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_number_of_c_wrappers((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_c_wrapper(int function, int n)
 */
static PyObject *
_inPfd5Ru1qB(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_function_c_wrapper((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_number_of_python_wrappers(int function)
 */
static PyObject *
_inPfd5RKMkY(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_function_number_of_python_wrappers((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_function_python_wrapper(int function, int n)
 */
static PyObject *
_inPfd5RRx9W(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_function_python_wrapper((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_name(int wrapper)
 */
static PyObject *
_inPfd5R0C9G(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_is_callable_by_name(int wrapper)
 */
static PyObject *
_inPfd5RhaPp(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_is_callable_by_name((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_comment(int wrapper)
 */
static PyObject *
_inPfd5Rt_1v(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_comment((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_comment(int wrapper)
 */
static PyObject *
_inPfd5R8KQG(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_comment((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_return_value(int wrapper)
 */
static PyObject *
_inPfd5REtIl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_return_value((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_return_type(int wrapper)
 */
static PyObject *
_inPfd5RRFmo(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_return_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_caller_manages_return_value(int wrapper)
 */
static PyObject *
_inPfd5RWHA0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_caller_manages_return_value((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_return_value_destructor(int wrapper)
 */
static PyObject *
_inPfd5RcyIl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_return_value_destructor((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_number_of_parameters(int wrapper)
 */
static PyObject *
_inPfd5RBnBv(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_wrapper_number_of_parameters((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_wrapper_parameter_type(int wrapper, int n)
 */
static PyObject *
_inPfd5RUvW7(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_wrapper_parameter_type((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_parameter_has_name(int wrapper, int n)
 */
static PyObject *
_inPfd5RPdXf(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_wrapper_parameter_has_name((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_parameter_name(int wrapper, int n)
 */
static PyObject *
_inPfd5Rd0dl(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_wrapper_parameter_name((int)param0, (int)param1);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_parameter_is_this(int wrapper, int n)
 */
static PyObject *
_inPfd5RdVbH(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_wrapper_parameter_is_this((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_wrapper_has_pointer(int wrapper)
 */
static PyObject *
_inPfd5RBwF0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_wrapper_has_pointer((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * void *interrogate_wrapper_pointer(int wrapper)
 */
static PyObject *
_inPfd5R9dPK(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    interrogate_wrapper_pointer((int)param0);
    return Py_BuildValue("");
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_wrapper_unique_name(int wrapper)
 */
static PyObject *
_inPfd5RhUwR(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_wrapper_unique_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_wrapper_by_unique_name(char const *unique_name)
 */
static PyObject *
_inPfd5RA1eF(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_wrapper_by_unique_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_make_seq_class(int make_seq)
 */
static PyObject *
_inPfd5R8pBy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_make_seq_class((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_seq_name(int make_seq)
 */
static PyObject *
_inPfd5R85oW(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_seq_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_num_name(int make_seq)
 */
static PyObject *
_inPfd5RYZz0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_num_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_make_seq_element_name(int make_seq)
 */
static PyObject *
_inPfd5RzKCA(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_make_seq_element_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_global_types(void)
 */
static PyObject *
_inPfd5Rsxxs(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_global_types();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_global_type(int n)
 */
static PyObject *
_inPfd5RMT0z(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_global_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_number_of_types(void)
 */
static PyObject *
_inPfd5RiW3v(PyObject *, PyObject *args) {
  if (PyArg_ParseTuple(args, "")) {
    int return_value = interrogate_number_of_types();
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type(int n)
 */
static PyObject *
_inPfd5R4Px8(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_get_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_name(char const *type_name)
 */
static PyObject *
_inPfd5RNHcs(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_scoped_name(char const *type_name)
 */
static PyObject *
_inPfd5RqHrb(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_scoped_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_get_type_by_true_name(char const *type_name)
 */
static PyObject *
_inPfd5RaOqq(PyObject *, PyObject *args) {
  char *param0;
  if (PyArg_ParseTuple(args, "s", &param0)) {
    int return_value = interrogate_get_type_by_true_name((char const *)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_name(int type)
 */
static PyObject *
_inPfd5Rvue5(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_scoped_name(int type)
 */
static PyObject *
_inPfd5RB_n_(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_scoped_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_true_name(int type)
 */
static PyObject *
_inPfd5RDFET(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_true_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_nested(int type)
 */
static PyObject *
_inPfd5RUyNE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_nested((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_outer_class(int type)
 */
static PyObject *
_inPfd5RpDlm(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_outer_class((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_comment(int type)
 */
static PyObject *
_inPfd5RAscF(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_comment((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_comment(int type)
 */
static PyObject *
_inPfd5RYjbU(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_comment((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_module_name(int type)
 */
static PyObject *
_inPfd5RWmpU(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_module_name((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_module_name(int type)
 */
static PyObject *
_inPfd5RnegH(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_module_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_library_name(int type)
 */
static PyObject *
_inPfd5RrrnF(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_library_name((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_library_name(int type)
 */
static PyObject *
_inPfd5R7ShX(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    char const *return_value = interrogate_type_library_name((int)param0);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_atomic(int type)
 */
static PyObject *
_inPfd5Rx_aO(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_atomic((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * AtomicToken interrogate_type_atomic_token(int type)
 */
static PyObject *
_inPfd5RpofZ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    AtomicToken return_value = interrogate_type_atomic_token((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_unsigned(int type)
 */
static PyObject *
_inPfd5R2J9C(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_unsigned((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_signed(int type)
 */
static PyObject *
_inPfd5RA6iz(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_signed((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_long(int type)
 */
static PyObject *
_inPfd5Ra78E(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_long((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_longlong(int type)
 */
static PyObject *
_inPfd5RWD3W(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_longlong((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_short(int type)
 */
static PyObject *
_inPfd5RYuud(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_short((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_wrapped(int type)
 */
static PyObject *
_inPfd5RlmJS(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_wrapped((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_pointer(int type)
 */
static PyObject *
_inPfd5RLlrr(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_pointer((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_const(int type)
 */
static PyObject *
_inPfd5Rw_wy(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_const((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_wrapped_type(int type)
 */
static PyObject *
_inPfd5Rgk_l(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_wrapped_type((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_enum(int type)
 */
static PyObject *
_inPfd5RXpHY(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_enum((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_enum_values(int type)
 */
static PyObject *
_inPfd5RHhIg(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_enum_values((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_name(int type, int n)
 */
static PyObject *
_inPfd5Rff0T(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_name((int)param0, (int)param1);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * char const *interrogate_type_enum_value_scoped_name(int type, int n)
 */
static PyObject *
_inPfd5R5PPX(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    char const *return_value = interrogate_type_enum_value_scoped_name((int)param0, (int)param1);
    return PyString_FromString(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_enum_value(int type, int n)
 */
static PyObject *
_inPfd5RPww5(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_enum_value((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_struct(int type)
 */
static PyObject *
_inPfd5RPke3(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_struct((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_class(int type)
 */
static PyObject *
_inPfd5RJmw3(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_class((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_union(int type)
 */
static PyObject *
_inPfd5RR0Lc(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_union((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_fully_defined(int type)
 */
static PyObject *
_inPfd5Rc6gE(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_fully_defined((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_is_unpublished(int type)
 */
static PyObject *
_inPfd5R1iT0(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_is_unpublished((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_constructors(int type)
 */
static PyObject *
_inPfd5Rz1Mn(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_constructors((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_constructor(int type, int n)
 */
static PyObject *
_inPfd5RWlf2(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_constructor((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_has_destructor(int type)
 */
static PyObject *
_inPfd5R1q8q(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_has_destructor((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_destructor_is_inherited(int type)
 */
static PyObject *
_inPfd5Robo6(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    bool return_value = interrogate_type_destructor_is_inherited((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_destructor(int type)
 */
static PyObject *
_inPfd5RjevK(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_get_destructor((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_elements(int type)
 */
static PyObject *
_inPfd5ReBpM(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_elements((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_element(int type, int n)
 */
static PyObject *
_inPfd5RfmeN(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_element((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_methods(int type)
 */
static PyObject *
_inPfd5RKBCl(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_methods((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_method(int type, int n)
 */
static PyObject *
_inPfd5R936K(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_method((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_make_seqs(int type)
 */
static PyObject *
_inPfd5RPPXQ(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_make_seqs((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_make_seq(int type, int n)
 */
static PyObject *
_inPfd5Rnu86(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_make_seq((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_casts(int type)
 */
static PyObject *
_inPfd5Rngiq(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_casts((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_cast(int type, int n)
 */
static PyObject *
_inPfd5RUXR0(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_cast((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_derivations(int type)
 */
static PyObject *
_inPfd5RDO7D(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_derivations((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_derivation(int type, int n)
 */
static PyObject *
_inPfd5RhZFz(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_derivation((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_has_upcast(int type, int n)
 */
static PyObject *
_inPfd5RnKPe(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_has_upcast((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_upcast(int type, int n)
 */
static PyObject *
_inPfd5RP3lS(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_upcast((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_downcast_is_impossible(int type, int n)
 */
static PyObject *
_inPfd5RUlLp(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_downcast_is_impossible((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * bool interrogate_type_derivation_has_downcast(int type, int n)
 */
static PyObject *
_inPfd5R9Xei(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    bool return_value = interrogate_type_derivation_has_downcast((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_downcast(int type, int n)
 */
static PyObject *
_inPfd5RaGkE(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_downcast((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_number_of_nested_types(int type)
 */
static PyObject *
_inPfd5Roe_l(PyObject *, PyObject *args) {
  int param0;
  if (PyArg_ParseTuple(args, "i", &param0)) {
    int return_value = interrogate_type_number_of_nested_types((int)param0);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}

/*
 * Python simple wrapper for
 * int interrogate_type_get_nested_type(int type, int n)
 */
static PyObject *
_inPfd5RuEdH(PyObject *, PyObject *args) {
  int param0;
  int param1;
  if (PyArg_ParseTuple(args, "ii", &param0, &param1)) {
    int return_value = interrogate_type_get_nested_type((int)param0, (int)param1);
    return PyInt_FromLong(return_value);
  }
  return (PyObject *)NULL;
}


static PyMethodDef python_simple_funcs[] = {
  { "interrogate_add_search_directory", &_inPfd5RtbRf, METH_VARARGS },
  { "interrogate_add_search_path", &_inPfd5Rda_g, METH_VARARGS },
  { "interrogate_error_flag", &_inPfd5R4RgX, METH_VARARGS },
  { "interrogate_number_of_manifests", &_inPfd5R3Gip, METH_VARARGS },
  { "interrogate_get_manifest", &_inPfd5RRKDz, METH_VARARGS },
  { "interrogate_get_manifest_by_name", &_inPfd5RgZ9N, METH_VARARGS },
  { "interrogate_manifest_name", &_inPfd5RRQIx, METH_VARARGS },
  { "interrogate_manifest_definition", &_inPfd5RGVSj, METH_VARARGS },
  { "interrogate_manifest_has_type", &_inPfd5RznM6, METH_VARARGS },
  { "interrogate_manifest_get_type", &_inPfd5RjiLg, METH_VARARGS },
  { "interrogate_manifest_has_getter", &_inPfd5R_yjE, METH_VARARGS },
  { "interrogate_manifest_getter", &_inPfd5RzK9F, METH_VARARGS },
  { "interrogate_manifest_has_int_value", &_inPfd5RJju_, METH_VARARGS },
  { "interrogate_manifest_get_int_value", &_inPfd5RZktk, METH_VARARGS },
  { "interrogate_element_name", &_inPfd5RG71J, METH_VARARGS },
  { "interrogate_element_scoped_name", &_inPfd5RgeUs, METH_VARARGS },
  { "interrogate_get_element_by_name", &_inPfd5Rkg95, METH_VARARGS },
  { "interrogate_get_element_by_scoped_name", &_inPfd5RluRc, METH_VARARGS },
  { "interrogate_element_type", &_inPfd5RwtTf, METH_VARARGS },
  { "interrogate_element_has_getter", &_inPfd5Rrfao, METH_VARARGS },
  { "interrogate_element_getter", &_inPfd5Rcedk, METH_VARARGS },
  { "interrogate_element_has_setter", &_inPfd5RXmoo, METH_VARARGS },
  { "interrogate_element_setter", &_inPfd5RclIo, METH_VARARGS },
  { "interrogate_number_of_globals", &_inPfd5RU2_B, METH_VARARGS },
  { "interrogate_get_global", &_inPfd5RHFO2, METH_VARARGS },
  { "interrogate_number_of_global_functions", &_inPfd5Rcfjm, METH_VARARGS },
  { "interrogate_get_global_function", &_inPfd5R3Sjw, METH_VARARGS },
  { "interrogate_number_of_functions", &_inPfd5RgJcX, METH_VARARGS },
  { "interrogate_get_function", &_inPfd5RYlw6, METH_VARARGS },
  { "interrogate_function_name", &_inPfd5R3gns, METH_VARARGS },
  { "interrogate_function_scoped_name", &_inPfd5RN968, METH_VARARGS },
  { "interrogate_function_has_comment", &_inPfd5RFJVJ, METH_VARARGS },
  { "interrogate_function_comment", &_inPfd5RndTW, METH_VARARGS },
  { "interrogate_function_prototype", &_inPfd5RpjWj, METH_VARARGS },
  { "interrogate_function_is_method", &_inPfd5RNcQW, METH_VARARGS },
  { "interrogate_function_class", &_inPfd5RP_SX, METH_VARARGS },
  { "interrogate_function_has_module_name", &_inPfd5R1iRq, METH_VARARGS },
  { "interrogate_function_module_name", &_inPfd5REmel, METH_VARARGS },
  { "interrogate_function_has_library_name", &_inPfd5R20Vx, METH_VARARGS },
  { "interrogate_function_library_name", &_inPfd5RKcdW, METH_VARARGS },
  { "interrogate_function_is_virtual", &_inPfd5RhUs9, METH_VARARGS },
  { "interrogate_function_number_of_c_wrappers", &_inPfd5RhF25, METH_VARARGS },
  { "interrogate_function_c_wrapper", &_inPfd5Ru1qB, METH_VARARGS },
  { "interrogate_function_number_of_python_wrappers", &_inPfd5RKMkY, METH_VARARGS },
  { "interrogate_function_python_wrapper", &_inPfd5RRx9W, METH_VARARGS },
  { "interrogate_wrapper_name", &_inPfd5R0C9G, METH_VARARGS },
  { "interrogate_wrapper_is_callable_by_name", &_inPfd5RhaPp, METH_VARARGS },
  { "interrogate_wrapper_has_comment", &_inPfd5Rt_1v, METH_VARARGS },
  { "interrogate_wrapper_comment", &_inPfd5R8KQG, METH_VARARGS },
  { "interrogate_wrapper_has_return_value", &_inPfd5REtIl, METH_VARARGS },
  { "interrogate_wrapper_return_type", &_inPfd5RRFmo, METH_VARARGS },
  { "interrogate_wrapper_caller_manages_return_value", &_inPfd5RWHA0, METH_VARARGS },
  { "interrogate_wrapper_return_value_destructor", &_inPfd5RcyIl, METH_VARARGS },
  { "interrogate_wrapper_number_of_parameters", &_inPfd5RBnBv, METH_VARARGS },
  { "interrogate_wrapper_parameter_type", &_inPfd5RUvW7, METH_VARARGS },
  { "interrogate_wrapper_parameter_has_name", &_inPfd5RPdXf, METH_VARARGS },
  { "interrogate_wrapper_parameter_name", &_inPfd5Rd0dl, METH_VARARGS },
  { "interrogate_wrapper_parameter_is_this", &_inPfd5RdVbH, METH_VARARGS },
  { "interrogate_wrapper_has_pointer", &_inPfd5RBwF0, METH_VARARGS },
  { "interrogate_wrapper_pointer", &_inPfd5R9dPK, METH_VARARGS },
  { "interrogate_wrapper_unique_name", &_inPfd5RhUwR, METH_VARARGS },
  { "interrogate_get_wrapper_by_unique_name", &_inPfd5RA1eF, METH_VARARGS },
  { "interrogate_make_seq_class", &_inPfd5R8pBy, METH_VARARGS },
  { "interrogate_make_seq_seq_name", &_inPfd5R85oW, METH_VARARGS },
  { "interrogate_make_seq_num_name", &_inPfd5RYZz0, METH_VARARGS },
  { "interrogate_make_seq_element_name", &_inPfd5RzKCA, METH_VARARGS },
  { "interrogate_number_of_global_types", &_inPfd5Rsxxs, METH_VARARGS },
  { "interrogate_get_global_type", &_inPfd5RMT0z, METH_VARARGS },
  { "interrogate_number_of_types", &_inPfd5RiW3v, METH_VARARGS },
  { "interrogate_get_type", &_inPfd5R4Px8, METH_VARARGS },
  { "interrogate_get_type_by_name", &_inPfd5RNHcs, METH_VARARGS },
  { "interrogate_get_type_by_scoped_name", &_inPfd5RqHrb, METH_VARARGS },
  { "interrogate_get_type_by_true_name", &_inPfd5RaOqq, METH_VARARGS },
  { "interrogate_type_name", &_inPfd5Rvue5, METH_VARARGS },
  { "interrogate_type_scoped_name", &_inPfd5RB_n_, METH_VARARGS },
  { "interrogate_type_true_name", &_inPfd5RDFET, METH_VARARGS },
  { "interrogate_type_is_nested", &_inPfd5RUyNE, METH_VARARGS },
  { "interrogate_type_outer_class", &_inPfd5RpDlm, METH_VARARGS },
  { "interrogate_type_has_comment", &_inPfd5RAscF, METH_VARARGS },
  { "interrogate_type_comment", &_inPfd5RYjbU, METH_VARARGS },
  { "interrogate_type_has_module_name", &_inPfd5RWmpU, METH_VARARGS },
  { "interrogate_type_module_name", &_inPfd5RnegH, METH_VARARGS },
  { "interrogate_type_has_library_name", &_inPfd5RrrnF, METH_VARARGS },
  { "interrogate_type_library_name", &_inPfd5R7ShX, METH_VARARGS },
  { "interrogate_type_is_atomic", &_inPfd5Rx_aO, METH_VARARGS },
  { "interrogate_type_atomic_token", &_inPfd5RpofZ, METH_VARARGS },
  { "interrogate_type_is_unsigned", &_inPfd5R2J9C, METH_VARARGS },
  { "interrogate_type_is_signed", &_inPfd5RA6iz, METH_VARARGS },
  { "interrogate_type_is_long", &_inPfd5Ra78E, METH_VARARGS },
  { "interrogate_type_is_longlong", &_inPfd5RWD3W, METH_VARARGS },
  { "interrogate_type_is_short", &_inPfd5RYuud, METH_VARARGS },
  { "interrogate_type_is_wrapped", &_inPfd5RlmJS, METH_VARARGS },
  { "interrogate_type_is_pointer", &_inPfd5RLlrr, METH_VARARGS },
  { "interrogate_type_is_const", &_inPfd5Rw_wy, METH_VARARGS },
  { "interrogate_type_wrapped_type", &_inPfd5Rgk_l, METH_VARARGS },
  { "interrogate_type_is_enum", &_inPfd5RXpHY, METH_VARARGS },
  { "interrogate_type_number_of_enum_values", &_inPfd5RHhIg, METH_VARARGS },
  { "interrogate_type_enum_value_name", &_inPfd5Rff0T, METH_VARARGS },
  { "interrogate_type_enum_value_scoped_name", &_inPfd5R5PPX, METH_VARARGS },
  { "interrogate_type_enum_value", &_inPfd5RPww5, METH_VARARGS },
  { "interrogate_type_is_struct", &_inPfd5RPke3, METH_VARARGS },
  { "interrogate_type_is_class", &_inPfd5RJmw3, METH_VARARGS },
  { "interrogate_type_is_union", &_inPfd5RR0Lc, METH_VARARGS },
  { "interrogate_type_is_fully_defined", &_inPfd5Rc6gE, METH_VARARGS },
  { "interrogate_type_is_unpublished", &_inPfd5R1iT0, METH_VARARGS },
  { "interrogate_type_number_of_constructors", &_inPfd5Rz1Mn, METH_VARARGS },
  { "interrogate_type_get_constructor", &_inPfd5RWlf2, METH_VARARGS },
  { "interrogate_type_has_destructor", &_inPfd5R1q8q, METH_VARARGS },
  { "interrogate_type_destructor_is_inherited", &_inPfd5Robo6, METH_VARARGS },
  { "interrogate_type_get_destructor", &_inPfd5RjevK, METH_VARARGS },
  { "interrogate_type_number_of_elements", &_inPfd5ReBpM, METH_VARARGS },
  { "interrogate_type_get_element", &_inPfd5RfmeN, METH_VARARGS },
  { "interrogate_type_number_of_methods", &_inPfd5RKBCl, METH_VARARGS },
  { "interrogate_type_get_method", &_inPfd5R936K, METH_VARARGS },
  { "interrogate_type_number_of_make_seqs", &_inPfd5RPPXQ, METH_VARARGS },
  { "interrogate_type_get_make_seq", &_inPfd5Rnu86, METH_VARARGS },
  { "interrogate_type_number_of_casts", &_inPfd5Rngiq, METH_VARARGS },
  { "interrogate_type_get_cast", &_inPfd5RUXR0, METH_VARARGS },
  { "interrogate_type_number_of_derivations", &_inPfd5RDO7D, METH_VARARGS },
  { "interrogate_type_get_derivation", &_inPfd5RhZFz, METH_VARARGS },
  { "interrogate_type_derivation_has_upcast", &_inPfd5RnKPe, METH_VARARGS },
  { "interrogate_type_get_upcast", &_inPfd5RP3lS, METH_VARARGS },
  { "interrogate_type_derivation_downcast_is_impossible", &_inPfd5RUlLp, METH_VARARGS },
  { "interrogate_type_derivation_has_downcast", &_inPfd5R9Xei, METH_VARARGS },
  { "interrogate_type_get_downcast", &_inPfd5RaGkE, METH_VARARGS },
  { "interrogate_type_number_of_nested_types", &_inPfd5Roe_l, METH_VARARGS },
  { "interrogate_type_get_nested_type", &_inPfd5RuEdH, METH_VARARGS },
  { NULL, NULL }
};

// Makepanda builds the library as libp3dtoolconfig instead of libdtoolconfig.
#ifdef MAKEPANDA
#ifdef _WIN32
extern "C" __declspec(dllexport) void initlibp3dtoolconfig();
#else
extern "C" void initlibp3dtoolconfig();
#endif

void initlibp3dtoolconfig() {
  Py_InitModule("libp3dtoolconfig", python_simple_funcs);
}

#else  // MAKEPANDA

#ifdef _WIN32
extern "C" __declspec(dllexport) void initlibdtoolconfig();
#else
extern "C" void initlibdtoolconfig();
#endif

void initlibdtoolconfig() {
  Py_InitModule("libdtoolconfig", python_simple_funcs);
}
#endif  // MAKEPANDA

